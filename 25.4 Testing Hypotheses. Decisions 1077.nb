(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[         0,          0]
NotebookDataLength[    532823,      10962]
NotebookOptionsPosition[    523668,      10667]
NotebookOutlinePosition[    524056,      10684]
CellTagsIndexPosition[    524013,      10681]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell["\<\
Note: In this problem set, expressions in green cells match corresponding \
expressions in the text answers.\
\>", "Text",
 Evaluatable->False,
 CellChangeTimes->{{3.76938130938898*^9, 3.769381310886651*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{3.766843166067416*^9}],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<HypothesisTesting`\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.766831807223304*^9, 3.7668318178767967`*^9}}],

Cell[TextData[{
 "Since some of the problems in this section require the number critical \
value, I start out with the tools to calculate c. The following tables and \
functions are adapted from ",
 StyleBox["https://mathematica.stackexchange.com/questions/143318/critical-\
values-for-cram%C3%A9r-von-mises-goodness-of-fit-test",
  FontSize->14,
  FontSlant->"Italic"],
 ", answer of JimB. This is the z-table for ",
 StyleBox["Normal",
  FontWeight->"Bold"],
 " distribution."
}], "Text",
 CellChangeTimes->{{3.766873704698408*^9, 3.7668737109923983`*^9}, {
  3.766873842832365*^9, 3.7668738826072283`*^9}, {3.766926956643074*^9, 
  3.7669269733044577`*^9}, {3.7669279442940283`*^9, 3.766927961491993*^9}, {
  3.766955605787485*^9, 3.766955617193739*^9}, {3.766958790207077*^9, 
  3.766958791956291*^9}, {3.767034039944685*^9, 3.7670340416087627`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\[Alpha]", " ", "is", " ", "level", " ", "of", " ", "significance"}], 
    ";", " ", 
    RowBox[{"cvm", " ", "is", " ", "degrees", " ", "of", " ", "freedom"}], 
    ";", " ", 
    RowBox[{
     RowBox[{"100000", " ", "degrees"}], "\[Equal]", "\[Infinity]"}]}], " ", 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"\[Alpha]", "=", 
    RowBox[{"{", 
     RowBox[{"0.05", ",", "0.025", ",", "0.010", ",", "0.005", ",", "0.001"}],
      "}"}]}], "\n", 
   RowBox[{
    RowBox[{"cvm", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "1", ",", "6.31", ",", "12.7", ",", " ", "31.8", ",", " ", "63.7", 
         ",", " ", "318.3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "2", ",", "2.92", ",", " ", "4.30", ",", " ", "6.96", ",", " ", 
         "9.92", ",", " ", "22.3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "3", ",", "2.35", ",", " ", "3.18", ",", " ", "4.54", ",", " ", 
         "5.84", ",", " ", "10.2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "4", ",", "2.13", ",", " ", "2.78", ",", " ", "3.75", ",", " ", 
         "4.60", ",", " ", "7.17"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "5", ",", "2.02", ",", " ", "2.57", ",", " ", "3.36", ",", " ", 
         "4.03", ",", " ", "5.89"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "6", ",", "1.94", ",", " ", "2.45", ",", " ", "3.14", ",", " ", 
         "3.71", ",", " ", "5.21"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "7", ",", "1.89", ",", " ", "2.36", ",", " ", "3.00", ",", " ", 
         "3.50", ",", " ", "4.79"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "8", ",", "1.86", ",", " ", "2.31", ",", " ", "2.90", ",", " ", 
         "3.36", ",", " ", "4.50"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "9", ",", "1.83", ",", " ", "2.26", ",", " ", "2.82", ",", " ", 
         "3.25", ",", " ", "4.30"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "10", ",", "1.81", ",", " ", "2.23", ",", " ", "2.76", ",", " ", 
         "3.17", ",", " ", "4.14"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "11", ",", "1.80", ",", " ", "2.20", ",", " ", "2.72", ",", " ", 
         "3.11", ",", " ", "4.02"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "12", ",", "1.78", ",", " ", "2.18", ",", " ", "2.68", ",", " ", 
         "3.05", ",", " ", "3.93"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "13", ",", "1.77", ",", " ", "2.16", ",", " ", "2.65", ",", " ", 
         "3.01", ",", " ", "3.85"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "14", ",", "1.76", ",", " ", "2.14", ",", " ", "2.62", ",", " ", 
         "2.98", ",", " ", "3.79"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "15", ",", "1.75", ",", " ", "2.13", ",", " ", "2.60", ",", " ", 
         "2.95", ",", " ", "3.73"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "16", ",", "1.75", ",", " ", "2.12", ",", " ", "2.58", ",", " ", 
         "2.92", ",", " ", "3.69"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "17", ",", "1.74", ",", " ", "2.11", ",", " ", "2.57", ",", " ", 
         "2.90", ",", " ", "3.65"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "18", ",", "1.73", ",", " ", "2.10", ",", " ", "2.55", ",", " ", 
         "2.88", ",", " ", "3.61"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "19", ",", "1.73", ",", " ", "2.09", ",", " ", "2.54", ",", " ", 
         "2.86", ",", " ", "3.58"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "20", ",", "1.72", ",", " ", "2.09", ",", " ", "2.53", ",", " ", 
         "2.85", ",", " ", "3.55"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "22", ",", " ", "1.72", ",", " ", "2.07", ",", " ", "2.51", ",", " ", 
         "2.82", ",", " ", "3.50"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "24", ",", " ", "1.71", ",", " ", "2.06", ",", " ", "2.49", ",", " ", 
         "2.80", ",", " ", "3.47"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "26", ",", " ", "1.71", ",", " ", "2.06", ",", " ", "2.48", ",", " ", 
         "2.78", ",", " ", "3.43"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "28", ",", " ", "1.70", ",", " ", "2.05", ",", " ", "2.47", ",", " ", 
         "2.76", ",", " ", "3.41"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "30", ",", " ", "1.70", ",", " ", "2.04", ",", " ", "2.46", ",", " ", 
         "2.75", ",", " ", "3.39"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "40", ",", " ", "1.68", ",", " ", "2.02", ",", " ", "2.42", ",", " ", 
         "2.70", ",", " ", "3.31"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "50", ",", " ", "1.68", ",", " ", "2.01", ",", " ", "2.40", ",", " ", 
         "2.68", ",", " ", "3.26"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "100", ",", " ", "1.66", ",", " ", "1.98", ",", " ", "2.36", ",", " ",
          "2.63", ",", " ", "3.17"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "200", ",", " ", "1.65", ",", " ", "1.97", ",", " ", "2.35", ",", " ",
          "2.60", ",", " ", "3.13"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "100000", ",", " ", "1.65", ",", " ", "1.96", ",", " ", "2.33", ",", 
         " ", "2.58", ",", " ", "3.09"}], "}"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", 
   RowBox[{"critCVM", "=", 
    RowBox[{"Interpolation", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"cvm", "[", 
              RowBox[{"[", 
               RowBox[{"i", ",", "1"}], "]"}], "]"}], ",", 
             RowBox[{"\[Alpha]", "[", 
              RowBox[{"[", "j", "]"}], "]"}]}], "}"}], ",", 
           RowBox[{"cvm", "[", 
            RowBox[{"[", 
             RowBox[{"i", ",", 
              RowBox[{"j", "+", "1"}]}], "]"}], "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", "5"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{"Length", "[", "cvm", "]"}]}], "}"}]}], "]"}], ",", "1"}], 
      "]"}], "]"}]}], "\n"}]}]], "Input",
 CellChangeTimes->{{3.7668778430001173`*^9, 3.766877843008444*^9}, 
   3.7669238521423693`*^9, {3.766924068678233*^9, 3.7669241709413033`*^9}, {
   3.766924208172625*^9, 3.7669243134198017`*^9}, {3.766924346986616*^9, 
   3.766924365416176*^9}, {3.7669244180765877`*^9, 3.7669244622017117`*^9}, {
   3.766924500688896*^9, 3.766924571818329*^9}, {3.766924604737212*^9, 
   3.766924808818048*^9}, {3.76692487117586*^9, 3.766925096670912*^9}, {
   3.7669251295021677`*^9, 3.766925181185204*^9}, {3.7669252360530033`*^9, 
   3.766925270171303*^9}, 3.766925388237089*^9, {3.7669254428893747`*^9, 
   3.766925476660584*^9}, {3.7669256088847713`*^9, 3.766925611811963*^9}, {
   3.76692568287035*^9, 3.766925748787139*^9}, {3.766925906302766*^9, 
   3.76692591209531*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.05`", ",", "0.025`", ",", "0.01`", ",", "0.005`", ",", "0.001`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.7668778755804996`*^9, 3.766923465117076*^9, 
  3.766925390020002*^9, 3.766925478352984*^9, 3.766939920778562*^9, 
  3.76695408507274*^9, 3.7669590274657927`*^9, 3.767005929969637*^9, 
  3.76701036829116*^9, 3.7670288094096527`*^9}],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["InterpolatingFunction", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open$$ = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[{{
                 GrayLevel[0.6], 
                 AbsolutePointSize[5], 
                 PointBox[{1, 1}], 
                 PointBox[{2, 4}], 
                 PointBox[{3, 2}], 
                 PointBox[{4, 3}]}, {{}, {}, {
                  AbsoluteThickness[1], 
                  Opacity[1.], 
                  LineBox[CompressedData["
1:eJwBMQPO/CFib1JlAgAAADIAAAACAAAA4ScLwZmZ6T/ACPskWpOYv4AjHgZ5
3Os/cnpQh5xu1j/qWn1XCVDuP5K7ih5ptuc/r+pongFN8D/CUK87BHLxP46d
cUQ/bPE/ujUa8/qu9j9TbqBw1aPyP/TWyyAhFfw/neDJZqDG8z+QAqdF9GsA
QM1wGePDAfU/VsVD/9nXAkCidscSKDf2P6Bp73exDQVA/B1wDMFX9z+TpM3k
wfUGQDzjPoyykPg/7M3Z+O7ZCEABSgjW2LT5P3pl9LwNcgpAbCYw0z/T+j86
ypori9cLQL0gflb/Cfw/lpOs9xIqDUCTvMaj8yv9Pw4alcoYNg5AT3Y1d0Bm
/j+pB2LLtyIPQLClAv7Nmv8/NnA5bbjSD0BLO2UnSF0AQFrcILXmpw9AsTLc
klX5AED+sDHBQukOQNp6UGP9igFAbZ+lR/sLDkD10dd20SgCQNHi3Mj38wxA
42MO5MXDAkAZdr6AZb8LQJRGQrZUVANArv7zEMKHCkA4OInLD/EDQLBlMO3M
IglAnnrNRWWDBEA3d8OX6skHQNf3wBnbEgVAD3D3ndNyBkADhMcwfa4FQHOK
7Wak/wRA8WDLrLk/BkC/MhCgYawDQNJM4msi3QZAwss/TmVLAkCGc6iEq3cH
QIsIg92+BgFA/OprAs8HCECrPCvgePD/P2VxQsMepAhAKXVLE0Xg/j+RSBbp
CDYJQPRz0a7WJ/4/kFqZaBPFCUDN4sX5uLj9P4J7LytKYApAvh1MbRmT/T82
7cJSG/EKQHzT1YZwwv0/3W1pvRiOC0B2LZ/10lT+P0c/DY2wIAxAVrX8MJA7
/z+DS2C2aLAMQElWzbMzPQBAsmbGIk1MDUCi9bAadCABQKTSKfTL3Q1AYexd
q+EpAkCJTaAId3sOQFyS/ndEhgNAQAPGdkIWD0BHWcLdahwFQLoJ6Umopg9A
vd1CiejSBkCTjw8wnSEQQPiVkXD08QhAq0KpbbNqEEBsk2Azxi4LQCyTGthZ
shBAYCBYjj+gDUAnaxVkFgARQMwfdA9ySBBAg+uOIqBIEUBj/5rHgMsRQNFn
q5SZmRFAL++xNeOlE0Dwt3AR
                   "]]}}}, AspectRatio -> 1, Axes -> 
               False, Background -> GrayLevel[0.93], Frame -> True, 
               FrameStyle -> Directive[
                 GrayLevel[0.7], 
                 Thickness[Tiny]], FrameTicks -> None, 
               ImageSize -> {Automatic, 
                 Dynamic[
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])]}, PlotRange -> {{0, 5}, {0, 5}}], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1.`", ",", "100000.`"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0.001`", ",", "0.05`"}], "}"}]}], "}"}], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"scalar\"", "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[{{
                 GrayLevel[0.6], 
                 AbsolutePointSize[5], 
                 PointBox[{1, 1}], 
                 PointBox[{2, 4}], 
                 PointBox[{3, 2}], 
                 PointBox[{4, 3}]}, {{}, {}, {
                  AbsoluteThickness[1], 
                  Opacity[1.], 
                  LineBox[CompressedData["
1:eJwBMQPO/CFib1JlAgAAADIAAAACAAAA4ScLwZmZ6T/ACPskWpOYv4AjHgZ5
3Os/cnpQh5xu1j/qWn1XCVDuP5K7ih5ptuc/r+pongFN8D/CUK87BHLxP46d
cUQ/bPE/ujUa8/qu9j9TbqBw1aPyP/TWyyAhFfw/neDJZqDG8z+QAqdF9GsA
QM1wGePDAfU/VsVD/9nXAkCidscSKDf2P6Bp73exDQVA/B1wDMFX9z+TpM3k
wfUGQDzjPoyykPg/7M3Z+O7ZCEABSgjW2LT5P3pl9LwNcgpAbCYw0z/T+j86
ypori9cLQL0gflb/Cfw/lpOs9xIqDUCTvMaj8yv9Pw4alcoYNg5AT3Y1d0Bm
/j+pB2LLtyIPQLClAv7Nmv8/NnA5bbjSD0BLO2UnSF0AQFrcILXmpw9AsTLc
klX5AED+sDHBQukOQNp6UGP9igFAbZ+lR/sLDkD10dd20SgCQNHi3Mj38wxA
42MO5MXDAkAZdr6AZb8LQJRGQrZUVANArv7zEMKHCkA4OInLD/EDQLBlMO3M
IglAnnrNRWWDBEA3d8OX6skHQNf3wBnbEgVAD3D3ndNyBkADhMcwfa4FQHOK
7Wak/wRA8WDLrLk/BkC/MhCgYawDQNJM4msi3QZAwss/TmVLAkCGc6iEq3cH
QIsIg92+BgFA/OprAs8HCECrPCvgePD/P2VxQsMepAhAKXVLE0Xg/j+RSBbp
CDYJQPRz0a7WJ/4/kFqZaBPFCUDN4sX5uLj9P4J7LytKYApAvh1MbRmT/T82
7cJSG/EKQHzT1YZwwv0/3W1pvRiOC0B2LZ/10lT+P0c/DY2wIAxAVrX8MJA7
/z+DS2C2aLAMQElWzbMzPQBAsmbGIk1MDUCi9bAadCABQKTSKfTL3Q1AYexd
q+EpAkCJTaAId3sOQFyS/ndEhgNAQAPGdkIWD0BHWcLdahwFQLoJ6Umopg9A
vd1CiejSBkCTjw8wnSEQQPiVkXD08QhAq0KpbbNqEEBsk2Azxi4LQCyTGthZ
shBAYCBYjj+gDUAnaxVkFgARQMwfdA9ySBBAg+uOIqBIEUBj/5rHgMsRQNFn
q5SZmRFAL++xNeOlE0Dwt3AR
                   "]]}}}, AspectRatio -> 1, Axes -> 
               False, Background -> GrayLevel[0.93], Frame -> True, 
               FrameStyle -> Directive[
                 GrayLevel[0.7], 
                 Thickness[Tiny]], FrameTicks -> None, 
               ImageSize -> {Automatic, 
                 Dynamic[
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])]}, PlotRange -> {{0, 5}, {0, 5}}], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1.`", ",", "100000.`"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0.001`", ",", "0.05`"}], "}"}]}], "}"}], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"scalar\"", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Order: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"Hermite\"", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Periodic: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["False", "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic], BaselinePosition -> 
        Baseline], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->(
    "InterpolatingFunction[{{1., 100000.}, {0.001, 0.05}}, <>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7668778755804996`*^9, 3.766923465117076*^9, 
  3.766925390020002*^9, 3.766925478352984*^9, 3.766939920778562*^9, 
  3.76695408507274*^9, 3.7669590274657927`*^9, 3.767005929969637*^9, 
  3.76701036829116*^9, 3.7670288095336733`*^9}]
}, Open  ]],

Cell[TextData[{
 "Below is the z-table for ",
 StyleBox["ChiSquare",
  FontWeight->"Bold"],
 " distribution"
}], "Text",
 CellChangeTimes->{{3.766957809312059*^9, 3.766957839415085*^9}, {
  3.7669579799299603`*^9, 3.766957982424625*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"\[Alpha]", "=", 
  RowBox[{"{", 
   RowBox[{"0.05", ",", "0.025", ",", "0.010", ",", "0.005"}], "}"}]}], "\n", 

 RowBox[{
  RowBox[{
   RowBox[{"cxm", "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "1", ",", "3.84", ",", " ", "5.02", ",", " ", "6.63", ",", " ", 
        "7.88"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "2", ",", "5.99", ",", " ", "7.38", ",", " ", "9.21", ",", " ", 
        "10.60"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "3", ",", "7.81", ",", " ", "9.35", ",", " ", "11.34", ",", " ", 
        "12.84"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "4", ",", "9.49", ",", " ", "11.14", ",", " ", "13.28", ",", " ", 
        "14.86"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "5", ",", "11.07", ",", " ", "12.83", ",", " ", "15.09", ",", " ", 
        "16.75"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "6", ",", "12.59", ",", " ", "14.45", ",", " ", "16.81", ",", " ", 
        "18.55"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "7", ",", "14.07", ",", " ", "16.01", ",", " ", "18.48", ",", " ", 
        "20.28"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "8", ",", "15.51", ",", " ", "17.53", ",", " ", "20.09", ",", " ", 
        "21.95"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "9", ",", "16.92", ",", " ", "19.02", ",", " ", "21.67", ",", " ", 
        "23.59"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "10", ",", "18.31", ",", " ", "20.48", ",", " ", "23.21", ",", " ", 
        "25.19"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "11", ",", "19.68", ",", " ", "21.92", ",", " ", "24.72", ",", " ", 
        "26.76"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "12", ",", "21.03", ",", " ", "23.34", ",", " ", "26.22", ",", " ", 
        "28.30"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "13", ",", "22.36", ",", " ", "24.74", ",", " ", "27.69", ",", " ", 
        "29.82"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "14", ",", "23.68", ",", " ", "26.12", ",", " ", "29.14", ",", " ", 
        "31.32"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "15", ",", "25.00", ",", " ", "27.49", ",", " ", "30.58", ",", " ", 
        "32.80"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "16", ",", "26.30", ",", " ", "28.85", ",", " ", "32.00", ",", " ", 
        "34.27"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "17", ",", "27.59", ",", " ", "30.19", ",", " ", "33.41", ",", " ", 
        "35.72"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "18", ",", "28.87", ",", " ", "31.53", ",", " ", "34.81", ",", " ", 
        "37.16"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "19", ",", "30.14", ",", " ", "32.85", ",", " ", "36.19", ",", " ", 
        "38.58"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "20", ",", "31.41", ",", " ", "34.17", ",", " ", "37.57", ",", " ", 
        "40.00"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "21", ",", " ", "32.7", ",", " ", "35.5", ",", " ", "38.9", ",", " ", 
        "41.4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "22", ",", " ", "33.9", ",", " ", "36.8", ",", " ", "40.3", ",", " ", 
        "42.8"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "23", ",", " ", "35.2", ",", " ", "38.1", ",", " ", "41.6", ",", " ", 
        "44.2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "24", ",", " ", "36.4", ",", " ", "39.4", ",", " ", "43.0", ",", " ", 
        "45.6"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "25", ",", " ", "37.7", ",", " ", "40.6", ",", " ", "44.3", ",", " ", 
        "46.9"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "26", ",", " ", "38.9", ",", " ", "41.9", ",", " ", "45.6", ",", " ", 
        "48.3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "27", ",", " ", "40.1", ",", " ", "43.2", ",", " ", "47.0", ",", " ", 
        "49.6"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "28", ",", " ", "41.3", ",", " ", "44.5", ",", " ", "48.3", ",", " ", 
        "51.0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "29", ",", " ", "42.6", ",", " ", "45.7", ",", " ", "49.6", ",", " ", 
        "52.3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "30", ",", " ", "43.8", ",", " ", "47.0", ",", " ", "50.9", ",", " ", 
        "53.7"}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{
       "40", ",", " ", "55.8", ",", " ", "59.3", ",", " ", "63.7", ",", " ", 
        "66.8"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "50", ",", " ", "67.5", ",", " ", "71.4", ",", " ", "76.2", ",", " ", 
        "79.5"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "60", ",", " ", "79.1", ",", " ", "83.3", ",", " ", "88.4", ",", " ", 
        "92.0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "70", ",", " ", "90.5", ",", " ", "95.0", ",", " ", "100.4", ",", " ", 
        "104.2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "80", ",", " ", "101.9", ",", " ", "106.6", ",", " ", "112.3", ",", 
        " ", "116.3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "90", ",", " ", "113.1", ",", " ", "118.1", ",", " ", "124.1", ",", 
        " ", "128.3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "100", ",", " ", "124.3", ",", " ", "129.6", ",", " ", "135.8", ",", 
        " ", "140.2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"200", ",", 
        RowBox[{
         FractionBox["1", "2"], 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{
            SqrtBox[
             RowBox[{"199", "-", "1"}]], "+", "1.64"}], ")"}], "2"]}], ",", 
        RowBox[{
         FractionBox["1", "2"], 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{
            SqrtBox[
             RowBox[{"199", "-", "1"}]], "+", "1.96"}], ")"}], "2"]}], ",", 
        RowBox[{
         FractionBox["1", "2"], 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{
            SqrtBox[
             RowBox[{"199", "-", "1"}]], "+", "2.33"}], ")"}], "2"]}], ",", 
        RowBox[{
         FractionBox["1", "2"], 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{
            SqrtBox[
             RowBox[{"199", "-", "1"}]], "+", "2.58"}], ")"}], "2"]}]}], 
       "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "in", " ", "case", " ", "degrees", " ", "of", " ", "freedom", " ", "goes",
      " ", "above", " ", "199"}], ",", " ", 
    RowBox[{
    "the", " ", "applicable", " ", "number", " ", "can", " ", "be", " ", 
     "substituted", " ", "in", " ", "to", " ", "replace", " ", "199", " ", 
     "above", " ", "in", " ", "the", " ", "last", " ", "line"}], ",", " ", 
    RowBox[{
    "with", " ", "the", " ", "understanding", " ", "that", " ", "the", " ", 
     "values", " ", "in", " ", "the", " ", "last", " ", "line", " ", "are", 
     " ", 
     RowBox[{"approximate", "."}]}]}], "*)"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{"critCXM", "=", 
  RowBox[{"Interpolation", "[", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"cxm", "[", 
            RowBox[{"[", 
             RowBox[{"i", ",", "1"}], "]"}], "]"}], ",", 
           RowBox[{"\[Alpha]", "[", 
            RowBox[{"[", "j", "]"}], "]"}]}], "}"}], ",", 
         RowBox[{"cxm", "[", 
          RowBox[{"[", 
           RowBox[{"i", ",", 
            RowBox[{"j", "+", "1"}]}], "]"}], "]"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", "4"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Length", "[", "cxm", "]"}]}], "}"}]}], "]"}], ",", "1"}], 
    "]"}], "]"}]}], "\n"}], "Input",
 CellChangeTimes->{{3.766955850617839*^9, 3.766955876158979*^9}, {
  3.7669559093035*^9, 3.766955952731429*^9}, {3.766955990915634*^9, 
  3.766956186697101*^9}, {3.766956224081327*^9, 3.7669563267868633`*^9}, {
  3.766956357643445*^9, 3.766956544705246*^9}, {3.766956608224545*^9, 
  3.7669569197607517`*^9}, {3.766956966631983*^9, 3.7669572893606462`*^9}, {
  3.766957362328734*^9, 3.766957406556139*^9}, {3.7669574368824053`*^9, 
  3.766957475040884*^9}, {3.766958643251877*^9, 3.766958744911832*^9}, {
  3.7669613995125847`*^9, 3.7669614017763577`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.05`", ",", "0.025`", ",", "0.01`", ",", "0.005`"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.7669574602292624`*^9, 3.766957476114493*^9}, 
   3.767005937495965*^9, 3.7670103717037363`*^9, 3.767028814411108*^9}],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["InterpolatingFunction", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open$$ = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[{{
                 GrayLevel[0.6], 
                 AbsolutePointSize[5], 
                 PointBox[{1, 1}], 
                 PointBox[{2, 4}], 
                 PointBox[{3, 2}], 
                 PointBox[{4, 3}]}, {{}, {}, {
                  AbsoluteThickness[1], 
                  Opacity[1.], 
                  LineBox[CompressedData["
1:eJwBMQPO/CFib1JlAgAAADIAAAACAAAA4ScLwZmZ6T/ACPskWpOYv4AjHgZ5
3Os/cnpQh5xu1j/qWn1XCVDuP5K7ih5ptuc/r+pongFN8D/CUK87BHLxP46d
cUQ/bPE/ujUa8/qu9j9TbqBw1aPyP/TWyyAhFfw/neDJZqDG8z+QAqdF9GsA
QM1wGePDAfU/VsVD/9nXAkCidscSKDf2P6Bp73exDQVA/B1wDMFX9z+TpM3k
wfUGQDzjPoyykPg/7M3Z+O7ZCEABSgjW2LT5P3pl9LwNcgpAbCYw0z/T+j86
ypori9cLQL0gflb/Cfw/lpOs9xIqDUCTvMaj8yv9Pw4alcoYNg5AT3Y1d0Bm
/j+pB2LLtyIPQLClAv7Nmv8/NnA5bbjSD0BLO2UnSF0AQFrcILXmpw9AsTLc
klX5AED+sDHBQukOQNp6UGP9igFAbZ+lR/sLDkD10dd20SgCQNHi3Mj38wxA
42MO5MXDAkAZdr6AZb8LQJRGQrZUVANArv7zEMKHCkA4OInLD/EDQLBlMO3M
IglAnnrNRWWDBEA3d8OX6skHQNf3wBnbEgVAD3D3ndNyBkADhMcwfa4FQHOK
7Wak/wRA8WDLrLk/BkC/MhCgYawDQNJM4msi3QZAwss/TmVLAkCGc6iEq3cH
QIsIg92+BgFA/OprAs8HCECrPCvgePD/P2VxQsMepAhAKXVLE0Xg/j+RSBbp
CDYJQPRz0a7WJ/4/kFqZaBPFCUDN4sX5uLj9P4J7LytKYApAvh1MbRmT/T82
7cJSG/EKQHzT1YZwwv0/3W1pvRiOC0B2LZ/10lT+P0c/DY2wIAxAVrX8MJA7
/z+DS2C2aLAMQElWzbMzPQBAsmbGIk1MDUCi9bAadCABQKTSKfTL3Q1AYexd
q+EpAkCJTaAId3sOQFyS/ndEhgNAQAPGdkIWD0BHWcLdahwFQLoJ6Umopg9A
vd1CiejSBkCTjw8wnSEQQPiVkXD08QhAq0KpbbNqEEBsk2Azxi4LQCyTGthZ
shBAYCBYjj+gDUAnaxVkFgARQMwfdA9ySBBAg+uOIqBIEUBj/5rHgMsRQNFn
q5SZmRFAL++xNeOlE0Dwt3AR
                   "]]}}}, AspectRatio -> 1, Axes -> 
               False, Background -> GrayLevel[0.93], Frame -> True, 
               FrameStyle -> Directive[
                 GrayLevel[0.7], 
                 Thickness[Tiny]], FrameTicks -> None, 
               ImageSize -> {Automatic, 
                 Dynamic[
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])]}, PlotRange -> {{0, 5}, {0, 5}}], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1.`", ",", "200.`"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0.005`", ",", "0.05`"}], "}"}]}], "}"}], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"scalar\"", "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[{{
                 GrayLevel[0.6], 
                 AbsolutePointSize[5], 
                 PointBox[{1, 1}], 
                 PointBox[{2, 4}], 
                 PointBox[{3, 2}], 
                 PointBox[{4, 3}]}, {{}, {}, {
                  AbsoluteThickness[1], 
                  Opacity[1.], 
                  LineBox[CompressedData["
1:eJwBMQPO/CFib1JlAgAAADIAAAACAAAA4ScLwZmZ6T/ACPskWpOYv4AjHgZ5
3Os/cnpQh5xu1j/qWn1XCVDuP5K7ih5ptuc/r+pongFN8D/CUK87BHLxP46d
cUQ/bPE/ujUa8/qu9j9TbqBw1aPyP/TWyyAhFfw/neDJZqDG8z+QAqdF9GsA
QM1wGePDAfU/VsVD/9nXAkCidscSKDf2P6Bp73exDQVA/B1wDMFX9z+TpM3k
wfUGQDzjPoyykPg/7M3Z+O7ZCEABSgjW2LT5P3pl9LwNcgpAbCYw0z/T+j86
ypori9cLQL0gflb/Cfw/lpOs9xIqDUCTvMaj8yv9Pw4alcoYNg5AT3Y1d0Bm
/j+pB2LLtyIPQLClAv7Nmv8/NnA5bbjSD0BLO2UnSF0AQFrcILXmpw9AsTLc
klX5AED+sDHBQukOQNp6UGP9igFAbZ+lR/sLDkD10dd20SgCQNHi3Mj38wxA
42MO5MXDAkAZdr6AZb8LQJRGQrZUVANArv7zEMKHCkA4OInLD/EDQLBlMO3M
IglAnnrNRWWDBEA3d8OX6skHQNf3wBnbEgVAD3D3ndNyBkADhMcwfa4FQHOK
7Wak/wRA8WDLrLk/BkC/MhCgYawDQNJM4msi3QZAwss/TmVLAkCGc6iEq3cH
QIsIg92+BgFA/OprAs8HCECrPCvgePD/P2VxQsMepAhAKXVLE0Xg/j+RSBbp
CDYJQPRz0a7WJ/4/kFqZaBPFCUDN4sX5uLj9P4J7LytKYApAvh1MbRmT/T82
7cJSG/EKQHzT1YZwwv0/3W1pvRiOC0B2LZ/10lT+P0c/DY2wIAxAVrX8MJA7
/z+DS2C2aLAMQElWzbMzPQBAsmbGIk1MDUCi9bAadCABQKTSKfTL3Q1AYexd
q+EpAkCJTaAId3sOQFyS/ndEhgNAQAPGdkIWD0BHWcLdahwFQLoJ6Umopg9A
vd1CiejSBkCTjw8wnSEQQPiVkXD08QhAq0KpbbNqEEBsk2Azxi4LQCyTGthZ
shBAYCBYjj+gDUAnaxVkFgARQMwfdA9ySBBAg+uOIqBIEUBj/5rHgMsRQNFn
q5SZmRFAL++xNeOlE0Dwt3AR
                   "]]}}}, AspectRatio -> 1, Axes -> 
               False, Background -> GrayLevel[0.93], Frame -> True, 
               FrameStyle -> Directive[
                 GrayLevel[0.7], 
                 Thickness[Tiny]], FrameTicks -> None, 
               ImageSize -> {Automatic, 
                 Dynamic[
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])]}, PlotRange -> {{0, 5}, {0, 5}}], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1.`", ",", "200.`"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0.005`", ",", "0.05`"}], "}"}]}], "}"}], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"scalar\"", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Order: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"Hermite\"", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Periodic: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["False", "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic], BaselinePosition -> 
        Baseline], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->(
    "InterpolatingFunction[{{1., 200.}, {0.005, 0.05}}, <>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.7669574602292624`*^9, 3.766957476114493*^9}, 
   3.767005937495965*^9, 3.7670103717037363`*^9, 3.7670288144213247`*^9}]
}, Open  ]],

Cell["\<\
3.  Test \[Mu] = 0 against \[Mu] > 0, assuming normality and using the sample \
0, 1, -1, 3, -8, 6, 1 (deviations of the azimuth [multiples of 0.01 radian] \
in some revolution of a satellite). Choose \[Alpha] = 5% as level of \
significance.\
\>", "Text",
 CellChangeTimes->{{3.766778012793242*^9, 3.766778097276092*^9}, {
  3.76684219396458*^9, 3.766842197499*^9}},
 Background->RGBColor[1, 0.9, 0.8]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Clear", "[", "\"\<Global`*\>\"", "]"}], "*)"}]], "Input",
 CellChangeTimes->{{3.7669270408957663`*^9, 3.7669270454139967`*^9}}],

Cell["\<\
Here the \[Mu] hypothesis is the null hypothesis. Under this hypothesis the \
deviations of azimuth in the satellite\[CloseCurlyQuote]s orbit are due to \
random chance, and the assertion that the satellite is not experiencing a \
progressively dangerous orbital modification.\
\>", "Text",
 CellChangeTimes->{{3.7668422232812557`*^9, 3.766842280085582*^9}, {
  3.766842317827261*^9, 3.766842356352784*^9}, {3.767034606221944*^9, 
  3.767034610084783*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sam", "=", 
  RowBox[{"{", 
   RowBox[{"0", ",", "1", ",", 
    RowBox[{"-", "1"}], ",", "3", ",", 
    RowBox[{"-", "8"}], ",", "6", ",", "1"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.766831694009766*^9, 3.76683171085842*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "1", ",", 
   RowBox[{"-", "1"}], ",", "3", ",", 
   RowBox[{"-", "8"}], ",", "6", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.766831712129874*^9, 3.7668318249477997`*^9, 
  3.767005654329411*^9, 3.7670107348696012`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"emp", "=", 
  RowBox[{"EmpiricalDistribution", "[", "sam", "]"}]}]], "Input",
 CellChangeTimes->{{3.766841774255768*^9, 3.766841782231221*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DataDistribution",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{18., {0., 18.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGAwBmIQ/Xmu+cn//+/vZ4CCC1M/TWa6cwfO38s482xKyU04
/7jcgZ2dbtfg/Je6ZtOXalyG802T9I879p2H8y+e+nxkr91JOL9Xun/Bj/RD
+2fNBIGT9p8WTNjrlLQdyr9pXzaPm8Nu+1I4/+nEnefMz7Taw/ht95KiXc6v
g/NfPvaf8/Dqbjhfw2XB8sCVR+B8JRNxGd0vp+D8f3Ojb6o8vgDnX14fY2xj
cwXO7xG4e2tC9HU43/RvoXDbvltw/kGLtpk7nt+F8+Ubwm+4rnpgb2IMAo/t
L2W5vN4c8QjO//7nwxKHV4/hfJGr6svnzn0K5y8KkQuQNHkO56tE5zbMPPQC
zp+33O3ny6JXcH7X7PsSkWxv4Py8q0yNM3a/hfPdptUV3Ml4D+d7/I9pnl/z
Ac7PvLb/047Qj3C+c2PT1kSFT3D+9PyPu3meI/jPG5Y+m7/vM5z/IXVnyqH2
L3D+11wh9rOJX+H8zZ6n/6TpfoOGz0v71xkGZsxfEXz51bcmt5/9DufzHHzi
Mnv6Dzj/609jqelFP+0hqeWDfUSZvvFUz19wfsmxrvlKQr/h/B5LbYMZrxH8
2AZtkbnb/sD5K7huWC+p/Qvnv99+sn1y6D84/52FtLqQ/H84v/a576f//3Hx
GRgA8dtlww==
           "], {{{}, 
             {GrayLevel[0.85], EdgeForm[None], 
              GraphicsGroupBox[
               PolygonBox[{{7, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40,
                 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 
                24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9,
                 8}}]]}, {}, {}}, {{}, {}, 
             {GrayLevel[0.55], AbsoluteThickness[1.5], Opacity[1.], 
              LineBox[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 
               17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
                33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 
               48, 49, 50}]}}}],
          AspectRatio->1,
          Axes->{False, False},
          AxesLabel->{None, None},
          AxesOrigin->{0, 0},
          Background->GrayLevel[0.93],
          BaseStyle->{FontFamily -> "Arial"},
          DisplayFunction->Identity,
          Frame->{{True, True}, {True, True}},
          FrameLabel->{{None, None}, {None, None}},
          FrameStyle->Directive[
            Thickness[Tiny], 
            GrayLevel[0.7]],
          FrameTicks->{{None, None}, {None, None}},
          GridLines->{None, None},
          GridLinesStyle->Directive[
            GrayLevel[0.5, 0.4]],
          ImageSize->{Automatic, 
            Dynamic[
            3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])]},
          LabelStyle->{FontFamily -> "Arial"},
          Method->{"ScalingFunctions" -> None, "AxesInFront" -> True},
          PlotRange->{All, All},
          PlotRangeClipping->True,
          PlotRangePadding->{{0, 0}, {0, 0.1}},
          Ticks->{Automatic, Automatic}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Type: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"Empirical\"\>",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Data points: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["7",
              "SummaryItem"]}]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->
      GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquareMinusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGAwBmIQ/Xmu+cn//+/vZ4CCC1M/TWa6cwfO38s482xKyU04
/7jcgZ2dbtfg/Je6ZtOXalyG802T9I879p2H8y+e+nxkr91JOL9Xun/Bj/RD
+2fNBIGT9p8WTNjrlLQdyr9pXzaPm8Nu+1I4/+nEnefMz7Taw/ht95KiXc6v
g/NfPvaf8/Dqbjhfw2XB8sCVR+B8JRNxGd0vp+D8f3Ojb6o8vgDnX14fY2xj
cwXO7xG4e2tC9HU43/RvoXDbvltw/kGLtpk7nt+F8+Ubwm+4rnpgb2IMAo/t
L2W5vN4c8QjO//7nwxKHV4/hfJGr6svnzn0K5y8KkQuQNHkO56tE5zbMPPQC
zp+33O3ny6JXcH7X7PsSkWxv4Py8q0yNM3a/hfPdptUV3Ml4D+d7/I9pnl/z
Ac7PvLb/047Qj3C+c2PT1kSFT3D+9PyPu3meI/jPG5Y+m7/vM5z/IXVnyqH2
L3D+11wh9rOJX+H8zZ6n/6TpfoOGz0v71xkGZsxfEXz51bcmt5/9DufzHHzi
Mnv6Dzj/609jqelFP+0hqeWDfUSZvvFUz19wfsmxrvlKQr/h/B5LbYMZrxH8
2AZtkbnb/sD5K7huWC+p/Qvnv99+sn1y6D84/52FtLqQ/H84v/a576f//3Hx
GRgA8dtlww==
           "], {{{}, 
             {GrayLevel[0.85], EdgeForm[None], 
              GraphicsGroupBox[
               PolygonBox[{{7, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40,
                 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 
                24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9,
                 8}}]]}, {}, {}}, {{}, {}, 
             {GrayLevel[0.55], AbsoluteThickness[1.5], Opacity[1.], 
              LineBox[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 
               17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
                33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 
               48, 49, 50}]}}}],
          AspectRatio->1,
          Axes->{False, False},
          AxesLabel->{None, None},
          AxesOrigin->{0, 0},
          Background->GrayLevel[0.93],
          BaseStyle->{FontFamily -> "Arial"},
          DisplayFunction->Identity,
          Frame->{{True, True}, {True, True}},
          FrameLabel->{{None, None}, {None, None}},
          FrameStyle->Directive[
            Thickness[Tiny], 
            GrayLevel[0.7]],
          FrameTicks->{{None, None}, {None, None}},
          GridLines->{None, None},
          GridLinesStyle->Directive[
            GrayLevel[0.5, 0.4]],
          ImageSize->{Automatic, 
            Dynamic[
            3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])]},
          LabelStyle->{FontFamily -> "Arial"},
          Method->{"ScalingFunctions" -> None, "AxesInFront" -> True},
          PlotRange->{All, All},
          PlotRangeClipping->True,
          PlotRangePadding->{{0, 0}, {0, 0.1}},
          Ticks->{Automatic, Automatic}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Type: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"Empirical\"\>",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Data points: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["7",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Input dimension: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Domain: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              RowBox[{"{", 
               RowBox[{
                RowBox[{"-", "8"}], ",", "6"}], "}"}],
              "SummaryItem"]}]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DataDistribution["Empirical", {{
     Rational[1, 7], 
     Rational[1, 7], 
     Rational[1, 7], 
     Rational[2, 7], 
     Rational[1, 7], 
     Rational[1, 7]}, {-8, -1, 0, 1, 3, 6}, False}, 1, 7],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7668417832840347`*^9, 3.7670056664243517`*^9, 
  3.767010737408531*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"Mean", "[", "sam", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.766832090789363*^9, 3.7668320944806757`*^9}, {
  3.767006050852263*^9, 3.767006054433504*^9}}],

Cell[BoxData["0.2857142857142857`"], "Output",
 CellChangeTimes->{3.766832095129683*^9, 3.766841788781024*^9, 
  3.767005669361171*^9, 3.767006054998151*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"StandardDeviation", "[", "sam", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.767010740997169*^9, 3.7670107507905273`*^9}}],

Cell[BoxData["4.3094580368566735`"], "Output",
 CellChangeTimes->{3.767010751528575*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DiscretePlot", "[", 
  RowBox[{
   RowBox[{"CDF", "[", 
    RowBox[{"emp", ",", "x"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "4"}], ",", "4", ",", ".01"}], "}"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "200"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7668418840969152`*^9, 3.766841891616117*^9}, {
  3.76684193390256*^9, 3.766841965522068*^9}, {3.766842006383724*^9, 
  3.766842019526978*^9}}],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.0038500000000000006`],
     AbsoluteThickness[1.6], 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
     0.0038500000000000006`], AbsoluteThickness[1.6], Opacity[0.2], 
     PolygonBox[{{-4., 0.14285714285714285`}, {-3.99, 
       0.14285714285714285`}, {-3.98, 0.14285714285714285`}, {-3.97, 
       0.14285714285714285`}, {-3.96, 0.14285714285714285`}, {-3.95, 
       0.14285714285714285`}, {-3.94, 0.14285714285714285`}, {-3.93, 
       0.14285714285714285`}, {-3.92, 0.14285714285714285`}, {-3.91, 
       0.14285714285714285`}, {-3.9, 0.14285714285714285`}, {-3.89, 
       0.14285714285714285`}, {-3.88, 0.14285714285714285`}, {-3.87, 
       0.14285714285714285`}, {-3.86, 0.14285714285714285`}, {-3.85, 
       0.14285714285714285`}, {-3.84, 0.14285714285714285`}, {-3.83, 
       0.14285714285714285`}, {-3.82, 0.14285714285714285`}, {-3.81, 
       0.14285714285714285`}, {-3.8, 0.14285714285714285`}, {-3.79, 
       0.14285714285714285`}, {-3.78, 0.14285714285714285`}, {-3.77, 
       0.14285714285714285`}, {-3.76, 0.14285714285714285`}, {-3.75, 
       0.14285714285714285`}, {-3.74, 0.14285714285714285`}, {-3.73, 
       0.14285714285714285`}, {-3.7199999999999998`, 
       0.14285714285714285`}, {-3.71, 0.14285714285714285`}, {-3.7, 
       0.14285714285714285`}, {-3.69, 0.14285714285714285`}, {-3.68, 
       0.14285714285714285`}, {-3.67, 0.14285714285714285`}, {-3.66, 
       0.14285714285714285`}, {-3.65, 0.14285714285714285`}, {-3.64, 
       0.14285714285714285`}, {-3.63, 0.14285714285714285`}, {-3.62, 
       0.14285714285714285`}, {-3.61, 0.14285714285714285`}, {-3.6, 
       0.14285714285714285`}, {-3.59, 0.14285714285714285`}, {-3.58, 
       0.14285714285714285`}, {-3.57, 0.14285714285714285`}, {-3.56, 
       0.14285714285714285`}, {-3.55, 0.14285714285714285`}, {-3.54, 
       0.14285714285714285`}, {-3.53, 0.14285714285714285`}, {-3.52, 
       0.14285714285714285`}, {-3.51, 0.14285714285714285`}, {-3.5, 
       0.14285714285714285`}, {-3.49, 0.14285714285714285`}, {-3.48, 
       0.14285714285714285`}, {-3.4699999999999998`, 
       0.14285714285714285`}, {-3.46, 0.14285714285714285`}, {-3.45, 
       0.14285714285714285`}, {-3.44, 
       0.14285714285714285`}, {-3.4299999999999997`, 
       0.14285714285714285`}, {-3.42, 0.14285714285714285`}, {-3.41, 
       0.14285714285714285`}, {-3.4, 0.14285714285714285`}, {-3.39, 
       0.14285714285714285`}, {-3.38, 0.14285714285714285`}, {-3.37, 
       0.14285714285714285`}, {-3.36, 0.14285714285714285`}, {-3.35, 
       0.14285714285714285`}, {-3.34, 0.14285714285714285`}, {-3.33, 
       0.14285714285714285`}, {-3.32, 0.14285714285714285`}, {-3.31, 
       0.14285714285714285`}, {-3.3, 0.14285714285714285`}, {-3.29, 
       0.14285714285714285`}, {-3.2800000000000002`, 
       0.14285714285714285`}, {-3.27, 0.14285714285714285`}, {-3.26, 
       0.14285714285714285`}, {-3.25, 0.14285714285714285`}, {-3.24, 
       0.14285714285714285`}, {-3.23, 
       0.14285714285714285`}, {-3.2199999999999998`, 
       0.14285714285714285`}, {-3.21, 0.14285714285714285`}, {-3.2, 
       0.14285714285714285`}, {-3.19, 
       0.14285714285714285`}, {-3.1799999999999997`, 
       0.14285714285714285`}, {-3.17, 0.14285714285714285`}, {-3.16, 
       0.14285714285714285`}, {-3.15, 0.14285714285714285`}, {-3.14, 
       0.14285714285714285`}, {-3.13, 0.14285714285714285`}, {-3.12, 
       0.14285714285714285`}, {-3.11, 0.14285714285714285`}, {-3.1, 
       0.14285714285714285`}, {-3.09, 0.14285714285714285`}, {-3.08, 
       0.14285714285714285`}, {-3.07, 0.14285714285714285`}, {-3.06, 
       0.14285714285714285`}, {-3.05, 0.14285714285714285`}, {-3.04, 
       0.14285714285714285`}, {-3.0300000000000002`, 
       0.14285714285714285`}, {-3.02, 0.14285714285714285`}, {-3.01, 
       0.14285714285714285`}, {-3., 0.14285714285714285`}, {-2.99, 
       0.14285714285714285`}, {-2.98, 
       0.14285714285714285`}, {-2.9699999999999998`, 
       0.14285714285714285`}, {-2.96, 0.14285714285714285`}, {-2.95, 
       0.14285714285714285`}, {-2.94, 
       0.14285714285714285`}, {-2.9299999999999997`, 
       0.14285714285714285`}, {-2.92, 0.14285714285714285`}, {-2.91, 
       0.14285714285714285`}, {-2.9, 
       0.14285714285714285`}, {-2.8899999999999997`, 
       0.14285714285714285`}, {-2.88, 0.14285714285714285`}, {-2.87, 
       0.14285714285714285`}, {-2.86, 
       0.14285714285714285`}, {-2.8499999999999996`, 
       0.14285714285714285`}, {-2.84, 0.14285714285714285`}, {-2.83, 
       0.14285714285714285`}, {-2.8200000000000003`, 
       0.14285714285714285`}, {-2.81, 0.14285714285714285`}, {-2.8, 
       0.14285714285714285`}, {-2.79, 
       0.14285714285714285`}, {-2.7800000000000002`, 
       0.14285714285714285`}, {-2.77, 0.14285714285714285`}, {-2.76, 
       0.14285714285714285`}, {-2.75, 0.14285714285714285`}, {-2.74, 
       0.14285714285714285`}, {-2.73, 
       0.14285714285714285`}, {-2.7199999999999998`, 
       0.14285714285714285`}, {-2.71, 0.14285714285714285`}, {-2.7, 
       0.14285714285714285`}, {-2.69, 
       0.14285714285714285`}, {-2.6799999999999997`, 
       0.14285714285714285`}, {-2.67, 0.14285714285714285`}, {-2.66, 
       0.14285714285714285`}, {-2.65, 
       0.14285714285714285`}, {-2.6399999999999997`, 
       0.14285714285714285`}, {-2.63, 0.14285714285714285`}, {-2.62, 
       0.14285714285714285`}, {-2.61, 
       0.14285714285714285`}, {-2.5999999999999996`, 
       0.14285714285714285`}, {-2.59, 0.14285714285714285`}, {-2.58, 
       0.14285714285714285`}, {-2.5700000000000003`, 
       0.14285714285714285`}, {-2.56, 0.14285714285714285`}, {-2.55, 
       0.14285714285714285`}, {-2.54, 
       0.14285714285714285`}, {-2.5300000000000002`, 
       0.14285714285714285`}, {-2.52, 0.14285714285714285`}, {-2.51, 
       0.14285714285714285`}, {-2.5, 0.14285714285714285`}, {-2.49, 
       0.14285714285714285`}, {-2.48, 
       0.14285714285714285`}, {-2.4699999999999998`, 
       0.14285714285714285`}, {-2.46, 0.14285714285714285`}, {-2.45, 
       0.14285714285714285`}, {-2.44, 
       0.14285714285714285`}, {-2.4299999999999997`, 
       0.14285714285714285`}, {-2.42, 0.14285714285714285`}, {-2.41, 
       0.14285714285714285`}, {-2.4, 
       0.14285714285714285`}, {-2.3899999999999997`, 
       0.14285714285714285`}, {-2.38, 0.14285714285714285`}, {-2.37, 
       0.14285714285714285`}, {-2.36, 
       0.14285714285714285`}, {-2.3499999999999996`, 
       0.14285714285714285`}, {-2.34, 0.14285714285714285`}, {-2.33, 
       0.14285714285714285`}, {-2.3200000000000003`, 
       0.14285714285714285`}, {-2.31, 0.14285714285714285`}, {-2.3, 
       0.14285714285714285`}, {-2.29, 
       0.14285714285714285`}, {-2.2800000000000002`, 
       0.14285714285714285`}, {-2.27, 0.14285714285714285`}, {-2.26, 
       0.14285714285714285`}, {-2.25, 0.14285714285714285`}, {-2.24, 
       0.14285714285714285`}, {-2.23, 
       0.14285714285714285`}, {-2.2199999999999998`, 
       0.14285714285714285`}, {-2.21, 0.14285714285714285`}, {-2.2, 
       0.14285714285714285`}, {-2.19, 
       0.14285714285714285`}, {-2.1799999999999997`, 
       0.14285714285714285`}, {-2.17, 0.14285714285714285`}, {-2.16, 
       0.14285714285714285`}, {-2.15, 
       0.14285714285714285`}, {-2.1399999999999997`, 
       0.14285714285714285`}, {-2.13, 0.14285714285714285`}, {-2.12, 
       0.14285714285714285`}, {-2.11, 
       0.14285714285714285`}, {-2.0999999999999996`, 
       0.14285714285714285`}, {-2.09, 0.14285714285714285`}, {-2.08, 
       0.14285714285714285`}, {-2.0700000000000003`, 
       0.14285714285714285`}, {-2.06, 0.14285714285714285`}, {-2.05, 
       0.14285714285714285`}, {-2.04, 
       0.14285714285714285`}, {-2.0300000000000002`, 
       0.14285714285714285`}, {-2.02, 0.14285714285714285`}, {-2.01, 
       0.14285714285714285`}, {-2., 
       0.14285714285714285`}, {-1.9899999999999998`, 
       0.14285714285714285`}, {-1.98, 
       0.14285714285714285`}, {-1.9699999999999998`, 
       0.14285714285714285`}, {-1.96, 
       0.14285714285714285`}, {-1.9500000000000002`, 
       0.14285714285714285`}, {-1.94, 
       0.14285714285714285`}, {-1.9300000000000002`, 
       0.14285714285714285`}, {-1.92, 
       0.14285714285714285`}, {-1.9100000000000001`, 
       0.14285714285714285`}, {-1.9, 
       0.14285714285714285`}, {-1.8900000000000001`, 
       0.14285714285714285`}, {-1.88, 0.14285714285714285`}, {-1.87, 
       0.14285714285714285`}, {-1.8599999999999999`, 
       0.14285714285714285`}, {-1.85, 
       0.14285714285714285`}, {-1.8399999999999999`, 
       0.14285714285714285`}, {-1.83, 
       0.14285714285714285`}, {-1.8199999999999998`, 
       0.14285714285714285`}, {-1.81, 
       0.14285714285714285`}, {-1.7999999999999998`, 
       0.14285714285714285`}, {-1.79, 
       0.14285714285714285`}, {-1.7799999999999998`, 
       0.14285714285714285`}, {-1.77, 
       0.14285714285714285`}, {-1.7599999999999998`, 
       0.14285714285714285`}, {-1.75, 
       0.14285714285714285`}, {-1.7399999999999998`, 
       0.14285714285714285`}, {-1.73, 
       0.14285714285714285`}, {-1.7199999999999998`, 
       0.14285714285714285`}, {-1.71, 
       0.14285714285714285`}, {-1.6999999999999997`, 
       0.14285714285714285`}, {-1.69, 
       0.14285714285714285`}, {-1.6800000000000002`, 
       0.14285714285714285`}, {-1.67, 
       0.14285714285714285`}, {-1.6600000000000001`, 
       0.14285714285714285`}, {-1.65, 
       0.14285714285714285`}, {-1.6400000000000001`, 
       0.14285714285714285`}, {-1.63, 0.14285714285714285`}, {-1.62, 
       0.14285714285714285`}, {-1.6099999999999999`, 
       0.14285714285714285`}, {-1.6, 
       0.14285714285714285`}, {-1.5899999999999999`, 
       0.14285714285714285`}, {-1.58, 
       0.14285714285714285`}, {-1.5699999999999998`, 
       0.14285714285714285`}, {-1.56, 
       0.14285714285714285`}, {-1.5499999999999998`, 
       0.14285714285714285`}, {-1.54, 
       0.14285714285714285`}, {-1.5299999999999998`, 
       0.14285714285714285`}, {-1.52, 
       0.14285714285714285`}, {-1.5099999999999998`, 
       0.14285714285714285`}, {-1.5, 
       0.14285714285714285`}, {-1.4899999999999998`, 
       0.14285714285714285`}, {-1.48, 
       0.14285714285714285`}, {-1.4699999999999998`, 
       0.14285714285714285`}, {-1.46, 
       0.14285714285714285`}, {-1.4499999999999997`, 
       0.14285714285714285`}, {-1.44, 
       0.14285714285714285`}, {-1.4300000000000002`, 
       0.14285714285714285`}, {-1.42, 
       0.14285714285714285`}, {-1.4100000000000001`, 
       0.14285714285714285`}, {-1.4, 
       0.14285714285714285`}, {-1.3900000000000001`, 
       0.14285714285714285`}, {-1.38, 0.14285714285714285`}, {-1.37, 
       0.14285714285714285`}, {-1.3599999999999999`, 
       0.14285714285714285`}, {-1.35, 
       0.14285714285714285`}, {-1.3399999999999999`, 
       0.14285714285714285`}, {-1.33, 
       0.14285714285714285`}, {-1.3199999999999998`, 
       0.14285714285714285`}, {-1.31, 
       0.14285714285714285`}, {-1.2999999999999998`, 
       0.14285714285714285`}, {-1.29, 
       0.14285714285714285`}, {-1.2799999999999998`, 
       0.14285714285714285`}, {-1.27, 
       0.14285714285714285`}, {-1.2599999999999998`, 
       0.14285714285714285`}, {-1.25, 
       0.14285714285714285`}, {-1.2399999999999998`, 
       0.14285714285714285`}, {-1.23, 
       0.14285714285714285`}, {-1.2199999999999998`, 
       0.14285714285714285`}, {-1.21, 
       0.14285714285714285`}, {-1.1999999999999997`, 
       0.14285714285714285`}, {-1.19, 
       0.14285714285714285`}, {-1.1800000000000002`, 
       0.14285714285714285`}, {-1.17, 
       0.14285714285714285`}, {-1.1600000000000001`, 
       0.14285714285714285`}, {-1.15, 
       0.14285714285714285`}, {-1.1400000000000001`, 
       0.14285714285714285`}, {-1.13, 0.14285714285714285`}, {-1.12, 
       0.14285714285714285`}, {-1.1099999999999999`, 
       0.14285714285714285`}, {-1.1, 
       0.14285714285714285`}, {-1.0899999999999999`, 
       0.14285714285714285`}, {-1.08, 
       0.14285714285714285`}, {-1.0699999999999998`, 
       0.14285714285714285`}, {-1.06, 
       0.14285714285714285`}, {-1.0499999999999998`, 
       0.14285714285714285`}, {-1.04, 
       0.14285714285714285`}, {-1.0299999999999998`, 
       0.14285714285714285`}, {-1.02, 
       0.14285714285714285`}, {-1.0099999999999998`, 
       0.14285714285714285`}, {-1., 0.2857142857142857}, {-0.9899999999999998,
        0.2857142857142857}, {-0.98, 
       0.2857142857142857}, {-0.9699999999999998, 0.2857142857142857}, {-0.96,
        0.2857142857142857}, {-0.9499999999999997, 
       0.2857142857142857}, {-0.94, 0.2857142857142857}, {-0.9299999999999997,
        0.2857142857142857}, {-0.9199999999999999, 
       0.2857142857142857}, {-0.9100000000000001, 
       0.2857142857142857}, {-0.8999999999999999, 
       0.2857142857142857}, {-0.8900000000000001, 
       0.2857142857142857}, {-0.8799999999999999, 
       0.2857142857142857}, {-0.8700000000000001, 
       0.2857142857142857}, {-0.8599999999999999, 
       0.2857142857142857}, {-0.8500000000000001, 
       0.2857142857142857}, {-0.8399999999999999, 
       0.2857142857142857}, {-0.8300000000000001, 
       0.2857142857142857}, {-0.8199999999999998, 0.2857142857142857}, {-0.81,
        0.2857142857142857}, {-0.7999999999999998, 
       0.2857142857142857}, {-0.79, 0.2857142857142857}, {-0.7799999999999998,
        0.2857142857142857}, {-0.77, 
       0.2857142857142857}, {-0.7599999999999998, 0.2857142857142857}, {-0.75,
        0.2857142857142857}, {-0.7399999999999998, 
       0.2857142857142857}, {-0.73, 0.2857142857142857}, {-0.7199999999999998,
        0.2857142857142857}, {-0.71, 
       0.2857142857142857}, {-0.6999999999999997, 0.2857142857142857}, {-0.69,
        0.2857142857142857}, {-0.6799999999999997, 
       0.2857142857142857}, {-0.6699999999999999, 
       0.2857142857142857}, {-0.6600000000000001, 
       0.2857142857142857}, {-0.6499999999999999, 
       0.2857142857142857}, {-0.6400000000000001, 
       0.2857142857142857}, {-0.6299999999999999, 
       0.2857142857142857}, {-0.6200000000000001, 
       0.2857142857142857}, {-0.6099999999999999, 
       0.2857142857142857}, {-0.6000000000000001, 
       0.2857142857142857}, {-0.5899999999999999, 
       0.2857142857142857}, {-0.5800000000000001, 
       0.2857142857142857}, {-0.5699999999999998, 0.2857142857142857}, {-0.56,
        0.2857142857142857}, {-0.5499999999999998, 
       0.2857142857142857}, {-0.54, 0.2857142857142857}, {-0.5299999999999998,
        0.2857142857142857}, {-0.52, 
       0.2857142857142857}, {-0.5099999999999998, 0.2857142857142857}, {-0.5, 
       0.2857142857142857}, {-0.48999999999999977`, 
       0.2857142857142857}, {-0.48, 
       0.2857142857142857}, {-0.46999999999999975`, 
       0.2857142857142857}, {-0.45999999999999996`, 
       0.2857142857142857}, {-0.44999999999999973`, 
       0.2857142857142857}, {-0.43999999999999995`, 
       0.2857142857142857}, {-0.4299999999999997, 
       0.2857142857142857}, {-0.41999999999999993`, 
       0.2857142857142857}, {-0.41000000000000014`, 
       0.2857142857142857}, {-0.3999999999999999, 
       0.2857142857142857}, {-0.3900000000000001, 
       0.2857142857142857}, {-0.3799999999999999, 
       0.2857142857142857}, {-0.3700000000000001, 
       0.2857142857142857}, {-0.3599999999999999, 
       0.2857142857142857}, {-0.3500000000000001, 
       0.2857142857142857}, {-0.33999999999999986`, 
       0.2857142857142857}, {-0.33000000000000007`, 
       0.2857142857142857}, {-0.31999999999999984`, 
       0.2857142857142857}, {-0.31000000000000005`, 
       0.2857142857142857}, {-0.2999999999999998, 
       0.2857142857142857}, {-0.29000000000000004`, 
       0.2857142857142857}, {-0.2799999999999998, 0.2857142857142857}, {-0.27,
        0.2857142857142857}, {-0.2599999999999998, 
       0.2857142857142857}, {-0.25, 
       0.2857142857142857}, {-0.23999999999999977`, 
       0.2857142857142857}, {-0.22999999999999998`, 
       0.2857142857142857}, {-0.21999999999999975`, 
       0.2857142857142857}, {-0.20999999999999996`, 
       0.2857142857142857}, {-0.19999999999999973`, 
       0.2857142857142857}, {-0.18999999999999995`, 
       0.2857142857142857}, {-0.17999999999999972`, 
       0.2857142857142857}, {-0.16999999999999993`, 
       0.2857142857142857}, {-0.16000000000000014`, 
       0.2857142857142857}, {-0.1499999999999999, 
       0.2857142857142857}, {-0.14000000000000012`, 
       0.2857142857142857}, {-0.1299999999999999, 
       0.2857142857142857}, {-0.1200000000000001, 
       0.2857142857142857}, {-0.10999999999999988`, 
       0.2857142857142857}, {-0.10000000000000009`, 
       0.2857142857142857}, {-0.08999999999999986, 
       0.2857142857142857}, {-0.08000000000000007, 
       0.2857142857142857}, {-0.06999999999999984, 
       0.2857142857142857}, {-0.06000000000000005, 
       0.2857142857142857}, {-0.04999999999999982, 
       0.2857142857142857}, {-0.040000000000000036`, 
       0.2857142857142857}, {-0.029999999999999805`, 
       0.2857142857142857}, {-0.020000000000000018`, 
       0.2857142857142857}, {-0.009999999999999787, 0.2857142857142857}, {0., 
       0.42857142857142855`}, {0.009999999999999787, 0.42857142857142855`}, {
       0.020000000000000462`, 0.42857142857142855`}, {0.03000000000000025, 
       0.42857142857142855`}, {0.040000000000000036`, 0.42857142857142855`}, {
       0.04999999999999982, 0.42857142857142855`}, {0.0600000000000005, 
       0.42857142857142855`}, {0.07000000000000028, 0.42857142857142855`}, {
       0.08000000000000007, 0.42857142857142855`}, {0.08999999999999986, 
       0.42857142857142855`}, {0.09999999999999964, 0.42857142857142855`}, {
       0.11000000000000032`, 0.42857142857142855`}, {0.1200000000000001, 
       0.42857142857142855`}, {0.1299999999999999, 0.42857142857142855`}, {
       0.13999999999999968`, 0.42857142857142855`}, {0.15000000000000036`, 
       0.42857142857142855`}, {0.16000000000000014`, 0.42857142857142855`}, {
       0.16999999999999993`, 0.42857142857142855`}, {0.17999999999999972`, 
       0.42857142857142855`}, {0.1900000000000004, 0.42857142857142855`}, {
       0.20000000000000018`, 0.42857142857142855`}, {0.20999999999999996`, 
       0.42857142857142855`}, {0.21999999999999975`, 0.42857142857142855`}, {
       0.23000000000000043`, 0.42857142857142855`}, {0.2400000000000002, 
       0.42857142857142855`}, {0.25, 0.42857142857142855`}, {
       0.2599999999999998, 0.42857142857142855`}, {0.27000000000000046`, 
       0.42857142857142855`}, {0.28000000000000025`, 0.42857142857142855`}, {
       0.29000000000000004`, 0.42857142857142855`}, {0.2999999999999998, 
       0.42857142857142855`}, {0.3100000000000005, 0.42857142857142855`}, {
       0.3200000000000003, 0.42857142857142855`}, {0.33000000000000007`, 
       0.42857142857142855`}, {0.33999999999999986`, 0.42857142857142855`}, {
       0.35000000000000053`, 0.42857142857142855`}, {0.3600000000000003, 
       0.42857142857142855`}, {0.3700000000000001, 0.42857142857142855`}, {
       0.3799999999999999, 0.42857142857142855`}, {0.3899999999999997, 
       0.42857142857142855`}, {0.40000000000000036`, 0.42857142857142855`}, {
       0.41000000000000014`, 0.42857142857142855`}, {0.41999999999999993`, 
       0.42857142857142855`}, {0.4299999999999997, 0.42857142857142855`}, {
       0.4400000000000004, 0.42857142857142855`}, {0.4500000000000002, 
       0.42857142857142855`}, {0.45999999999999996`, 0.42857142857142855`}, {
       0.46999999999999975`, 0.42857142857142855`}, {0.4800000000000004, 
       0.42857142857142855`}, {0.4900000000000002, 0.42857142857142855`}, {
       0.5, 0.42857142857142855`}, {0.5099999999999998, 
       0.42857142857142855`}, {0.5200000000000005, 0.42857142857142855`}, {
       0.5300000000000002, 0.42857142857142855`}, {0.54, 
       0.42857142857142855`}, {0.5499999999999998, 0.42857142857142855`}, {
       0.5600000000000005, 0.42857142857142855`}, {0.5700000000000003, 
       0.42857142857142855`}, {0.5800000000000001, 0.42857142857142855`}, {
       0.5899999999999999, 0.42857142857142855`}, {0.6000000000000005, 
       0.42857142857142855`}, {0.6100000000000003, 0.42857142857142855`}, {
       0.6200000000000001, 0.42857142857142855`}, {0.6299999999999999, 
       0.42857142857142855`}, {0.6399999999999997, 0.42857142857142855`}, {
       0.6500000000000004, 0.42857142857142855`}, {0.6600000000000001, 
       0.42857142857142855`}, {0.6699999999999999, 0.42857142857142855`}, {
       0.6799999999999997, 0.42857142857142855`}, {0.6900000000000004, 
       0.42857142857142855`}, {0.7000000000000002, 0.42857142857142855`}, {
       0.71, 0.42857142857142855`}, {0.7199999999999998, 
       0.42857142857142855`}, {0.7300000000000004, 0.42857142857142855`}, {
       0.7400000000000002, 0.42857142857142855`}, {0.75, 
       0.42857142857142855`}, {0.7599999999999998, 0.42857142857142855`}, {
       0.7700000000000005, 0.42857142857142855`}, {0.7800000000000002, 
       0.42857142857142855`}, {0.79, 0.42857142857142855`}, {
       0.7999999999999998, 0.42857142857142855`}, {0.8100000000000005, 
       0.42857142857142855`}, {0.8200000000000003, 0.42857142857142855`}, {
       0.8300000000000001, 0.42857142857142855`}, {0.8399999999999999, 
       0.42857142857142855`}, {0.8500000000000005, 0.42857142857142855`}, {
       0.8600000000000003, 0.42857142857142855`}, {0.8700000000000001, 
       0.42857142857142855`}, {0.8799999999999999, 0.42857142857142855`}, {
       0.8899999999999997, 0.42857142857142855`}, {0.9000000000000004, 
       0.42857142857142855`}, {0.9100000000000001, 0.42857142857142855`}, {
       0.9199999999999999, 0.42857142857142855`}, {0.9299999999999997, 
       0.42857142857142855`}, {0.9400000000000004, 0.42857142857142855`}, {
       0.9500000000000002, 0.42857142857142855`}, {0.96, 
       0.42857142857142855`}, {0.9699999999999998, 0.42857142857142855`}, {
       0.9800000000000004, 0.42857142857142855`}, {0.9900000000000002, 
       0.42857142857142855`}, {1., 0.7142857142857143}, {1.0099999999999998`, 
       0.7142857142857143}, {1.0200000000000005`, 0.7142857142857143}, {
       1.0300000000000002`, 0.7142857142857143}, {1.04, 0.7142857142857143}, {
       1.0499999999999998`, 0.7142857142857143}, {1.0600000000000005`, 
       0.7142857142857143}, {1.0700000000000003`, 0.7142857142857143}, {1.08, 
       0.7142857142857143}, {1.0899999999999999`, 0.7142857142857143}, {
       1.1000000000000005`, 0.7142857142857143}, {1.1100000000000003`, 
       0.7142857142857143}, {1.12, 0.7142857142857143}, {1.13, 
       0.7142857142857143}, {1.1399999999999997`, 0.7142857142857143}, {
       1.1500000000000004`, 0.7142857142857143}, {1.1600000000000001`, 
       0.7142857142857143}, {1.17, 0.7142857142857143}, {1.1799999999999997`, 
       0.7142857142857143}, {1.1900000000000004`, 0.7142857142857143}, {
       1.2000000000000002`, 0.7142857142857143}, {1.21, 0.7142857142857143}, {
       1.2199999999999998`, 0.7142857142857143}, {1.2300000000000004`, 
       0.7142857142857143}, {1.2400000000000002`, 0.7142857142857143}, {1.25, 
       0.7142857142857143}, {1.2599999999999998`, 0.7142857142857143}, {
       1.2700000000000005`, 0.7142857142857143}, {1.2800000000000002`, 
       0.7142857142857143}, {1.29, 0.7142857142857143}, {1.2999999999999998`, 
       0.7142857142857143}, {1.3100000000000005`, 0.7142857142857143}, {
       1.3200000000000003`, 0.7142857142857143}, {1.33, 0.7142857142857143}, {
       1.3399999999999999`, 0.7142857142857143}, {1.3500000000000005`, 
       0.7142857142857143}, {1.3600000000000003`, 0.7142857142857143}, {1.37, 
       0.7142857142857143}, {1.38, 0.7142857142857143}, {1.3899999999999997`, 
       0.7142857142857143}, {1.4000000000000004`, 0.7142857142857143}, {
       1.4100000000000001`, 0.7142857142857143}, {1.42, 0.7142857142857143}, {
       1.4299999999999997`, 0.7142857142857143}, {1.4400000000000004`, 
       0.7142857142857143}, {1.4500000000000002`, 0.7142857142857143}, {1.46, 
       0.7142857142857143}, {1.4699999999999998`, 0.7142857142857143}, {
       1.4800000000000004`, 0.7142857142857143}, {1.4900000000000002`, 
       0.7142857142857143}, {1.5, 0.7142857142857143}, {1.5099999999999998`, 
       0.7142857142857143}, {1.5200000000000005`, 0.7142857142857143}, {
       1.5300000000000002`, 0.7142857142857143}, {1.54, 0.7142857142857143}, {
       1.5499999999999998`, 0.7142857142857143}, {1.5600000000000005`, 
       0.7142857142857143}, {1.5700000000000003`, 0.7142857142857143}, {1.58, 
       0.7142857142857143}, {1.5899999999999999`, 0.7142857142857143}, {
       1.6000000000000005`, 0.7142857142857143}, {1.6100000000000003`, 
       0.7142857142857143}, {1.62, 0.7142857142857143}, {1.63, 
       0.7142857142857143}, {1.6399999999999997`, 0.7142857142857143}, {
       1.6500000000000004`, 0.7142857142857143}, {1.6600000000000001`, 
       0.7142857142857143}, {1.67, 0.7142857142857143}, {1.6799999999999997`, 
       0.7142857142857143}, {1.6900000000000004`, 0.7142857142857143}, {
       1.7000000000000002`, 0.7142857142857143}, {1.71, 0.7142857142857143}, {
       1.7199999999999998`, 0.7142857142857143}, {1.7300000000000004`, 
       0.7142857142857143}, {1.7400000000000002`, 0.7142857142857143}, {1.75, 
       0.7142857142857143}, {1.7599999999999998`, 0.7142857142857143}, {
       1.7700000000000005`, 0.7142857142857143}, {1.7800000000000002`, 
       0.7142857142857143}, {1.79, 0.7142857142857143}, {1.7999999999999998`, 
       0.7142857142857143}, {1.8100000000000005`, 0.7142857142857143}, {
       1.8200000000000003`, 0.7142857142857143}, {1.83, 0.7142857142857143}, {
       1.8399999999999999`, 0.7142857142857143}, {1.8500000000000005`, 
       0.7142857142857143}, {1.8600000000000003`, 0.7142857142857143}, {1.87, 
       0.7142857142857143}, {1.88, 0.7142857142857143}, {1.8899999999999997`, 
       0.7142857142857143}, {1.9000000000000004`, 0.7142857142857143}, {
       1.9100000000000001`, 0.7142857142857143}, {1.92, 0.7142857142857143}, {
       1.9299999999999997`, 0.7142857142857143}, {1.9400000000000004`, 
       0.7142857142857143}, {1.9500000000000002`, 0.7142857142857143}, {1.96, 
       0.7142857142857143}, {1.9699999999999998`, 0.7142857142857143}, {
       1.9800000000000004`, 0.7142857142857143}, {1.9900000000000002`, 
       0.7142857142857143}, {2., 0.7142857142857143}, {2.01, 
       0.7142857142857143}, {2.0200000000000005`, 0.7142857142857143}, {
       2.0300000000000002`, 0.7142857142857143}, {2.04, 0.7142857142857143}, {
       2.05, 0.7142857142857143}, {2.0600000000000005`, 0.7142857142857143}, {
       2.0700000000000003`, 0.7142857142857143}, {2.08, 0.7142857142857143}, {
       2.09, 0.7142857142857143}, {2.1000000000000005`, 0.7142857142857143}, {
       2.1100000000000003`, 0.7142857142857143}, {2.12, 0.7142857142857143}, {
       2.13, 0.7142857142857143}, {2.1400000000000006`, 0.7142857142857143}, {
       2.1500000000000004`, 0.7142857142857143}, {2.16, 0.7142857142857143}, {
       2.17, 0.7142857142857143}, {2.1799999999999997`, 0.7142857142857143}, {
       2.1900000000000004`, 0.7142857142857143}, {2.2, 0.7142857142857143}, {
       2.21, 0.7142857142857143}, {2.2199999999999998`, 0.7142857142857143}, {
       2.2300000000000004`, 0.7142857142857143}, {2.24, 0.7142857142857143}, {
       2.25, 0.7142857142857143}, {2.26, 0.7142857142857143}, {
       2.2700000000000005`, 0.7142857142857143}, {2.2800000000000002`, 
       0.7142857142857143}, {2.29, 0.7142857142857143}, {2.3, 
       0.7142857142857143}, {2.3100000000000005`, 0.7142857142857143}, {
       2.3200000000000003`, 0.7142857142857143}, {2.33, 0.7142857142857143}, {
       2.34, 0.7142857142857143}, {2.3500000000000005`, 0.7142857142857143}, {
       2.3600000000000003`, 0.7142857142857143}, {2.37, 0.7142857142857143}, {
       2.38, 0.7142857142857143}, {2.3900000000000006`, 0.7142857142857143}, {
       2.4000000000000004`, 0.7142857142857143}, {2.41, 0.7142857142857143}, {
       2.42, 0.7142857142857143}, {2.4299999999999997`, 0.7142857142857143}, {
       2.4400000000000004`, 0.7142857142857143}, {2.45, 0.7142857142857143}, {
       2.46, 0.7142857142857143}, {2.4699999999999998`, 0.7142857142857143}, {
       2.4800000000000004`, 0.7142857142857143}, {2.49, 0.7142857142857143}, {
       2.5, 0.7142857142857143}, {2.51, 0.7142857142857143}, {
       2.5200000000000005`, 0.7142857142857143}, {2.5300000000000002`, 
       0.7142857142857143}, {2.54, 0.7142857142857143}, {2.55, 
       0.7142857142857143}, {2.5600000000000005`, 0.7142857142857143}, {
       2.5700000000000003`, 0.7142857142857143}, {2.58, 0.7142857142857143}, {
       2.59, 0.7142857142857143}, {2.6000000000000005`, 0.7142857142857143}, {
       2.6100000000000003`, 0.7142857142857143}, {2.62, 0.7142857142857143}, {
       2.63, 0.7142857142857143}, {2.6400000000000006`, 0.7142857142857143}, {
       2.6500000000000004`, 0.7142857142857143}, {2.66, 0.7142857142857143}, {
       2.67, 0.7142857142857143}, {2.6799999999999997`, 0.7142857142857143}, {
       2.6900000000000004`, 0.7142857142857143}, {2.7, 0.7142857142857143}, {
       2.71, 0.7142857142857143}, {2.7199999999999998`, 0.7142857142857143}, {
       2.7300000000000004`, 0.7142857142857143}, {2.74, 0.7142857142857143}, {
       2.75, 0.7142857142857143}, {2.76, 0.7142857142857143}, {
       2.7700000000000005`, 0.7142857142857143}, {2.7800000000000002`, 
       0.7142857142857143}, {2.79, 0.7142857142857143}, {2.8, 
       0.7142857142857143}, {2.8100000000000005`, 0.7142857142857143}, {
       2.8200000000000003`, 0.7142857142857143}, {2.83, 0.7142857142857143}, {
       2.84, 0.7142857142857143}, {2.8500000000000005`, 0.7142857142857143}, {
       2.8600000000000003`, 0.7142857142857143}, {2.87, 0.7142857142857143}, {
       2.88, 0.7142857142857143}, {2.8900000000000006`, 0.7142857142857143}, {
       2.9000000000000004`, 0.7142857142857143}, {2.91, 0.7142857142857143}, {
       2.92, 0.7142857142857143}, {2.9299999999999997`, 0.7142857142857143}, {
       2.9400000000000004`, 0.7142857142857143}, {2.95, 0.7142857142857143}, {
       2.96, 0.7142857142857143}, {2.9699999999999998`, 0.7142857142857143}, {
       2.9800000000000004`, 0.7142857142857143}, {2.99, 0.7142857142857143}, {
       3., 0.8571428571428571}, {3.01, 0.8571428571428571}, {
       3.0200000000000005`, 0.8571428571428571}, {3.0300000000000002`, 
       0.8571428571428571}, {3.04, 0.8571428571428571}, {3.05, 
       0.8571428571428571}, {3.0600000000000005`, 0.8571428571428571}, {
       3.0700000000000003`, 0.8571428571428571}, {3.08, 0.8571428571428571}, {
       3.09, 0.8571428571428571}, {3.1000000000000005`, 0.8571428571428571}, {
       3.1100000000000003`, 0.8571428571428571}, {3.12, 0.8571428571428571}, {
       3.13, 0.8571428571428571}, {3.1400000000000006`, 0.8571428571428571}, {
       3.1500000000000004`, 0.8571428571428571}, {3.16, 0.8571428571428571}, {
       3.17, 0.8571428571428571}, {3.1799999999999997`, 0.8571428571428571}, {
       3.1900000000000004`, 0.8571428571428571}, {3.2, 0.8571428571428571}, {
       3.21, 0.8571428571428571}, {3.2199999999999998`, 0.8571428571428571}, {
       3.2300000000000004`, 0.8571428571428571}, {3.24, 0.8571428571428571}, {
       3.25, 0.8571428571428571}, {3.26, 0.8571428571428571}, {
       3.2700000000000005`, 0.8571428571428571}, {3.2800000000000002`, 
       0.8571428571428571}, {3.29, 0.8571428571428571}, {3.3, 
       0.8571428571428571}, {3.3100000000000005`, 0.8571428571428571}, {
       3.3200000000000003`, 0.8571428571428571}, {3.33, 0.8571428571428571}, {
       3.34, 0.8571428571428571}, {3.3500000000000005`, 0.8571428571428571}, {
       3.3600000000000003`, 0.8571428571428571}, {3.37, 0.8571428571428571}, {
       3.38, 0.8571428571428571}, {3.3900000000000006`, 0.8571428571428571}, {
       3.4000000000000004`, 0.8571428571428571}, {3.41, 0.8571428571428571}, {
       3.42, 0.8571428571428571}, {3.4299999999999997`, 0.8571428571428571}, {
       3.4400000000000004`, 0.8571428571428571}, {3.45, 0.8571428571428571}, {
       3.46, 0.8571428571428571}, {3.4699999999999998`, 0.8571428571428571}, {
       3.4800000000000004`, 0.8571428571428571}, {3.49, 0.8571428571428571}, {
       3.5, 0.8571428571428571}, {3.51, 0.8571428571428571}, {
       3.5200000000000005`, 0.8571428571428571}, {3.5300000000000002`, 
       0.8571428571428571}, {3.54, 0.8571428571428571}, {3.55, 
       0.8571428571428571}, {3.5600000000000005`, 0.8571428571428571}, {
       3.5700000000000003`, 0.8571428571428571}, {3.58, 0.8571428571428571}, {
       3.59, 0.8571428571428571}, {3.6000000000000005`, 0.8571428571428571}, {
       3.6100000000000003`, 0.8571428571428571}, {3.62, 0.8571428571428571}, {
       3.63, 0.8571428571428571}, {3.6400000000000006`, 0.8571428571428571}, {
       3.6500000000000004`, 0.8571428571428571}, {3.66, 0.8571428571428571}, {
       3.67, 0.8571428571428571}, {3.6799999999999997`, 0.8571428571428571}, {
       3.6900000000000004`, 0.8571428571428571}, {3.7, 0.8571428571428571}, {
       3.71, 0.8571428571428571}, {3.7199999999999998`, 0.8571428571428571}, {
       3.7300000000000004`, 0.8571428571428571}, {3.74, 0.8571428571428571}, {
       3.75, 0.8571428571428571}, {3.76, 0.8571428571428571}, {
       3.7700000000000005`, 0.8571428571428571}, {3.7800000000000002`, 
       0.8571428571428571}, {3.79, 0.8571428571428571}, {3.8, 
       0.8571428571428571}, {3.8100000000000005`, 0.8571428571428571}, {
       3.8200000000000003`, 0.8571428571428571}, {3.83, 0.8571428571428571}, {
       3.84, 0.8571428571428571}, {3.8500000000000005`, 0.8571428571428571}, {
       3.8600000000000003`, 0.8571428571428571}, {3.87, 0.8571428571428571}, {
       3.88, 0.8571428571428571}, {3.8900000000000006`, 0.8571428571428571}, {
       3.9000000000000004`, 0.8571428571428571}, {3.91, 0.8571428571428571}, {
       3.92, 0.8571428571428571}, {3.9300000000000006`, 0.8571428571428571}, {
       3.9400000000000004`, 0.8571428571428571}, {3.95, 0.8571428571428571}, {
       3.96, 0.8571428571428571}, {3.9699999999999998`, 0.8571428571428571}, {
       3.9800000000000004`, 0.8571428571428571}, {3.99, 0.8571428571428571}, {
       4., 0.8571428571428571}, {4., 0}, {3.99, 0}, {
       3.9800000000000004`, 0}, {3.9699999999999998`, 0}, {3.96, 0}, {
       3.95, 0}, {3.9400000000000004`, 0}, {3.9300000000000006`, 0}, {
       3.92, 0}, {3.91, 0}, {3.9000000000000004`, 0}, {
       3.8900000000000006`, 0}, {3.88, 0}, {3.87, 0}, {
       3.8600000000000003`, 0}, {3.8500000000000005`, 0}, {3.84, 0}, {
       3.83, 0}, {3.8200000000000003`, 0}, {3.8100000000000005`, 0}, {
       3.8, 0}, {3.79, 0}, {3.7800000000000002`, 0}, {
       3.7700000000000005`, 0}, {3.76, 0}, {3.75, 0}, {3.74, 0}, {
       3.7300000000000004`, 0}, {3.7199999999999998`, 0}, {3.71, 0}, {
       3.7, 0}, {3.6900000000000004`, 0}, {3.6799999999999997`, 0}, {
       3.67, 0}, {3.66, 0}, {3.6500000000000004`, 0}, {
       3.6400000000000006`, 0}, {3.63, 0}, {3.62, 0}, {
       3.6100000000000003`, 0}, {3.6000000000000005`, 0}, {3.59, 0}, {
       3.58, 0}, {3.5700000000000003`, 0}, {3.5600000000000005`, 0}, {
       3.55, 0}, {3.54, 0}, {3.5300000000000002`, 0}, {
       3.5200000000000005`, 0}, {3.51, 0}, {3.5, 0}, {3.49, 0}, {
       3.4800000000000004`, 0}, {3.4699999999999998`, 0}, {3.46, 0}, {
       3.45, 0}, {3.4400000000000004`, 0}, {3.4299999999999997`, 0}, {
       3.42, 0}, {3.41, 0}, {3.4000000000000004`, 0}, {
       3.3900000000000006`, 0}, {3.38, 0}, {3.37, 0}, {
       3.3600000000000003`, 0}, {3.3500000000000005`, 0}, {3.34, 0}, {
       3.33, 0}, {3.3200000000000003`, 0}, {3.3100000000000005`, 0}, {
       3.3, 0}, {3.29, 0}, {3.2800000000000002`, 0}, {
       3.2700000000000005`, 0}, {3.26, 0}, {3.25, 0}, {3.24, 0}, {
       3.2300000000000004`, 0}, {3.2199999999999998`, 0}, {3.21, 0}, {
       3.2, 0}, {3.1900000000000004`, 0}, {3.1799999999999997`, 0}, {
       3.17, 0}, {3.16, 0}, {3.1500000000000004`, 0}, {
       3.1400000000000006`, 0}, {3.13, 0}, {3.12, 0}, {
       3.1100000000000003`, 0}, {3.1000000000000005`, 0}, {3.09, 0}, {
       3.08, 0}, {3.0700000000000003`, 0}, {3.0600000000000005`, 0}, {
       3.05, 0}, {3.04, 0}, {3.0300000000000002`, 0}, {
       3.0200000000000005`, 0}, {3.01, 0}, {3., 0}, {2.99, 0}, {
       2.9800000000000004`, 0}, {2.9699999999999998`, 0}, {2.96, 0}, {
       2.95, 0}, {2.9400000000000004`, 0}, {2.9299999999999997`, 0}, {
       2.92, 0}, {2.91, 0}, {2.9000000000000004`, 0}, {
       2.8900000000000006`, 0}, {2.88, 0}, {2.87, 0}, {
       2.8600000000000003`, 0}, {2.8500000000000005`, 0}, {2.84, 0}, {
       2.83, 0}, {2.8200000000000003`, 0}, {2.8100000000000005`, 0}, {
       2.8, 0}, {2.79, 0}, {2.7800000000000002`, 0}, {
       2.7700000000000005`, 0}, {2.76, 0}, {2.75, 0}, {2.74, 0}, {
       2.7300000000000004`, 0}, {2.7199999999999998`, 0}, {2.71, 0}, {
       2.7, 0}, {2.6900000000000004`, 0}, {2.6799999999999997`, 0}, {
       2.67, 0}, {2.66, 0}, {2.6500000000000004`, 0}, {
       2.6400000000000006`, 0}, {2.63, 0}, {2.62, 0}, {
       2.6100000000000003`, 0}, {2.6000000000000005`, 0}, {2.59, 0}, {
       2.58, 0}, {2.5700000000000003`, 0}, {2.5600000000000005`, 0}, {
       2.55, 0}, {2.54, 0}, {2.5300000000000002`, 0}, {
       2.5200000000000005`, 0}, {2.51, 0}, {2.5, 0}, {2.49, 0}, {
       2.4800000000000004`, 0}, {2.4699999999999998`, 0}, {2.46, 0}, {
       2.45, 0}, {2.4400000000000004`, 0}, {2.4299999999999997`, 0}, {
       2.42, 0}, {2.41, 0}, {2.4000000000000004`, 0}, {
       2.3900000000000006`, 0}, {2.38, 0}, {2.37, 0}, {
       2.3600000000000003`, 0}, {2.3500000000000005`, 0}, {2.34, 0}, {
       2.33, 0}, {2.3200000000000003`, 0}, {2.3100000000000005`, 0}, {
       2.3, 0}, {2.29, 0}, {2.2800000000000002`, 0}, {
       2.2700000000000005`, 0}, {2.26, 0}, {2.25, 0}, {2.24, 0}, {
       2.2300000000000004`, 0}, {2.2199999999999998`, 0}, {2.21, 0}, {
       2.2, 0}, {2.1900000000000004`, 0}, {2.1799999999999997`, 0}, {
       2.17, 0}, {2.16, 0}, {2.1500000000000004`, 0}, {
       2.1400000000000006`, 0}, {2.13, 0}, {2.12, 0}, {
       2.1100000000000003`, 0}, {2.1000000000000005`, 0}, {2.09, 0}, {
       2.08, 0}, {2.0700000000000003`, 0}, {2.0600000000000005`, 0}, {
       2.05, 0}, {2.04, 0}, {2.0300000000000002`, 0}, {
       2.0200000000000005`, 0}, {2.01, 0}, {2., 0}, {
       1.9900000000000002`, 0}, {1.9800000000000004`, 0}, {
       1.9699999999999998`, 0}, {1.96, 0}, {1.9500000000000002`, 0}, {
       1.9400000000000004`, 0}, {1.9299999999999997`, 0}, {1.92, 0}, {
       1.9100000000000001`, 0}, {1.9000000000000004`, 0}, {
       1.8899999999999997`, 0}, {1.88, 0}, {1.87, 0}, {
       1.8600000000000003`, 0}, {1.8500000000000005`, 0}, {
       1.8399999999999999`, 0}, {1.83, 0}, {1.8200000000000003`, 0}, {
       1.8100000000000005`, 0}, {1.7999999999999998`, 0}, {1.79, 0}, {
       1.7800000000000002`, 0}, {1.7700000000000005`, 0}, {
       1.7599999999999998`, 0}, {1.75, 0}, {1.7400000000000002`, 0}, {
       1.7300000000000004`, 0}, {1.7199999999999998`, 0}, {1.71, 0}, {
       1.7000000000000002`, 0}, {1.6900000000000004`, 0}, {
       1.6799999999999997`, 0}, {1.67, 0}, {1.6600000000000001`, 0}, {
       1.6500000000000004`, 0}, {1.6399999999999997`, 0}, {1.63, 0}, {
       1.62, 0}, {1.6100000000000003`, 0}, {1.6000000000000005`, 0}, {
       1.5899999999999999`, 0}, {1.58, 0}, {1.5700000000000003`, 0}, {
       1.5600000000000005`, 0}, {1.5499999999999998`, 0}, {1.54, 0}, {
       1.5300000000000002`, 0}, {1.5200000000000005`, 0}, {
       1.5099999999999998`, 0}, {1.5, 0}, {1.4900000000000002`, 0}, {
       1.4800000000000004`, 0}, {1.4699999999999998`, 0}, {1.46, 0}, {
       1.4500000000000002`, 0}, {1.4400000000000004`, 0}, {
       1.4299999999999997`, 0}, {1.42, 0}, {1.4100000000000001`, 0}, {
       1.4000000000000004`, 0}, {1.3899999999999997`, 0}, {1.38, 0}, {
       1.37, 0}, {1.3600000000000003`, 0}, {1.3500000000000005`, 0}, {
       1.3399999999999999`, 0}, {1.33, 0}, {1.3200000000000003`, 0}, {
       1.3100000000000005`, 0}, {1.2999999999999998`, 0}, {1.29, 0}, {
       1.2800000000000002`, 0}, {1.2700000000000005`, 0}, {
       1.2599999999999998`, 0}, {1.25, 0}, {1.2400000000000002`, 0}, {
       1.2300000000000004`, 0}, {1.2199999999999998`, 0}, {1.21, 0}, {
       1.2000000000000002`, 0}, {1.1900000000000004`, 0}, {
       1.1799999999999997`, 0}, {1.17, 0}, {1.1600000000000001`, 0}, {
       1.1500000000000004`, 0}, {1.1399999999999997`, 0}, {1.13, 0}, {
       1.12, 0}, {1.1100000000000003`, 0}, {1.1000000000000005`, 0}, {
       1.0899999999999999`, 0}, {1.08, 0}, {1.0700000000000003`, 0}, {
       1.0600000000000005`, 0}, {1.0499999999999998`, 0}, {1.04, 0}, {
       1.0300000000000002`, 0}, {1.0200000000000005`, 0}, {
       1.0099999999999998`, 0}, {1., 0}, {0.9900000000000002, 0}, {
       0.9800000000000004, 0}, {0.9699999999999998, 0}, {0.96, 0}, {
       0.9500000000000002, 0}, {0.9400000000000004, 0}, {
       0.9299999999999997, 0}, {0.9199999999999999, 0}, {
       0.9100000000000001, 0}, {0.9000000000000004, 0}, {
       0.8899999999999997, 0}, {0.8799999999999999, 0}, {
       0.8700000000000001, 0}, {0.8600000000000003, 0}, {
       0.8500000000000005, 0}, {0.8399999999999999, 0}, {
       0.8300000000000001, 0}, {0.8200000000000003, 0}, {
       0.8100000000000005, 0}, {0.7999999999999998, 0}, {0.79, 0}, {
       0.7800000000000002, 0}, {0.7700000000000005, 0}, {
       0.7599999999999998, 0}, {0.75, 0}, {0.7400000000000002, 0}, {
       0.7300000000000004, 0}, {0.7199999999999998, 0}, {0.71, 0}, {
       0.7000000000000002, 0}, {0.6900000000000004, 0}, {
       0.6799999999999997, 0}, {0.6699999999999999, 0}, {
       0.6600000000000001, 0}, {0.6500000000000004, 0}, {
       0.6399999999999997, 0}, {0.6299999999999999, 0}, {
       0.6200000000000001, 0}, {0.6100000000000003, 0}, {
       0.6000000000000005, 0}, {0.5899999999999999, 0}, {
       0.5800000000000001, 0}, {0.5700000000000003, 0}, {
       0.5600000000000005, 0}, {0.5499999999999998, 0}, {0.54, 0}, {
       0.5300000000000002, 0}, {0.5200000000000005, 0}, {
       0.5099999999999998, 0}, {0.5, 0}, {0.4900000000000002, 0}, {
       0.4800000000000004, 0}, {0.46999999999999975`, 0}, {
       0.45999999999999996`, 0}, {0.4500000000000002, 0}, {
       0.4400000000000004, 0}, {0.4299999999999997, 0}, {
       0.41999999999999993`, 0}, {0.41000000000000014`, 0}, {
       0.40000000000000036`, 0}, {0.3899999999999997, 0}, {
       0.3799999999999999, 0}, {0.3700000000000001, 0}, {
       0.3600000000000003, 0}, {0.35000000000000053`, 0}, {
       0.33999999999999986`, 0}, {0.33000000000000007`, 0}, {
       0.3200000000000003, 0}, {0.3100000000000005, 0}, {
       0.2999999999999998, 0}, {0.29000000000000004`, 0}, {
       0.28000000000000025`, 0}, {0.27000000000000046`, 0}, {
       0.2599999999999998, 0}, {0.25, 0}, {0.2400000000000002, 0}, {
       0.23000000000000043`, 0}, {0.21999999999999975`, 0}, {
       0.20999999999999996`, 0}, {0.20000000000000018`, 0}, {
       0.1900000000000004, 0}, {0.17999999999999972`, 0}, {
       0.16999999999999993`, 0}, {0.16000000000000014`, 0}, {
       0.15000000000000036`, 0}, {0.13999999999999968`, 0}, {
       0.1299999999999999, 0}, {0.1200000000000001, 0}, {
       0.11000000000000032`, 0}, {0.09999999999999964, 0}, {
       0.08999999999999986, 0}, {0.08000000000000007, 0}, {
       0.07000000000000028, 0}, {0.0600000000000005, 0}, {
       0.04999999999999982, 0}, {0.040000000000000036`, 0}, {
       0.03000000000000025, 0}, {0.020000000000000462`, 0}, {
       0.009999999999999787, 0}, {
       0., 0}, {-0.009999999999999787, 0}, {-0.020000000000000018`, 
        0}, {-0.029999999999999805`, 0}, {-0.040000000000000036`, 
        0}, {-0.04999999999999982, 0}, {-0.06000000000000005, 
        0}, {-0.06999999999999984, 0}, {-0.08000000000000007, 
        0}, {-0.08999999999999986, 0}, {-0.10000000000000009`, 
        0}, {-0.10999999999999988`, 0}, {-0.1200000000000001, 
        0}, {-0.1299999999999999, 0}, {-0.14000000000000012`, 
        0}, {-0.1499999999999999, 0}, {-0.16000000000000014`, 
        0}, {-0.16999999999999993`, 0}, {-0.17999999999999972`, 
        0}, {-0.18999999999999995`, 0}, {-0.19999999999999973`, 
        0}, {-0.20999999999999996`, 0}, {-0.21999999999999975`, 
        0}, {-0.22999999999999998`, 0}, {-0.23999999999999977`, 0}, {-0.25, 
        0}, {-0.2599999999999998, 0}, {-0.27, 0}, {-0.2799999999999998, 
        0}, {-0.29000000000000004`, 0}, {-0.2999999999999998, 
        0}, {-0.31000000000000005`, 0}, {-0.31999999999999984`, 
        0}, {-0.33000000000000007`, 0}, {-0.33999999999999986`, 
        0}, {-0.3500000000000001, 0}, {-0.3599999999999999, 
        0}, {-0.3700000000000001, 0}, {-0.3799999999999999, 
        0}, {-0.3900000000000001, 0}, {-0.3999999999999999, 
        0}, {-0.41000000000000014`, 0}, {-0.41999999999999993`, 
        0}, {-0.4299999999999997, 0}, {-0.43999999999999995`, 
        0}, {-0.44999999999999973`, 0}, {-0.45999999999999996`, 
        0}, {-0.46999999999999975`, 0}, {-0.48, 0}, {-0.48999999999999977`, 
        0}, {-0.5, 0}, {-0.5099999999999998, 0}, {-0.52, 
        0}, {-0.5299999999999998, 0}, {-0.54, 0}, {-0.5499999999999998, 
        0}, {-0.56, 0}, {-0.5699999999999998, 0}, {-0.5800000000000001, 
        0}, {-0.5899999999999999, 0}, {-0.6000000000000001, 
        0}, {-0.6099999999999999, 0}, {-0.6200000000000001, 
        0}, {-0.6299999999999999, 0}, {-0.6400000000000001, 
        0}, {-0.6499999999999999, 0}, {-0.6600000000000001, 
        0}, {-0.6699999999999999, 0}, {-0.6799999999999997, 0}, {-0.69, 
        0}, {-0.6999999999999997, 0}, {-0.71, 0}, {-0.7199999999999998, 
        0}, {-0.73, 0}, {-0.7399999999999998, 0}, {-0.75, 
        0}, {-0.7599999999999998, 0}, {-0.77, 0}, {-0.7799999999999998, 
        0}, {-0.79, 0}, {-0.7999999999999998, 0}, {-0.81, 
        0}, {-0.8199999999999998, 0}, {-0.8300000000000001, 
        0}, {-0.8399999999999999, 0}, {-0.8500000000000001, 
        0}, {-0.8599999999999999, 0}, {-0.8700000000000001, 
        0}, {-0.8799999999999999, 0}, {-0.8900000000000001, 
        0}, {-0.8999999999999999, 0}, {-0.9100000000000001, 
        0}, {-0.9199999999999999, 0}, {-0.9299999999999997, 0}, {-0.94, 
        0}, {-0.9499999999999997, 0}, {-0.96, 0}, {-0.9699999999999998, 
        0}, {-0.98, 0}, {-0.9899999999999998, 0}, {-1., 
        0}, {-1.0099999999999998`, 0}, {-1.02, 0}, {-1.0299999999999998`, 
        0}, {-1.04, 0}, {-1.0499999999999998`, 0}, {-1.06, 
        0}, {-1.0699999999999998`, 0}, {-1.08, 0}, {-1.0899999999999999`, 
        0}, {-1.1, 0}, {-1.1099999999999999`, 0}, {-1.12, 0}, {-1.13, 
        0}, {-1.1400000000000001`, 0}, {-1.15, 0}, {-1.1600000000000001`, 
        0}, {-1.17, 0}, {-1.1800000000000002`, 0}, {-1.19, 
        0}, {-1.1999999999999997`, 0}, {-1.21, 0}, {-1.2199999999999998`, 
        0}, {-1.23, 0}, {-1.2399999999999998`, 0}, {-1.25, 
        0}, {-1.2599999999999998`, 0}, {-1.27, 0}, {-1.2799999999999998`, 
        0}, {-1.29, 0}, {-1.2999999999999998`, 0}, {-1.31, 
        0}, {-1.3199999999999998`, 0}, {-1.33, 0}, {-1.3399999999999999`, 
        0}, {-1.35, 0}, {-1.3599999999999999`, 0}, {-1.37, 0}, {-1.38, 
        0}, {-1.3900000000000001`, 0}, {-1.4, 0}, {-1.4100000000000001`, 
        0}, {-1.42, 0}, {-1.4300000000000002`, 0}, {-1.44, 
        0}, {-1.4499999999999997`, 0}, {-1.46, 0}, {-1.4699999999999998`, 
        0}, {-1.48, 0}, {-1.4899999999999998`, 0}, {-1.5, 
        0}, {-1.5099999999999998`, 0}, {-1.52, 0}, {-1.5299999999999998`, 
        0}, {-1.54, 0}, {-1.5499999999999998`, 0}, {-1.56, 
        0}, {-1.5699999999999998`, 0}, {-1.58, 0}, {-1.5899999999999999`, 
        0}, {-1.6, 0}, {-1.6099999999999999`, 0}, {-1.62, 0}, {-1.63, 
        0}, {-1.6400000000000001`, 0}, {-1.65, 0}, {-1.6600000000000001`, 
        0}, {-1.67, 0}, {-1.6800000000000002`, 0}, {-1.69, 
        0}, {-1.6999999999999997`, 0}, {-1.71, 0}, {-1.7199999999999998`, 
        0}, {-1.73, 0}, {-1.7399999999999998`, 0}, {-1.75, 
        0}, {-1.7599999999999998`, 0}, {-1.77, 0}, {-1.7799999999999998`, 
        0}, {-1.79, 0}, {-1.7999999999999998`, 0}, {-1.81, 
        0}, {-1.8199999999999998`, 0}, {-1.83, 0}, {-1.8399999999999999`, 
        0}, {-1.85, 0}, {-1.8599999999999999`, 0}, {-1.87, 0}, {-1.88, 
        0}, {-1.8900000000000001`, 0}, {-1.9, 0}, {-1.9100000000000001`, 
        0}, {-1.92, 0}, {-1.9300000000000002`, 0}, {-1.94, 
        0}, {-1.9500000000000002`, 0}, {-1.96, 0}, {-1.9699999999999998`, 
        0}, {-1.98, 0}, {-1.9899999999999998`, 0}, {-2., 0}, {-2.01, 
        0}, {-2.02, 0}, {-2.0300000000000002`, 0}, {-2.04, 0}, {-2.05, 
        0}, {-2.06, 0}, {-2.0700000000000003`, 0}, {-2.08, 0}, {-2.09, 
        0}, {-2.0999999999999996`, 0}, {-2.11, 0}, {-2.12, 0}, {-2.13, 
        0}, {-2.1399999999999997`, 0}, {-2.15, 0}, {-2.16, 0}, {-2.17, 
        0}, {-2.1799999999999997`, 0}, {-2.19, 0}, {-2.2, 0}, {-2.21, 
        0}, {-2.2199999999999998`, 0}, {-2.23, 0}, {-2.24, 0}, {-2.25, 
        0}, {-2.26, 0}, {-2.27, 0}, {-2.2800000000000002`, 0}, {-2.29, 
        0}, {-2.3, 0}, {-2.31, 0}, {-2.3200000000000003`, 0}, {-2.33, 
        0}, {-2.34, 0}, {-2.3499999999999996`, 0}, {-2.36, 0}, {-2.37, 
        0}, {-2.38, 0}, {-2.3899999999999997`, 0}, {-2.4, 0}, {-2.41, 
        0}, {-2.42, 0}, {-2.4299999999999997`, 0}, {-2.44, 0}, {-2.45, 
        0}, {-2.46, 0}, {-2.4699999999999998`, 0}, {-2.48, 0}, {-2.49, 
        0}, {-2.5, 0}, {-2.51, 0}, {-2.52, 0}, {-2.5300000000000002`, 
        0}, {-2.54, 0}, {-2.55, 0}, {-2.56, 0}, {-2.5700000000000003`, 
        0}, {-2.58, 0}, {-2.59, 0}, {-2.5999999999999996`, 0}, {-2.61, 
        0}, {-2.62, 0}, {-2.63, 0}, {-2.6399999999999997`, 0}, {-2.65, 
        0}, {-2.66, 0}, {-2.67, 0}, {-2.6799999999999997`, 0}, {-2.69, 
        0}, {-2.7, 0}, {-2.71, 0}, {-2.7199999999999998`, 0}, {-2.73, 
        0}, {-2.74, 0}, {-2.75, 0}, {-2.76, 0}, {-2.77, 
        0}, {-2.7800000000000002`, 0}, {-2.79, 0}, {-2.8, 0}, {-2.81, 
        0}, {-2.8200000000000003`, 0}, {-2.83, 0}, {-2.84, 
        0}, {-2.8499999999999996`, 0}, {-2.86, 0}, {-2.87, 0}, {-2.88, 
        0}, {-2.8899999999999997`, 0}, {-2.9, 0}, {-2.91, 0}, {-2.92, 
        0}, {-2.9299999999999997`, 0}, {-2.94, 0}, {-2.95, 0}, {-2.96, 
        0}, {-2.9699999999999998`, 0}, {-2.98, 0}, {-2.99, 0}, {-3., 
        0}, {-3.01, 0}, {-3.02, 0}, {-3.0300000000000002`, 0}, {-3.04, 
        0}, {-3.05, 0}, {-3.06, 0}, {-3.07, 0}, {-3.08, 0}, {-3.09, 0}, {-3.1,
         0}, {-3.11, 0}, {-3.12, 0}, {-3.13, 0}, {-3.14, 0}, {-3.15, 
        0}, {-3.16, 0}, {-3.17, 0}, {-3.1799999999999997`, 0}, {-3.19, 
        0}, {-3.2, 0}, {-3.21, 0}, {-3.2199999999999998`, 0}, {-3.23, 
        0}, {-3.24, 0}, {-3.25, 0}, {-3.26, 0}, {-3.27, 
        0}, {-3.2800000000000002`, 0}, {-3.29, 0}, {-3.3, 0}, {-3.31, 
        0}, {-3.32, 0}, {-3.33, 0}, {-3.34, 0}, {-3.35, 0}, {-3.36, 
        0}, {-3.37, 0}, {-3.38, 0}, {-3.39, 0}, {-3.4, 0}, {-3.41, 0}, {-3.42,
         0}, {-3.4299999999999997`, 0}, {-3.44, 0}, {-3.45, 0}, {-3.46, 
        0}, {-3.4699999999999998`, 0}, {-3.48, 0}, {-3.49, 0}, {-3.5, 
        0}, {-3.51, 0}, {-3.52, 0}, {-3.53, 0}, {-3.54, 0}, {-3.55, 
        0}, {-3.56, 0}, {-3.57, 0}, {-3.58, 0}, {-3.59, 0}, {-3.6, 0}, {-3.61,
         0}, {-3.62, 0}, {-3.63, 0}, {-3.64, 0}, {-3.65, 0}, {-3.66, 
        0}, {-3.67, 0}, {-3.68, 0}, {-3.69, 0}, {-3.7, 0}, {-3.71, 
        0}, {-3.7199999999999998`, 0}, {-3.73, 0}, {-3.74, 0}, {-3.75, 
        0}, {-3.76, 0}, {-3.77, 0}, {-3.78, 0}, {-3.79, 0}, {-3.8, 0}, {-3.81,
         0}, {-3.82, 0}, {-3.83, 0}, {-3.84, 0}, {-3.85, 0}, {-3.86, 
        0}, {-3.87, 0}, {-3.88, 0}, {-3.89, 0}, {-3.9, 0}, {-3.91, 0}, {-3.92,
         0}, {-3.93, 0}, {-3.94, 0}, {-3.95, 0}, {-3.96, 0}, {-3.97, 
        0}, {-3.98, 0}, {-3.99, 0}, {-4., 0}},
      VertexColors->None]}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
     0.0038500000000000006`], AbsoluteThickness[1.6], Opacity[0.2]}}, 
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.0038500000000000006`],
     AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxd20mIHGUUwPHqWrtr6c4hgicX8KCeRD14UNM39ZaIBw8egqh4EaMniR48
qHhTxIOKBCEeFCQohGhANJu4EIN73J2ZbJPMJJml957F6e998x7zHyL4JzPV
9b1fTXWXVd746NMPPh4FQVDb+OfGjX8Jg82vbUfeuOmBjT/Hdszv+uy6l+da
2qf377knP219vHvzI68dsz5w3/Te7Qes33l78mX98txkg9bPbGxt/x7rjY1t
bNH6/snm7rO+w31ZX+82aJ27HbTuTXav29R2m5u2/v7k5Mt6stpdn1m/P1nu
fmu3e69ZPz/Z3F7rJ9yX9YNug9ZuufdY3+IWbO02t91aPJrwqOBh7XbvWAWP
Ch4VPCp4VPCo4FHBo4JHBY8KHiU8SniU8CjhUcKjhEcJjxIeJTxKeJTwKOFR
wqOARwGPAh4FPAp4WLvl7ingUcCjgEcBjwIeBTxyeOTwyOGRwyOHRw6PHB45
PKzvlR2ERw6PHB45PBrwaMCjAY8GPBrwaMCjAY8GPBrwaMCjAY8GPOrwqMOj
Do86POrwqMOjDo86POrwqMOjDo86POrwyOCRwSODRwaPDB4ZPDJ4ZPDI4GHt
xnddBo8MHik8rB3HyRQeKTysX3cLTuGRwiOFRwqPFB4pPFJ4pPBI4JHAI4FH
Ao8EHgk8Engk8EjgkcAjgUcCjxgeMTxieMTwiOERwyOGRwyPGB4xPGJ4xPCI
4RHBI4JHBI8IHhE8InhE8IjgEcEjgkcEjwgeITxCeITwCOERwiOERwiPEB4h
PEJ4hPAI4RHCowaPGjxq8KjBowaPGjxq8KjBowaPGjxq8KjBI4BHAI8AHgE8
AngE8AjgEcAjgEcAjwAeATysf3PzX/9y67ytX3LztZZ5Wt/p5mct87KecfNZ
05Z5WMv6rWW91rI+a1mPtRxPq9py/FjL8WItx4e1HA/W4m8t3iva4mstntZu
uXutxcvabe5ma+GwFo8xPMbwGMPD+nbnMYbHGB4jeIzgMYLHCB4jeIzgMYTH
EB5DeAzhMYTHEB4DeAzgMYDHAB4DeAzgMYBHHx59ePTh0YdHHx59ePTg0YNH
Dx49ePTg0YNHFx5deHTh0YVHFx5deHTg0YFHBx4deHTg0YFHBx7L8FiGxzI8
luGxDI9leCzBYwkeS/BYgscSPJbgsQiPRXgswmMRHovwWITHAjwW4LEAjwV4
LMBjAR6b/dOOj9z8r2rLvK3rbr7WMs8r2o+5+VnLvKyPuPlc1pZ5WN/g1m8t
653XfsFt0FrWY/27O57mtOX4sZb3N+spN7BL2nI8WN/t/K3F+6L2W87XWjyt
O24HZ7XFy3qnG6C1eMzC4wI8LsDjAjzOw+M8PM7D4xw8zsHjHDzOwuMsPM7C
4ww8zsDjDDxm4DEDjxl4TMNjGh7T8JiCxxQ8puBh/bCb/3+Y97/a29x8/8U8
/9H+xs3vb8zL+kU3n78wjz+12279f2K9f2gP3AZ/x3qsP3bH02kcP9ZPuuPl
Nxwfv+J4sH7O+f8C75+1b3O+P8PzJ+1Z5/cjvKzfcwP8AR7WH7v5n8K8v7f9
dfM9iXl+Z/vj5vct5vWNvZ6bz9eYx1fm5dZ/Aus9rr3g1ncU6zli23P7/wX2
93P7frd/h7E/n+L1D9r63Ot9gu0fsO932/sQP/++tfv+ffj7N+31Xb8EjyD4
69BTkz+bf79D+xr389buP+jt0/avby37h+8/YO3e0D7Bzx+0v5f5YHuHtdsy
X20/f23voy3zPGo/L754/RO2PTk+sD9fa++W48teT44/ez05PrX98WuvJ8c3
9v+UvZ78fmA91jvl90tbjk9r//up7X9/bf/k9xvr/8X2V84PmIf1Hjm/aG+T
84+2Pz/Z/sr5y/ZXzm+Y3x/mI+dHzNPan19tfXL+1f5Bzs+2v3L+tv2V8zvm
b71b3h/gMYX1WH8g7z/acv629u9f2v79DX7TWP8MPGcwD+u75P1X+1V5f9b2
79/a/v1dW87/ZzE/a//5AfO09p8/tK+Vzyfa8n5k7T/faPvPP5i/tRxPF+Ax
C49ZeMzCYxYeF+FxER4X4XEJHpfgcQkec/CYg8ccPObhMQ+PeXhchsdleFyG
xxV4XIHHFXhchcdVeFyFx8KOT12e37w+0X5Irl+05fOmtb/+0fbXR9riZy3r
X9T211/a/vpM+125ftM+Idd32v76T9tfH2rL51VrmZ+1v/7U9ten2nJ8WJdy
fastn5+t/fWxtr9+1pb5W8vxZO2vz+HRgUcHHh14dODRgUcHHl14dOHRhUcX
Hl14dOHRg0cPHj149ODRg0cPHn149OHRh0cfHn149OExgMcAHgN4DOAxgMcA
HgN4DOExhMcQHkN4DOExhMcIHiN4jOAxgscIHiN4jOExhscYHmN4jOExhscK
PFbgsQKPFXiswGMFHivwWIXHKjxW4bEKj1V4rMJjDR5r8FiDxxo81uCxBo91
eKzDYx0e6/BYh8c6PIL21vVY3yr3T7T9/RVtf/9F29+faW/1s/b3d9pbPa39
/SHtU3L/SFv+e6S1v/+k7e9Ptbf6W8v8rP39r/bWeVr7+2far8j9NW1//03b
35/T9vfv2lvnb+3v/7W3eoTwCOERwiOERwiPEB4hPEJ4hPAI4RHCI4RHCI8I
HhE8InhE8IjgEcEjgkcEjwgeETwieETwiOERwyOGRwyPGB4xPGJ4xPCI4RHD
I4ZHDI8YHgk8Engk8EjgkcAjgUcCjwQeCTwSeCTwSOCRwiOFRwqPFB4pPFJ4
pPBI4ZHCI4VHCo8UHik8Mnhk8MjgkcEjg0cGjwweGTwyeGTwyOCRwaPentSh
p+Y2n8/SFg9r/3yXtn/+S9s/H6YtHtbiYe2fP9P2z6dpi4e1eFj759+0/fNx
2uJhLR7W/vk7bf98nrZ/fk9bPKz983/a/vlAbf/8oLZ4WPvnD7X984nwyOGR
wyOHRw6PHB45PHJ45PDI4ZHDI4dHDo8CHgU8CngU8CjgUcCjgEcBjwIeBTwK
eBTwKOFRwqOERwmPEh4lPEp4lPAo4VHCo4RHCY8SHhU8KnhU8KjgUcGjgkcF
jwoeFTwqeFTwqODRhEcTHk14NOHRhEcTHk14NOHRhEcTHk14NOHRhEcLHi14
tODRgof1s/L/R8CjBY8WPFrwaMGjBY8WPLZp/w/24bcn
     "]], {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->200,
  Method->{
   "MessagesHead" -> DiscretePlot, "AxisPadding" -> Scaled[0.02], 
    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "DefaultPlotStyle" -> {
      Directive[
       RGBColor[0.368417, 0.506779, 0.709798], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.880722, 0.611041, 0.142051], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.560181, 0.691569, 0.194885], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.922526, 0.385626, 0.209179], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.528488, 0.470624, 0.701351], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.772079, 0.431554, 0.102387], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.363898, 0.618501, 0.782349], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[1, 0.75, 0], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.647624, 0.37816, 0.614037], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.571589, 0.586483, 0.], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.915, 0.3325, 0.2125], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
       AbsoluteThickness[1.6]]}, "DomainPadding" -> Scaled[0.02], 
    "PointSizeFunction" -> "SmallPointSize", "RangePadding" -> Scaled[0.05]},
  PlotRange->{{-4., 4.}, {0, 0.8571428571428571}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.766841892918231*^9, {3.7668419416191387`*^9, 3.766841966263021*^9}, {
   3.766842007292324*^9, 3.766842020272943*^9}}]
}, Open  ]],

Cell[TextData[{
 "The execution of this problem, from the point of view of the text, involves \
the ",
 StyleBox["critical value",
  FontSlant->"Italic"],
 ", what I understand is a somewhat dated evaluation device. I get the \
impression the p-value is now more commonly used, and one of its advantages \
is that it is not necessary to consult a table. The ",
 StyleBox["MathWorld",
  FontSlant->"Italic"],
 " article on Hypothesis Testing gives a basic routine which I use. The \
LocationTest in Mathematica provides what is necessary in a convenient \
tabular form, and all I have to do is to compare the level of significance \
with the p-value."
}], "Text",
 CellChangeTimes->{{3.766842506344358*^9, 3.766842512734676*^9}, {
  3.7668426354240294`*^9, 3.766842704306219*^9}, {3.766842810357057*^9, 
  3.7668430074070177`*^9}, {3.766843262053342*^9, 3.766843314898431*^9}, {
  3.766843368464603*^9, 3.766843370592183*^9}, {3.766843469372697*^9, 
  3.7668434698687677`*^9}}],

Cell[BoxData[
 RowBox[{"0.05", "<", "0.866"}]], "Input",
 CellChangeTimes->{{3.766843012595697*^9, 3.766843024693516*^9}}],

Cell["\<\
and the upshot of this is that the satellite is deemed not to be doomed, the \
null hypothesis is accepted.\
\>", "Text",
 CellChangeTimes->{{3.766843037716545*^9, 3.766843088009367*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"h", "=", 
  RowBox[{"LocationTest", "[", 
   RowBox[{"sam", ",", "Automatic", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<TestDataTable\>\"", ",", "All"}], "}"}]}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.766832099997118*^9, 3.766832126583824*^9}, {
  3.766838382257971*^9, 3.766838410116843*^9}, {3.7670056763247337`*^9, 
  3.767005703194908*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {"\<\"\"\>", "\<\"Statistic\"\>", "\<\"P\[Hyphen]Value\"\>"},
     {"\<\"Paired T\"\>", "0.17541160386140583`", "0.866526270675908`"},
     {"\<\"Paired Z\"\>", "0.1754116038614058`", "0.8607562233837368`"},
     {"\<\"Sign\"\>", "4", "0.6875`"},
     {"\<\"Signed\[Hyphen]Rank\"\>", "13.`", "0.6715664317280816`"},
     {"\<\"T\"\>", "0.17541160386140583`", "0.866526270675908`"},
     {"\<\"Z\"\>", "0.1754116038614058`", "0.8607562233837368`"}
    },
    AutoDelete->False,
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
    GridBoxDividers->{
     "ColumnsIndexed" -> {2 -> GrayLevel[0.7]}, 
      "RowsIndexed" -> {2 -> GrayLevel[0.7]}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
    GridBoxSpacings->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Grid"], "DialogStyle",
  StripOnInput->False]], "Output",
 CellChangeTimes->{
  3.766832127767465*^9, {3.766838386592718*^9, 3.766838412443286*^9}, {
   3.767005684570141*^9, 3.767005704252429*^9}}]
}, Open  ]],

Cell["\<\
The T value in the above table agrees with the text answer within 2S.\
\>", "Text",
 CellChangeTimes->{{3.766843108319972*^9, 3.7668431422403297`*^9}},
 Background->RGBColor[0.88, 1, 0.88]],

Cell["\<\
 The are seven values in the sample list, which means there are six degrees \
of freedom. And the \[Alpha] level of significance is 0.05. So\
\>", "Text",
 CellChangeTimes->{{3.766927127582272*^9, 3.766927154649788*^9}, {
  3.7669277304684668`*^9, 3.766927740716021*^9}, {3.76692777153897*^9, 
  3.766927806721651*^9}, {3.766927845728191*^9, 3.766927858407736*^9}, {
  3.767010568341099*^9, 3.7670105804246902`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"c", "=", 
  RowBox[{"critCVM", "[", 
   RowBox[{"6", ",", "0.05"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.766927822763226*^9, 3.7669278312649*^9}, {
  3.7670103496910753`*^9, 3.767010350631678*^9}}],

Cell[BoxData["1.94`"], "Output",
 CellChangeTimes->{
  3.7669278317717667`*^9, 3.767005974692234*^9, {3.76701035201987*^9, 
   3.767010378241465*^9}},
 Background->RGBColor[0.88, 1, 0.88]]
}, Open  ]],

Cell["\<\
The answer in the green cell above matches the answer in the text for the \
value of c. I should be prepared to work this out by hand according to the \
text examples. To that end I consider\
\>", "Text",
 CellChangeTimes->{{3.766927876927046*^9, 3.766927888126499*^9}, {
   3.767005996279316*^9, 3.767005999220879*^9}, {3.767010593935961*^9, 
   3.7670106337331247`*^9}, 3.767187839754362*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"t", "=", 
  RowBox[{
   FractionBox[
    RowBox[{
     OverscriptBox["x", "_"], "-", 
     SubscriptBox["\[Mu]", "0"]}], 
    RowBox[{"s", "/", 
     SqrtBox["n"]}]], "==", 
   FractionBox[
    RowBox[{"0.286", "-", "0"}], 
    RowBox[{"4.30946", "/", 
     SqrtBox["7"]}]]}]}]], "Input",
 CellChangeTimes->{{3.767010657630677*^9, 3.7670107147443657`*^9}, {
  3.767010759606166*^9, 3.767010784643962*^9}}],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{
    SqrtBox["n"], " ", 
    RowBox[{"(", 
     RowBox[{
      OverscriptBox["x", "_"], "-", 
      SubscriptBox["\[Mu]", "0"]}], ")"}]}], "s"], "\[Equal]", 
  "0.17558693547787266`"}]], "Output",
 CellChangeTimes->{{3.767010779756878*^9, 3.767010785660639*^9}}]
}, Open  ]],

Cell["\<\
For some reason the above is not precisely what is shown in the location \
table for T.\
\>", "Text",
 CellChangeTimes->{{3.76702888571364*^9, 3.767028911255233*^9}}],

Cell["\<\
4.  In one of his classical experiments, Buffon obtained 2048 heads in \
tossing a coin 4040 times. Was the coin fair?\
\>", "Text",
 CellChangeTimes->{{3.7667781403225937`*^9, 3.766778179361609*^9}},
 FontSlant->"Italic"],

Cell["\<\
5.  Do the same test as in problem 4, using a result by K. Pearson, who \
obtained 6019 heads in 12,000 trials.\
\>", "Text",
 CellChangeTimes->{{3.766778100755846*^9, 3.766778136258836*^9}},
 Background->RGBColor[1, 0.9, 0.8]],

Cell[BoxData[
 RowBox[{
  RowBox[{"fin", "=", 
   RowBox[{"Table", "[", 
    RowBox[{"0", ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"12000", "-", "6019"}]}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7668550128043423`*^9, 3.766855081771553*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"fin1", "=", 
   RowBox[{"Table", "[", 
    RowBox[{"1", ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "6019"}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.76685508869523*^9, 3.76685512320076*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Total", "[", "fin1", "]"}]], "Input",
 CellChangeTimes->{{3.7668551274045877`*^9, 3.766855131368322*^9}}],

Cell[BoxData["6019"], "Output",
 CellChangeTimes->{3.766855132114202*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"gra", "=", 
   RowBox[{"Join", "[", 
    RowBox[{"fin", ",", "fin1"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.766855134237006*^9, 3.76685517321345*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"grad", "=", 
  RowBox[{"EmpiricalDistribution", "[", "gra", "]"}]}]], "Input",
 CellChangeTimes->{{3.766930097630557*^9, 3.76693010604497*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DataDistribution",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{18., {0., 18.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGAwBmIQ/Xmu+cn//+/vZ4CCC1M/TWa6cwfO38s482xKyU04
/7jcgZ2dbtfg/Je6ZtOXalyG802T9I879p2H8y+e+nxkr91JOL9Xun/Bj/RD
+2fNBIGT9p8WTNjrlLQdyr9pXzaPm8Nu+1I4/+nEnefMz7Taw/ht95KiXc6v
g/NfPvaf8/Dqbjhfw2XB8sCVR+B8JRNxGd0vp+D8f3Ojb6o8vgDnX14fY2xj
cwXO7xG4e2tC9HU43/RvoXDbvltw/kGLtpk7nt+F8+Ubwm+4rnpgb2IMAo/t
L2W5vN4c8QjO//7nwxKHV4/hfJGr6svnzn0K5y8KkQuQNHkO56tE5zbMPPQC
zp+33O3ny6JXcH7X7PsSkWxv4Py8q0yNM3a/hfPdptUV3Ml4D+d7/I9pnl/z
Ac7PvLb/047Qj3C+c2PT1kSFT3D+9PyPu3meI/jPG5Y+m7/vM5z/IXVnyqH2
L3D+11wh9rOJX+H8zZ6n/6TpfoOGz0v71xkGZsxfEXz51bcmt5/9DufzHHzi
Mnv6Dzj/609jqelFP+0hqeWDfUSZvvFUz19wfsmxrvlKQr/h/B5LbYMZrxH8
2AZtkbnb/sD5K7huWC+p/Qvnv99+sn1y6D84/52FtLqQ/H84v/a576f//3Hx
GRgA8dtlww==
           "], {{{}, 
             {GrayLevel[0.85], EdgeForm[None], 
              GraphicsGroupBox[
               PolygonBox[{{7, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40,
                 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 
                24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9,
                 8}}]]}, {}, {}}, {{}, {}, 
             {GrayLevel[0.55], AbsoluteThickness[1.5], Opacity[1.], 
              LineBox[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 
               17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
                33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 
               48, 49, 50}]}}}],
          AspectRatio->1,
          Axes->{False, False},
          AxesLabel->{None, None},
          AxesOrigin->{0, 0},
          Background->GrayLevel[0.93],
          BaseStyle->{FontFamily -> "Arial"},
          DisplayFunction->Identity,
          Frame->{{True, True}, {True, True}},
          FrameLabel->{{None, None}, {None, None}},
          FrameStyle->Directive[
            Thickness[Tiny], 
            GrayLevel[0.7]],
          FrameTicks->{{None, None}, {None, None}},
          GridLines->{None, None},
          GridLinesStyle->Directive[
            GrayLevel[0.5, 0.4]],
          ImageSize->{Automatic, 
            Dynamic[
            3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])]},
          LabelStyle->{FontFamily -> "Arial"},
          Method->{"ScalingFunctions" -> None, "AxesInFront" -> True},
          PlotRange->{All, All},
          PlotRangeClipping->True,
          PlotRangePadding->{{0, 0}, {0, 0.1}},
          Ticks->{Automatic, Automatic}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Type: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"Empirical\"\>",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Data points: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["12000",
              "SummaryItem"]}]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->
      GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquareMinusIconMedium"],
            ImageSizeCache->{18., {0., 18.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGAwBmIQ/Xmu+cn//+/vZ4CCC1M/TWa6cwfO38s482xKyU04
/7jcgZ2dbtfg/Je6ZtOXalyG802T9I879p2H8y+e+nxkr91JOL9Xun/Bj/RD
+2fNBIGT9p8WTNjrlLQdyr9pXzaPm8Nu+1I4/+nEnefMz7Taw/ht95KiXc6v
g/NfPvaf8/Dqbjhfw2XB8sCVR+B8JRNxGd0vp+D8f3Ojb6o8vgDnX14fY2xj
cwXO7xG4e2tC9HU43/RvoXDbvltw/kGLtpk7nt+F8+Ubwm+4rnpgb2IMAo/t
L2W5vN4c8QjO//7nwxKHV4/hfJGr6svnzn0K5y8KkQuQNHkO56tE5zbMPPQC
zp+33O3ny6JXcH7X7PsSkWxv4Py8q0yNM3a/hfPdptUV3Ml4D+d7/I9pnl/z
Ac7PvLb/047Qj3C+c2PT1kSFT3D+9PyPu3meI/jPG5Y+m7/vM5z/IXVnyqH2
L3D+11wh9rOJX+H8zZ6n/6TpfoOGz0v71xkGZsxfEXz51bcmt5/9DufzHHzi
Mnv6Dzj/609jqelFP+0hqeWDfUSZvvFUz19wfsmxrvlKQr/h/B5LbYMZrxH8
2AZtkbnb/sD5K7huWC+p/Qvnv99+sn1y6D84/52FtLqQ/H84v/a576f//3Hx
GRgA8dtlww==
           "], {{{}, 
             {GrayLevel[0.85], EdgeForm[None], 
              GraphicsGroupBox[
               PolygonBox[{{7, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40,
                 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 
                24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9,
                 8}}]]}, {}, {}}, {{}, {}, 
             {GrayLevel[0.55], AbsoluteThickness[1.5], Opacity[1.], 
              LineBox[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 
               17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
                33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 
               48, 49, 50}]}}}],
          AspectRatio->1,
          Axes->{False, False},
          AxesLabel->{None, None},
          AxesOrigin->{0, 0},
          Background->GrayLevel[0.93],
          BaseStyle->{FontFamily -> "Arial"},
          DisplayFunction->Identity,
          Frame->{{True, True}, {True, True}},
          FrameLabel->{{None, None}, {None, None}},
          FrameStyle->Directive[
            Thickness[Tiny], 
            GrayLevel[0.7]],
          FrameTicks->{{None, None}, {None, None}},
          GridLines->{None, None},
          GridLinesStyle->Directive[
            GrayLevel[0.5, 0.4]],
          ImageSize->{Automatic, 
            Dynamic[
            3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])]},
          LabelStyle->{FontFamily -> "Arial"},
          Method->{"ScalingFunctions" -> None, "AxesInFront" -> True},
          PlotRange->{All, All},
          PlotRangeClipping->True,
          PlotRangePadding->{{0, 0}, {0, 0.1}},
          Ticks->{Automatic, Automatic}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Type: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"Empirical\"\>",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Data points: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["12000",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Input dimension: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Domain: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              RowBox[{"{", 
               RowBox[{"0", ",", "1"}], "}"}],
              "SummaryItem"]}]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DataDistribution["Empirical", {{
     Rational[5981, 12000], 
     Rational[6019, 12000]}, {0, 1}, False}, 1, 12000],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7669301078604794`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"Mean", "[", "grad", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7668551765535316`*^9, 3.76685517894108*^9}, {
  3.766930111651538*^9, 3.7669301286264277`*^9}}],

Cell[BoxData["0.5015833333333334`"], "Output",
 CellChangeTimes->{{3.766930113233264*^9, 3.766930129143478*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"Variance", "[", "grad", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7668566592339983`*^9, 3.766856663027132*^9}, {
   3.766859619359907*^9, 3.766859622461938*^9}, 3.7669301342664347`*^9}],

Cell[BoxData["0.24999749305555555`"], "Output",
 CellChangeTimes->{3.766856664110896*^9, 3.76685962296485*^9, 
  3.766930135666226*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"StandardDeviation", "[", "grad", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7669292839183893`*^9, 3.766929301281889*^9}, 
   3.766930141580069*^9}],

Cell[BoxData["0.4999974930492707`"], "Output",
 CellChangeTimes->{{3.766929292318687*^9, 3.766929301810686*^9}, 
   3.766930142801963*^9}]
}, Open  ]],

Cell["\<\
I\[CloseCurlyQuote]m going to illustrate something with confidence level. \
First, suppose I want to look at the set I made above \
\[OpenCurlyDoubleQuote]gra\[CloseCurlyDoubleQuote], containing the 12000 \
flips. If I want to have confidence level of 99% that the mean will be in an \
interval, that interval has to grow to include some slightly unusual \
possibilities that may be just around the corner.\
\>", "Text",
 CellChangeTimes->{{3.766858351499997*^9, 3.766858465355212*^9}, {
  3.766859365591107*^9, 3.76685937507845*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MeanCI", "[", 
  RowBox[{"gra", ",", 
   RowBox[{"ConfidenceLevel", "\[Rule]", "0.99"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7668566524373627`*^9, 3.766856696912958*^9}, {
  3.766857849414563*^9, 3.7668578526841497`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.48982403335326197`", ",", "0.5133426333134048`"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.766856687412188*^9, 3.766856697934092*^9}, 
   3.766857854762568*^9}]
}, Open  ]],

Cell["\<\
On the other hand, if I don\[CloseCurlyQuote]t need the confidence that the \
mean of the set will stay inside a certain boundary, upon reducing the \
required confidence level, the interval shrinks. So to observe the currently \
calculated mean, the confidence level can go way down, even as far as 0.1. \
\>", "Text",
 CellChangeTimes->{{3.766858499785924*^9, 3.766858625464612*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MeanCI", "[", 
  RowBox[{"gra", ",", 
   RowBox[{"ConfidenceLevel", "\[Rule]", ".1"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7668552102432947`*^9, 3.766855263567622*^9}, {
  3.766855296981656*^9, 3.766855335778798*^9}, {3.766856045005644*^9, 
  3.766856045987863*^9}, {3.76685702514078*^9, 3.766857045593686*^9}, {
  3.766857089031006*^9, 3.766857095846479*^9}, {3.766858258538927*^9, 
  3.766858274280224*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.5010097372174662`", ",", "0.5021569294492005`"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.7668552181586227`*^9, 3.766855264959597*^9}, {
   3.766855298099897*^9, 3.7668553369534903`*^9}, 3.766856047619465*^9, {
   3.766857030181319*^9, 3.766857047032612*^9}, {3.766857091154553*^9, 
   3.7668570972909203`*^9}, {3.766858260184778*^9, 3.766858275886223*^9}}]
}, Open  ]],

Cell["Let me get a number to judge the accuracy of the mean", "Text",
 CellChangeTimes->{{3.7668549405806026`*^9, 3.766854966387025*^9}, {
  3.7668587840634212`*^9, 3.766858793837142*^9}, {3.766858871583921*^9, 
  3.7668588823672543`*^9}, {3.767034721659458*^9, 3.767034763183325*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Abs", "[", 
  RowBox[{"0.5", "-", 
   RowBox[{"Mean", "[", "gra", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.766858885492094*^9, 3.766858901783639*^9}}],

Cell[BoxData["0.001583333333333381`"], "Output",
 CellChangeTimes->{3.766858902456643*^9, 3.766858999825645*^9},
 Background->RGBColor[1, 1, 0.85]]
}, Open  ]],

Cell["Then let me throw around some Bernoulli pseudos.", "Text",
 CellChangeTimes->{{3.7668589107972116`*^9, 3.766858929508052*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"b1", "=", 
   RowBox[{"RandomVariate", "[", 
    RowBox[{
     RowBox[{"BernoulliDistribution", "[", 
      FractionBox["1", "2"], "]"}], ",", "10000"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.76685880406212*^9, 3.766858825787191*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Abs", "[", 
  RowBox[{"0.5", "-", 
   RowBox[{"Mean", "[", "b1", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7668589443409243`*^9, 3.76685894581117*^9}}],

Cell[BoxData["0.006900000000000017`"], "Output",
 CellChangeTimes->{3.76685894698524*^9, 3.766859013589362*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"b2", "=", 
   RowBox[{"RandomVariate", "[", 
    RowBox[{
     RowBox[{"BernoulliDistribution", "[", 
      FractionBox["1", "2"], "]"}], ",", "12000"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7668589644996223`*^9, 3.766858968537676*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Abs", "[", 
  RowBox[{"0.5", "-", 
   RowBox[{"Mean", "[", "b2", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.766858980786419*^9, 3.7668589809207907`*^9}}],

Cell[BoxData["0.0017499999999999738`"], "Output",
 CellChangeTimes->{3.766858981955194*^9, 3.766859020490541*^9},
 Background->RGBColor[1, 1, 0.85]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"Variance", "[", "b2", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7668595982043257`*^9, 3.766859610839867*^9}}],

Cell[BoxData["0.2500177723143595`"], "Output",
 CellChangeTimes->{{3.766859602528607*^9, 3.7668596112294683`*^9}}]
}, Open  ]],

Cell["\<\
Comparing the two yellow cells above, I see that Pearson\[CloseCurlyQuote]s \
trial does at least as well as an instance of Mathematica trying to imitate a \
fair coin at the same sample size (yellow), which, since the sample size is \
sizable, seems like pretty good evidence of fairness to me.\
\>", "Text",
 CellChangeTimes->{{3.766859151958509*^9, 3.766859200530011*^9}, {
  3.7668593026512938`*^9, 3.7668593280415916`*^9}, {3.767034152076803*^9, 
  3.7670341550847054`*^9}, {3.767187952716085*^9, 3.767187964416492*^9}}],

Cell[TextData[{
 "Now I will bring in the way that ",
 StyleBox["https://www.math.arizona.edu/~jwatkins/505d/Lesson_11.pdf",
  FontSize->14,
  FontSlant->"Italic"],
 " handles this coin-flipping situation, adapting from 1000 flips to 12000."
}], "Text",
 CellChangeTimes->{{3.7669281214536943`*^9, 3.766928136541236*^9}, {
  3.7669289630795813`*^9, 3.766929043619629*^9}, {3.7670134673192987`*^9, 
  3.767013520817471*^9}}],

Cell[BoxData[
 RowBox[{"Clear", "[", "c", "]"}]], "Input",
 CellChangeTimes->{{3.767011604603244*^9, 3.7670116069649057`*^9}}],

Cell["\<\
I get my c value. 12000 flips is far enough above 200 that I will use the \
infinity value input, at 0.05 significance level.\
\>", "Text",
 CellChangeTimes->{{3.767013574270158*^9, 3.767013629946587*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"c", "=", 
  RowBox[{"critCVM", "[", 
   RowBox[{"100000", ",", "0.05"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.766929063164307*^9, 3.7669290649546556`*^9}, {
  3.766929099290196*^9, 3.766929120176736*^9}, {3.766929164535234*^9, 
  3.766929173990897*^9}, {3.767013291451913*^9, 3.7670133115045013`*^9}}],

Cell[BoxData["1.65`"], "Output",
 CellChangeTimes->{
  3.7669290665744267`*^9, {3.766929102987056*^9, 3.7669291212471113`*^9}, {
   3.766929166806642*^9, 3.7669291755062428`*^9}, {3.767013293197743*^9, 
   3.767013312653693*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{
   "Getting", " ", "my", " ", "expected", " ", "population", " ", "size", " ",
     "of", " ", "heads"}],
   FontFamily->"Charter"], 
  StyleBox[",",
   FontFamily->"Charter"], 
  StyleBox[" ",
   FontFamily->"Charter"], 
  RowBox[{"\[Mu]", "=", 
   RowBox[{"12000", 
    SubscriptBox["p", "0"]}]}]}]], "Text",
 CellChangeTimes->{{3.76701283415515*^9, 3.767012869984469*^9}, {
  3.767013179181745*^9, 3.767013195861434*^9}, {3.767013868353858*^9, 
  3.767013880065596*^9}, {3.767014422644753*^9, 3.767014434787909*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[Mu]", "=", 
  RowBox[{"12000", " ", 
   FractionBox["1", "2"]}]}]], "Input",
 CellChangeTimes->{{3.767013209848825*^9, 3.767013211543067*^9}}],

Cell[BoxData["6000"], "Output",
 CellChangeTimes->{3.767013213178012*^9, 3.7670133229905157`*^9}]
}, Open  ]],

Cell["Getting my variance.", "Text",
 CellChangeTimes->{{3.767013659657711*^9, 3.7670136629042873`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sigmasq", "\[Equal]", 
  RowBox[{"n", " ", 
   SubscriptBox["p", "0"], 
   RowBox[{"(", 
    RowBox[{"1", "-", 
     SubscriptBox["p", "0"]}], ")"}]}], "\[Equal]", 
  RowBox[{"12000", " ", 
   FractionBox["1", "2"], " ", 
   FractionBox["1", "2"]}]}]], "Input",
 CellChangeTimes->{{3.767012895177524*^9, 3.767012962823995*^9}}],

Cell[BoxData[
 RowBox[{"sigmasq", "\[Equal]", 
  RowBox[{"n", " ", 
   RowBox[{"(", 
    RowBox[{"1", "-", 
     SubscriptBox["p", "0"]}], ")"}], " ", 
   SubscriptBox["p", "0"]}], "\[Equal]", "3000"}]], "Output",
 CellChangeTimes->{3.767012968923555*^9, 3.76701332756577*^9}]
}, Open  ]],

Cell["Getting my standard deviation.", "Text",
 CellChangeTimes->{{3.767013669367794*^9, 3.767013677991132*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sigma", "=", 
  SuperscriptBox[
   RowBox[{"(", "3000", ")"}], "0.5"]}]], "Input",
 CellChangeTimes->{{3.767012987775079*^9, 3.767013047618465*^9}}],

Cell[BoxData["54.772255750516614`"], "Output",
 CellChangeTimes->{{3.7670130002889433`*^9, 3.767013048592615*^9}, 
   3.7670133326587276`*^9}]
}, Open  ]],

Cell["Getting my low expectation.", "Text",
 CellChangeTimes->{{3.767013747154388*^9, 3.767013752810069*^9}, {
  3.7670144510342627`*^9, 3.767014457297903*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[Mu]", "-", 
  RowBox[{"c", " ", "sigma"}]}]], "Input",
 CellChangeTimes->{{3.767013104440713*^9, 3.7670131238529863`*^9}, {
  3.767013350239452*^9, 3.767013353149482*^9}}],

Cell[BoxData["5909.6257780116475`"], "Output",
 CellChangeTimes->{3.767013128380618*^9, 3.7670132179483213`*^9, 
  3.767013354255494*^9},
 Background->RGBColor[1, 1, 0.85]]
}, Open  ]],

Cell["Getting my high expectation.", "Text",
 CellChangeTimes->{{3.7670137559993362`*^9, 3.767013764649137*^9}, {
  3.767014460241671*^9, 3.767014464201545*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[Mu]", "+", 
  RowBox[{"c", " ", "sigma"}]}]], "Input",
 CellChangeTimes->{{3.7670132386453133`*^9, 3.7670132525162497`*^9}, {
  3.767013358581459*^9, 3.7670133619090757`*^9}}],

Cell[BoxData["6090.3742219883525`"], "Output",
 CellChangeTimes->{3.7670132539769783`*^9, 3.767013363006281*^9},
 Background->RGBColor[0.88, 1, 0.88]]
}, Open  ]],

Cell["\<\
So if I am interpreting this right, any number of heads between the yellow \
number and green number above indicates a fair coin, within the stated level \
of significance. Incidentally, the green number is the one that the text \
answer gives for c.\
\>", "Text",
 CellChangeTimes->{{3.767013936190846*^9, 3.7670139796264887`*^9}, 
   3.767014076780097*^9, {3.7670143459148817`*^9, 3.7670143763837*^9}}],

Cell[TextData[{
 "6.  Assuming normality and known variance ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[Sigma]", "2"], TraditionalForm]]],
 " = 9, test the hypothesis \[Mu] = 60.0 against the alternative \[Mu] = 57.0 \
using a sample of size 20 with mean ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["x", "_"], TraditionalForm]]],
 " = 58.50 and choosing \[Alpha] = 5%."
}], "Text",
 CellChangeTimes->{{3.76677835892381*^9, 3.7667784486155987`*^9}},
 FontSlant->"Italic"],

Cell[TextData[{
 "7.  How does the result in problem 6 change if we use a smaller size, say, \
of size 5, the other data (",
 Cell[BoxData[
  FormBox[
   OverscriptBox["x", "_"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " = 58.05, \[Alpha] = 5%, etc.) remaining as before?"
}], "Text",
 CellChangeTimes->{{3.7667782029778976`*^9, 3.766778259478862*^9}},
 Background->RGBColor[1, 0.9, 0.8]],

Cell["\<\
Problem 7 disagrees with problem 6 on the mean, although it is apparent they \
should agree. The discrepancy makes a significant difference in the \
statistics, so I show both versions.\
\>", "Text",
 CellChangeTimes->{{3.76686507479359*^9, 3.7668650783351316`*^9}}],

Cell[TextData[StyleBox["First Comparison. (mean 58.50)",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.766863223944078*^9, 3.766863227383882*^9}, {
  3.766864166597355*^9, 3.766864177285232*^9}}],

Cell["\<\
As I read the Mathematica docs for LocationTest, the \[Mu] items listed in \
the problem description cannot be done in the same test.  A test checks the \
\[Mu] that is provided against a not-\[Mu] condition. If I have this right, \
then each desired \[Mu] must be tested separately. Also, to make a decision I \
will look at the smaller p-value which is associated with T. In the first \
comparison, neither hypothesis looks attractive, but I will (would) choose \
\[Mu] = 60, since it has the smaller p-value. I have included the location \
test that conforms to the current mean of the data, and in the tests I\
\[CloseCurlyQuote]ve tried, it has the worst p-value of all.\
\>", "Text",
 CellChangeTimes->{{3.766864044603086*^9, 3.766864153046041*^9}, {
  3.7668646727804327`*^9, 3.766864766511694*^9}, {3.766865113419941*^9, 
  3.766865120850576*^9}, {3.766865530172902*^9, 3.766865586985861*^9}, {
  3.766865783659836*^9, 3.766865797738076*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"norm", "=", 
  RowBox[{"RandomVariate", "[", 
   RowBox[{
    RowBox[{"NormalDistribution", "[", 
     RowBox[{"58.50", ",", "3"}], "]"}], ",", "5"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7668608833100767`*^9, 3.76686090107237*^9}, {
  3.766860946926586*^9, 3.766861020440222*^9}, {3.766861398725369*^9, 
  3.766861400891287*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "56.0947752761638`", ",", "58.933860079456245`", ",", "58.54264625218298`", 
   ",", "58.98134511547512`", ",", "60.13892541459356`"}], "}"}]], "Output",
 CellChangeTimes->{{3.766860892072294*^9, 3.7668609019573803`*^9}, 
   3.766860948233904*^9, {3.7668609826096897`*^9, 3.766861047653983*^9}, 
   3.766861402433764*^9, 3.766862899193426*^9, 3.7668654138905497`*^9, 
   3.766865477714723*^9, 3.766873064628682*^9, 3.766873115084858*^9, 
   3.766932368150378*^9, 3.766932680147613*^9, 3.7669329898897743`*^9, 
   3.766962355210473*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mn", "=", 
  RowBox[{"Mean", "[", "norm", "]"}]}]], "Input",
 CellChangeTimes->{{3.766865386061714*^9, 3.766865389768697*^9}, {
  3.7668731499001217`*^9, 3.7668731505622063`*^9}}],

Cell[BoxData["58.53831042757433`"], "Output",
 CellChangeTimes->{{3.766865390685112*^9, 3.766865417217019*^9}, 
   3.766865481453575*^9, 3.766873067542873*^9, 3.7668731183624763`*^9, 
   3.766873151427093*^9, 3.766932370677548*^9, 3.766932993986101*^9, 
   3.7669623587985888`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"h", "=", 
  RowBox[{"LocationTest", "[", 
   RowBox[{"norm", ",", "60.0", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<TestDataTable\>\"", ",", "All"}], "}"}]}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.76686107100616*^9, 3.766861073132474*^9}, {
  3.766862874958988*^9, 3.766862881372973*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {"\<\"\"\>", "\<\"Statistic\"\>", "\<\"P\[Hyphen]Value\"\>"},
     {"\<\"Paired T\"\>", 
      RowBox[{"-", "2.1929412705187175`"}], "0.09338501567793579`"},
     {"\<\"Paired Z\"\>", 
      RowBox[{"-", "2.192941270518717`"}], "0.028311610734627162`"},
     {"\<\"Sign\"\>", "1", "0.37499999999999983`"},
     {"\<\"Signed\[Hyphen]Rank\"\>", "1.`", "0.10564542920187696`"},
     {"\<\"T\"\>", 
      RowBox[{"-", "2.1929412705187175`"}], "0.09338501567793579`"},
     {"\<\"Z\"\>", 
      RowBox[{"-", "2.192941270518717`"}], "0.028311610734627162`"}
    },
    AutoDelete->False,
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
    GridBoxDividers->{
     "ColumnsIndexed" -> {2 -> GrayLevel[0.7]}, 
      "RowsIndexed" -> {2 -> GrayLevel[0.7]}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
    GridBoxSpacings->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Grid"], "DialogStyle",
  StripOnInput->False]], "Output",
 CellChangeTimes->{
  3.766861074622148*^9, 3.7668614055963373`*^9, {3.766862883670211*^9, 
   3.766862902349702*^9}, 3.7668654200691967`*^9, 3.766865494045438*^9, 
   3.7668730714877167`*^9, 3.766873121848065*^9, 3.76693299720007*^9, 
   3.766962361564169*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"h", "=", 
  RowBox[{"LocationTest", "[", 
   RowBox[{"norm", ",", "57.0", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<TestDataTable\>\"", ",", "All"}], "}"}]}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.766863259272345*^9, 3.766863260110828*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {"\<\"\"\>", "\<\"Statistic\"\>", "\<\"P\[Hyphen]Value\"\>"},
     {"\<\"Paired T\"\>", "2.307893883308517`", "0.08222232818545566`"},
     {"\<\"Paired Z\"\>", "2.307893883308517`", "0.021005039359186028`"},
     {"\<\"Sign\"\>", "4", "0.37499999999999983`"},
     {"\<\"Signed\[Hyphen]Rank\"\>", "14.`", "0.10564542920187696`"},
     {"\<\"T\"\>", "2.307893883308517`", "0.08222232818545566`"},
     {"\<\"Z\"\>", "2.307893883308517`", "0.021005039359186028`"}
    },
    AutoDelete->False,
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
    GridBoxDividers->{
     "ColumnsIndexed" -> {2 -> GrayLevel[0.7]}, 
      "RowsIndexed" -> {2 -> GrayLevel[0.7]}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
    GridBoxSpacings->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Grid"], "DialogStyle",
  StripOnInput->False]], "Output",
 CellChangeTimes->{3.766863261527809*^9, 3.766865423291563*^9, 
  3.766865497524743*^9, 3.766873076556723*^9, 3.766873125467011*^9, 
  3.7669330044671707`*^9, 3.766962367593315*^9}]
}, Open  ]],

Cell["Second Comparison. (mean 58.05)", "Text",
 CellChangeTimes->{{3.766864207517139*^9, 3.766864229443281*^9}},
 FontWeight->"Bold"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"norm2", "=", 
  RowBox[{"RandomVariate", "[", 
   RowBox[{
    RowBox[{"NormalDistribution", "[", 
     RowBox[{"58.05", ",", "3"}], "]"}], ",", "5"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.766861476017893*^9, 3.7668614847205563`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "60.199605151324285`", ",", "61.55388197512812`", ",", "61.09899418267653`",
    ",", "58.56946209474678`", ",", "52.56193311169755`"}], "}"}]], "Output",
 CellChangeTimes->{{3.766861478738202*^9, 3.766861485438758*^9}, 
   3.766862911274274*^9, 3.766864251975203*^9, 3.766865617228258*^9, {
   3.766865866915053*^9, 3.766865889431346*^9}, 3.7668732345073547`*^9, 
   3.7668732770109797`*^9, 3.766932502085835*^9, 3.766932552851493*^9, 
   3.766932613764264*^9, 3.766932759958625*^9, 3.7670163374683104`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mn", "=", 
  RowBox[{"Mean", "[", "norm2", "]"}]}]], "Input",
 CellChangeTimes->{{3.7668656346451263`*^9, 3.7668656384953117`*^9}, {
  3.766873227801043*^9, 3.7668732299849358`*^9}}],

Cell[BoxData["58.79677530311466`"], "Output",
 CellChangeTimes->{
  3.766865639154422*^9, 3.766865870277367*^9, {3.766873231191228*^9, 
   3.7668732381903353`*^9}, 3.766873280149662*^9, 3.766932504991476*^9, 
   3.766932555829505*^9, 3.767016340204975*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"h", "=", 
  RowBox[{"LocationTest", "[", 
   RowBox[{"norm2", ",", "60.0", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<TestDataTable\>\"", ",", "All"}], "}"}]}], "]"}]}]], "Input",\

 CellChangeTimes->{
  3.766861495449255*^9, {3.766862916022703*^9, 3.766862920283407*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {"\<\"\"\>", "\<\"Statistic\"\>", "\<\"P\[Hyphen]Value\"\>"},
     {"\<\"Paired T\"\>", 
      RowBox[{"-", "0.7336551222214005`"}], "0.5038410103819518`"},
     {"\<\"Paired Z\"\>", 
      RowBox[{"-", "0.7336551222214005`"}], "0.4631589565464125`"},
     {"\<\"Sign\"\>", "3", "1.`"},
     {"\<\"Signed\[Hyphen]Rank\"\>", "7.`", "1.`"},
     {"\<\"T\"\>", 
      RowBox[{"-", "0.7336551222214005`"}], "0.5038410103819518`"},
     {"\<\"Z\"\>", 
      RowBox[{"-", "0.7336551222214005`"}], "0.4631589565464125`"}
    },
    AutoDelete->False,
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
    GridBoxDividers->{
     "ColumnsIndexed" -> {2 -> GrayLevel[0.7]}, 
      "RowsIndexed" -> {2 -> GrayLevel[0.7]}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
    GridBoxSpacings->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Grid"], "DialogStyle",
  StripOnInput->False]], "Output",
 CellChangeTimes->{
  3.766861496395012*^9, 3.766862921156187*^9, 3.766864257861843*^9, 
   3.766865621501925*^9, {3.7668658734177437`*^9, 3.766865894521021*^9}, 
   3.766873242159635*^9, 3.766873283150278*^9, 3.7669327687309647`*^9, 
   3.76701639027701*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"h", "=", 
  RowBox[{"LocationTest", "[", 
   RowBox[{"norm2", ",", "57.0", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<TestDataTable\>\"", ",", "All"}], "}"}]}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.7668642693152523`*^9, 3.766864269937869*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {"\<\"\"\>", "\<\"Statistic\"\>", "\<\"P\[Hyphen]Value\"\>"},
     {"\<\"Paired T\"\>", "1.0955671106346916`", "0.33480480326247497`"},
     {"\<\"Paired Z\"\>", "1.0955671106346918`", "0.2732682614014458`"},
     {"\<\"Sign\"\>", "4", "0.37499999999999983`"},
     {"\<\"Signed\[Hyphen]Rank\"\>", "11.`", "0.4184922334468198`"},
     {"\<\"T\"\>", "1.0955671106346916`", "0.33480480326247497`"},
     {"\<\"Z\"\>", "1.0955671106346918`", "0.2732682614014458`"}
    },
    AutoDelete->False,
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
    GridBoxDividers->{
     "ColumnsIndexed" -> {2 -> GrayLevel[0.7]}, 
      "RowsIndexed" -> {2 -> GrayLevel[0.7]}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
    GridBoxSpacings->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Grid"], "DialogStyle",
  StripOnInput->False]], "Output",
 CellChangeTimes->{
  3.766864271917873*^9, 3.766865625178649*^9, {3.7668658767585278`*^9, 
   3.7668658977977533`*^9}, 3.7668732457136*^9, 3.76687328638527*^9, 
   3.7669327662238197`*^9, 3.767016387276381*^9}]
}, Open  ]],

Cell["\<\
In the second comparison, the p-value for T in \[Mu] = 57 may actually be \
less than 0.05, (depending on the generated pseudo-values) so that \[Mu] \
would be my choice if it were available.\
\>", "Text",
 CellChangeTimes->{{3.76686478981107*^9, 3.7668647962015133`*^9}, {
  3.7668649647933702`*^9, 3.766865052077013*^9}, {3.766865923486466*^9, 
  3.766865948667967*^9}, {3.766873264639347*^9, 3.766873270053606*^9}}],

Cell["\<\
I will (reluctantly) turn to WolframAlpha for a different view of this. (I \
don\[CloseCurlyQuote]t like cells that cannot be refreshed off-line.) What I \
found was that both hypotheses, for 60 and for 57 mean, are rejected at the \
5% level when 20 items make up the sample, but neither is rejected when only \
5 items make up the sample.\
\>", "Text",
 CellChangeTimes->{{3.767029835701672*^9, 3.767029969237174*^9}, {
  3.767031044720591*^9, 3.767031073575029*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WolframAlpha", "[", "\"\<t-test mu0=60, xbar=58.5, s=3, n=5\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.767029475339291*^9, 3.7670295189904203`*^9}}],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "t-test mu0=60, xbar=58.5, s=3, n=5", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input information", "scanner" -> "Formula", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   StyleBox[
                    TemplateBox[{
                    StyleBox["\"T\"", Italic, StripOnInput -> False], 
                    "\"\[Hyphen]test for a population mean\""}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                   BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], "\[SpanFromLeft]"}, {
                 TagBox[
                  PaneBox[
                  "\"hypothesized mean\"", 
                   BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TemplateBox[{"60"}, "RowDefault"]}, {
                 TagBox[
                  PaneBox[
                  "\"sample mean\"", 
                   BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TemplateBox[{"58.5`"}, "RowDefault"]}, {
                 TagBox[
                  PaneBox[
                  "\"sample standard deviation\"", 
                   BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TemplateBox[{"3"}, "RowDefault"]}, {
                 TagBox[
                  PaneBox[
                  "\"sample size\"", 
                   BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TemplateBox[{"5"}, "RowDefault"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}, 
                 "ItemsIndexed" -> {{1, 1} -> {Left, Baseline}, {1, 2} -> {
                    Left, Baseline}}}, AutoDelete -> False, 
               GridBoxBackground -> {
                "Columns" -> {{None}}, "Rows" -> {{None}}, 
                 "ItemsIndexed" -> {{{1, 1}, {1, 2}} -> 
                   GrayLevel[0.9568627450980393]}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata"}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Left\[Hyphen]tailed test", "scanner" -> "Formula", 
     "id" -> "Test", "position" -> "200", "error" -> "false", "numsubpods" -> 
     "9"}, {
     XMLElement["subpod", {"title" -> "Null hypothesis"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\[Mu]", "\" = \"", "60"}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Alternative hypothesis"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\[Mu]", "\" < \"", "60"}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Test statistic"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"-", "1.118033988749895`"}], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["subpod", {"title" -> "Degrees of freedom"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["4", TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["subpod", {"title" -> "p\[Hyphen]value"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox["0.1631", 
             $CellContext`TagBoxWrapper[
             "StringBoxes" -> "0.1631", "SRString" -> "0.1631"]], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata"}]}], 
     XMLElement[
     "subpod", {
      "title" -> 
       "Sampling distribution of test statistic under the null hypothesis"}, {
      
       XMLElement[
       "minput", {}, {
        "Plot[{12 ((4 + x^2)^(-1))^(5/2) Boole[x <= -1.11803], 12 ((4 + \
x^2)^(-1))^(5/2)}, {x, -3 Sqrt[2], 3 Sqrt[2]}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max1994$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min1993$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1993$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1994$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1633420$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min1993$\
1633425$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max1994$1633426$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max1994$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min1993$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1633420$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1993$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1993$\
1633425$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1994$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max1994$\
1633426$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1633403[
                    
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], 
                    HoldAll][{(
                    12 ((4 + $CellContext`x^2)^(-1))^Rational[5, 2]) 
                    Boole[$CellContext`x <= -1.118033988749895], 
                    12 ((4 + $CellContext`x^2)^(-1))^
                    Rational[5, 2]}, {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1993$$], 
                    (
                    Piecewise[{{
                    0. + 4.535573676110727 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    4.535573676110727 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min1993$$], \
(-3) 2^Rational[1, 2]], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1993$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max1994$$]], \

                    (Piecewise[{{
                    0. + 4.535573676110727 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 4.535573676110727 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min1993$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max1994$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1993$$ + 
                    Rational[3, 250] 2^Rational[-1, 2], 
                    CalculateUtilities`GraphicsUtilities`Private`max1994$$]], 
                    3 2^Rational[1, 2]]}, Axes -> None, BaseStyle -> 
                    AbsoluteThickness[1], Epilog -> {{
                    Opacity[0], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    
                    Rectangle[{-1.118033988749895, 0}, {-1.118033988749895, 
                    0}]}, {
                    RGBColor[1, 0, 0], 
                    
                    Line[{{-1.118033988749895, 0}, {-1.118033988749895, 
                    0.19001285680412933`}}]}}, Filling -> {1 -> Bottom}, 
                    FillingStyle -> Directive[
                    Opacity[0.15], 
                    Hue[0.67, 0.6, 0.6]], Frame -> True, FrameStyle -> 
                    Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1], FrameTicks -> Automatic, ImageSize -> 
                    330., PlotRange -> All, PlotRangePadding -> {{0, 0}, {0, 
                    Scaled[0.1]}}, PlotStyle -> {{
                    Opacity[0], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]}, 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]}, 
                    PerformanceGoal -> "Quality"]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min1993$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max1994$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, $CellContext`UnitNumberForm, 
                    NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1633403]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1633403[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1633403[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVtuO0zAQbSn3O/wBEs+\
I0hVvSECXXVZaoCTlvbOJk1i4drCdvfDz4LGbpNl2K8V0Aa3Sh1E9aY5nzpyZzrMjEST9Xq+\
nrhvzUbA4uYWnp8aMxTwXBY8/nOaSKEUFT67hs7vGhETvEgZnJHa+m8bsCTkH7c5v8H1gUcFAk2+\
aMqopUbN9CXlGI1V7JpIem5/MmIiA0Z/k+\
fD1aLQzfOlgMJYJaE0kV6O2kHkmQZGkh0A3jHnPgH93xyfl8XPBWEh+\
FIRHRD0y3qmE2MAIDgzz8b71ajN1HxPTwGOQ8aXTZOU5bnuB0pLydErmOb5xMVnDtsAgU+\
W4eVBys0lBLvzb+\
ECENibnsUnbsyXQL4wrRt95Wf1z7gZ4ftsWXoqT9cRhfu8Y8gaaHhO1SueL1nVyjFRda6NfcHVZ82W\
rQV48Zer/pUOq9GoYr9qGQeZHpsbrtbcKv9MWXuTY9QtxPzTmi3OUgOuGQyW4TyIu2CKKZsoDJ9H26\
arcOBzGvYrvEJ0+FaxwAhNn2S+\
2Px5X4PWmEGLtZluQDq9nQEByYlyx5XaXplSPM5AQGeDFdf2yyaaiDsXjzva1pzymZoA5QjYtT2gOk\
qW6g46yr39U3Eou55oMeT/gmqREbhT9HayPNOTyeCo8IwnxgqZevTmskpqA9Jb9oAQJc+\
AUIekv87Hf3MPlSiBV+xLVJR2LA1uaU/8k+\
mWBDwlPddbcsT1Hl3fbYjaBOKlVF9AkWZ4222O632S6cUNzoPuS4FsS/\
4HebQrdpvBXN4WVPbhbE7o1oVsTujWhWxP+3zXBRoz/Sr8BnDe4Lg=="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> "Power function"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max1996$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min1995$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1995$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1996$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1633507$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min1995$\
1633508$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max1996$1633509$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max1996$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min1995$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1633507$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1995$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1995$\
1633508$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1996$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max1996$\
1633509$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1633491[
                    
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    
                    Piecewise[{{
                    Rational[1, 2] 
                    BetaRegularized[
                    4/(4 + (-2.1318467863266504` + (Rational[-1, 3] 
                    5^Rational[1, 2]) (-60 + 
                    CalculateScan`StatisticsScanner`Private`x))^2), 2, 
                    Rational[
                    1, 2]], -2.1318467863266504` + (Rational[-1, 3] 
                    5^Rational[1, 2]) (-60 + 
                    CalculateScan`StatisticsScanner`Private`x) <= 0}}, 
                    Rational[1, 2] (1 + 
                    BetaRegularized[(
                    4 + (-2.1318467863266504` + (Rational[-1, 3] 
                    5^Rational[1, 2]) (-60 + 
                    CalculateScan`StatisticsScanner`Private`x))^2)^(-1) \
(-2.1318467863266504` + (Rational[-1, 3] 5^Rational[1, 2]) (-60 + 
                    CalculateScan`StatisticsScanner`Private`x))^2, 
                    Rational[1, 2], 2])], {
                    CalculateScan`StatisticsScanner`Private`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1995$$], 
                    (
                    Piecewise[{{
                    60. + 4.535573676110727 Tan[1.5040801783846716` #], # < 
                    0}}, 60. + 
                    4.535573676110727 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min1995$$], 
                    60 - 3 2^Rational[1, 2]], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1995$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max1996$$]], \

                    (Piecewise[{{
                    60. + 4.535573676110727 Tan[1.5040801783846716` #], # < 
                    0}}, 60. + 
                    4.535573676110727 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min1995$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max1996$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1995$$ + 
                    Rational[3, 250] 2^Rational[-1, 2], 
                    CalculateUtilities`GraphicsUtilities`Private`max1996$$]], 
                    60 + 3 2^Rational[1, 2]]}, Axes -> False, FrameLabel -> {
                    RawBoxes[
                    FormBox[
                    StyleBox["\[Mu]", "Label", 10, StripOnInput -> False], 
                    TraditionalForm]], 
                    RawBoxes[
                    FormBox[
                    StyleBox["\"power\"", "Label", 10, StripOnInput -> False],
                     TraditionalForm]]}, BaseStyle -> AbsoluteThickness[1], 
                    Filling -> Bottom, FillingStyle -> Directive[
                    Opacity[0.05], 
                    Hue[0.67, 0.6, 0.6]], Frame -> True, FrameStyle -> 
                    Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1], ImageSize -> 220., PlotRange -> {0, 1},
                     PerformanceGoal -> "Quality"]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min1995$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max1996$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, $CellContext`UnitNumberForm, 
                    NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1633491]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1633491[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1633491[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbikw3t/+ARKfkUYnEB+\
QGN0YkwaUpHzvLXESC9cOtrMN/jz47CZp1q5STAdoSj+c6kvz+O6556739FgESb/\
X66nrxnwQLE628PTEmJGY5aLg8f5ZLolSVPDkGj67Y0xI9B5h8IPEznfTmPdCzkC78xt8H1hUMNDkq\
6aMakrU9EBCntFI1Z6xpCfmJ1MmImD0J3m2/XI43Hn9ysFgLGPQmkiuhm0h80yCIkkPgW4Y844B/+\
aOj8vjp4KxkHwvCI+\
Iemi8EwmxgREcGObjfevVZuoeJqaBxyDjS6fJynPU9gKlJeXphMxyfONisrbbAoNMlePmfsnNOgW58\
G/hAxHamJzHJm3PlkC/MK4Yfedl9c+5G+D5bVt4KU5XE4f57TLkDTQ9IWqZzuet6+QYqbrWRj/\
n6rLmy0aDvHjK1P9LR1Tp5TBetA2DzI5NjVdrbxl+py28yLHr5+J+\
YMxn5ygBVw2HSnAfRVyweRTNlAdOou3TVblxOIy7Fd8hOn0qWOEEJs6yX2x/\
PKrA600hxNpNNyAdXs+AgOTEuGLL7R5NqR5lICEywPPr+\
mWTTUQdised7WtPeUzNAHOErFue0BwmC3UHHWVf/qi4lVzONRnyfsg1SYlcK/\
rbWB9pyOXxRHhGEuIFTb16c1glNQbpLftBCRLmwClC0l/mY7+5h4uVQKoOJKpLOhYHtjRn/\
kn0ywIfEZ7qrLlje44u77bFbAJxWqsuoEmyOG02x3S/yXTjhuZA9yXBtyT+\
A73bFLpN4a9uCkt7cLcmdGtCtyZ0a0K3Jvy/a4KNGP+VfgO/Tbim"]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}], 
       XMLElement["states", {"count" -> "1"}, {
         XMLElement[
         "statelist", {
          "count" -> "3", "value" -> "Significance level 5%", "delimiters" -> 
           ""}, {
           XMLElement[
           "state", {
            "name" -> "Significance level 1%", "input" -> 
             "Test__Power function_Significance level 1%"}, {}], 
           XMLElement[
           "state", {
            "name" -> "Significance level 5%", "input" -> 
             "Test__Power function_Significance level 5%"}, {}], 
           XMLElement[
           "state", {
            "name" -> "Significance level 10%", "input" -> 
             "Test__Power function_Significance level 10%"}, {}]}]}]}], 
     XMLElement["subpod", {"title" -> "Test conclusions"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  StyleBox["\"null hypothesis\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], "\" is not rejected\"", 
                  StyleBox["\" at \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 
                  TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1", "SRString" -> "1"]], "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" significance level\""}, 
                   "RowDefault"]}, "RowDefault"]}, {
                TemplateBox[{
                  StyleBox["\"null hypothesis\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], "\" is not rejected\"", 
                  StyleBox["\" at \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 
                  TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["5", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "5", "SRString" -> "5"]], "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" significance level\""}, 
                   "RowDefault"]}, "RowDefault"]}, {
                TemplateBox[{
                  StyleBox["\"null hypothesis\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], "\" is not rejected\"", 
                  StyleBox["\" at \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 
                  TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["10", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "10", "SRString" -> "10"]], "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" significance level\""}, 
                   "RowDefault"]}, "RowDefault"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             
             RowBox[{"\"(\"", "\[NoBreak]", 
               "\"assuming a simple random sample; results are exact if the \
population is normal and approximate for large samples from \
non\[Hyphen]normal populations\"", "\[NoBreak]", "\")\""}], {
             FontFamily -> "Verdana", FontSize -> 10, 
              GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
              LineIndent -> 0}, StripOnInput -> False], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Right\[Hyphen]tailed test", "input" -> 
         "Test__Right\[Hyphen]tailed test"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Two\[Hyphen]tailed test", "input" -> 
         "Test__Two\[Hyphen]tailed test"}, {}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {
    False, False, False, False, False, False, False, False, False}, True}, 
   Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
    "Formula", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.592", 
    "parsetiming" -> "0.844", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa128213ggb1adh5agh92100001hiac8c35d36igf8", "host" -> 
    "http://www4b.wolframalpha.com", "server" -> "45", "related" -> 
    "http://www4b.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa128313ggb1adh5agh92100005c44ggbf2c396c115366071421620951425", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -6., 
    "Date" -> {2019, 5, 16, 15, 5, 25.699788`8.162504523150638}, "Line" -> 13,
     "SessionID" -> 27364551010961356374}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "t-test mu0=60, xbar=58.5, s=3, n=5"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1215., {817., 826.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Output",
 CellChangeTimes->{3.767029525980362*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WolframAlpha", "[", "\"\<t-test mu0=57, xbar=58.5, s=3, n=5\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.767030043850733*^9, 3.7670300444491253`*^9}}],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "t-test mu0=57, xbar=58.5, s=3, n=5", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input information", "scanner" -> "Formula", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   StyleBox[
                    TemplateBox[{
                    StyleBox["\"T\"", Italic, StripOnInput -> False], 
                    "\"\[Hyphen]test for a population mean\""}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                   BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], "\[SpanFromLeft]"}, {
                 TagBox[
                  PaneBox[
                  "\"hypothesized mean\"", 
                   BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TemplateBox[{"57"}, "RowDefault"]}, {
                 TagBox[
                  PaneBox[
                  "\"sample mean\"", 
                   BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TemplateBox[{"58.5`"}, "RowDefault"]}, {
                 TagBox[
                  PaneBox[
                  "\"sample standard deviation\"", 
                   BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TemplateBox[{"3"}, "RowDefault"]}, {
                 TagBox[
                  PaneBox[
                  "\"sample size\"", 
                   BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TemplateBox[{"5"}, "RowDefault"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}, 
                 "ItemsIndexed" -> {{1, 1} -> {Left, Baseline}, {1, 2} -> {
                    Left, Baseline}}}, AutoDelete -> False, 
               GridBoxBackground -> {
                "Columns" -> {{None}}, "Rows" -> {{None}}, 
                 "ItemsIndexed" -> {{{1, 1}, {1, 2}} -> 
                   GrayLevel[0.9568627450980393]}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata"}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Right\[Hyphen]tailed test", "scanner" -> "Formula", 
     "id" -> "Test", "position" -> "200", "error" -> "false", "numsubpods" -> 
     "9"}, {
     XMLElement["subpod", {"title" -> "Null hypothesis"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\[Mu]", "\" = \"", "57"}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Alternative hypothesis"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\[Mu]", "\" > \"", "57"}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Test statistic"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox["1.118033988749895`", Identity], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["subpod", {"title" -> "Degrees of freedom"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["4", TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["subpod", {"title" -> "p\[Hyphen]value"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox["0.1631", 
             $CellContext`TagBoxWrapper[
             "StringBoxes" -> "0.1631", "SRString" -> "0.1631"]], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata"}]}], 
     XMLElement[
     "subpod", {
      "title" -> 
       "Sampling distribution of test statistic under the null hypothesis"}, {
      
       XMLElement[
       "minput", {}, {
        "Plot[{12 ((4 + x^2)^(-1))^(5/2) Boole[x >= 1.11803], 12 ((4 + \
x^2)^(-1))^(5/2)}, {x, -3 Sqrt[2], 3 Sqrt[2]}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max1529$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min1528$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1528$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1529$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1127504$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min1528$\
1127509$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max1529$1127510$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max1529$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min1528$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1127504$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1528$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1528$\
1127509$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1529$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max1529$\
1127510$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1127487[
                    
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], 
                    HoldAll][{(
                    12 ((4 + $CellContext`x^2)^(-1))^Rational[5, 2]) 
                    Boole[$CellContext`x >= 1.118033988749895], 
                    12 ((4 + $CellContext`x^2)^(-1))^
                    Rational[5, 2]}, {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1528$$], 
                    (
                    Piecewise[{{
                    0. + 4.535573676110727 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    4.535573676110727 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min1528$$], \
(-3) 2^Rational[1, 2]], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1528$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max1529$$]], \

                    (Piecewise[{{
                    0. + 4.535573676110727 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 4.535573676110727 Tan[1.5040801783846716` #]]& )[
                    If[CalculateUtilities`GraphicsUtilities`Private`min1528$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max1529$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1528$$ + 
                    Rational[3, 250] 2^Rational[-1, 2], 
                    CalculateUtilities`GraphicsUtilities`Private`max1529$$]], 
                    3 2^Rational[1, 2]]}, Axes -> None, BaseStyle -> 
                    AbsoluteThickness[1], Epilog -> {{
                    Opacity[0], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    
                    Rectangle[{1.118033988749895, 0}, {
                    1.118033988749895, 0}]}, {
                    RGBColor[1, 0, 0], 
                    
                    Line[{{1.118033988749895, 0}, {1.118033988749895, 
                    0.19001285680412933`}}]}}, Filling -> {1 -> Bottom}, 
                    FillingStyle -> Directive[
                    Opacity[0.15], 
                    Hue[0.67, 0.6, 0.6]], Frame -> True, FrameStyle -> 
                    Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1], FrameTicks -> Automatic, ImageSize -> 
                    330., PlotRange -> All, PlotRangePadding -> {{0, 0}, {0, 
                    Scaled[0.1]}}, PlotStyle -> {{
                    Opacity[0], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]}, 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]}, 
                    PerformanceGoal -> "Quality"]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min1528$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max1529$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, $CellContext`UnitNumberForm, 
                    NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1127487]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1127487[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1127487[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVtuO0zAQbSn3O/\
wBEs9IXSohHpCALrustEBJyntnEyexcO1gO3vh58FjN0mz7VaK6QJapQ+jetIcz5w5M51nRyJI+\
r1eT1035qNgcXILT0+NGYt5LgoefzjNJVGKCp5cw2d3jQmJ3iUMzkjsfDeN2RNyDtqd3+\
D7wKKCgSbfNGVUU6Jm+xLyjEaq9kwkPTY/mTERAaM/\
yfPhcOfV6PXIwWAsE9CaSK5etoXMMwmKJD0EumHMewb8uzs+KY+\
fC8ZC8qMgPCLqkfFOJcQGRnBgmI/3rVebqfuYmAYeg4wvnSYrz3HbC5SWlKdTMs/\
xjYvJGrYFBpkqx82DkptNCnLh38YHIrQxOY9N2p4tgX5hXDH6zsvqn3M3wPPbtvBSnKwnDvN7x5A30\
PSYqFU6X7Suk2Ok6lob/YKry5ovWw3y4ilT/\
y8dUqVXw9hpGwaZH5kar9feKvyoLbzIsesX4n5ozBfnKAHXDYdKcJ9EXLBFFM2UB06i7dNVuXE4jHs\
V3yE6fSpY4QQmzrJfbH88rsDrTSHE2s22IB1ez4CA5MS4YsvtLk2pHmcgITLAi+\
v6ZZNNRR2Kx53ta095TM0Ac4RsWp7QHCRLdQcdZV//qLiVXM41GfJ+wDVJidwo+\
jtYH2nI5fFUeEYS4gVNvXpzWCU1Aekt+0EJEubAKULSX+Zjv7mHy5VAqvYlqks6Fge2NKf+\
SfTLAh8SnuqsuWN7ji7vtsVsAnFSqy6gSbI8bbbHdL/\
JdOOG5kD3JcG3JP4DvdsUuk3hr24KK3twtyZ0a0K3JnRrQrcm/L9rgo0Y/5V+A13YuH4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> "Power function"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max1531$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min1530$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1530$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1531$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1127591$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min1530$\
1127592$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max1531$1127593$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max1531$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min1530$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1127591$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1530$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1530$\
1127592$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1531$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max1531$\
1127593$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1127575[
                    
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    1 - Piecewise[{{
                    Rational[1, 2] 
                    BetaRegularized[
                    4/(4 + (2.1318467863266504` + (Rational[-1, 3] 
                    5^Rational[1, 2]) (-57 + 
                    CalculateScan`StatisticsScanner`Private`x))^2), 2, 
                    Rational[1, 2]], 
                    2.1318467863266504` + (Rational[-1, 3] 
                    5^Rational[1, 2]) (-57 + 
                    CalculateScan`StatisticsScanner`Private`x) <= 0}}, 
                    Rational[1, 2] (1 + 
                    BetaRegularized[(
                    4 + (2.1318467863266504` + (Rational[-1, 3] 
                    5^Rational[1, 2]) (-57 + 
                    CalculateScan`StatisticsScanner`Private`x))^2)^(-1) (
                    2.1318467863266504` + (Rational[-1, 3] 
                    5^Rational[1, 2]) (-57 + 
                    CalculateScan`StatisticsScanner`Private`x))^2, 
                    Rational[1, 2], 2])], {
                    CalculateScan`StatisticsScanner`Private`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1530$$], 
                    (Piecewise[{{
                    57. + 4.535573676110727 Tan[1.5040801783846716` #], # < 
                    0}}, 57. + 
                    4.535573676110727 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min1530$$], 
                    57 - 3 2^Rational[1, 2]], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1530$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max1531$$]], \

                    (Piecewise[{{
                    57. + 4.535573676110727 Tan[1.5040801783846716` #], # < 
                    0}}, 57. + 
                    4.535573676110727 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min1530$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max1531$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1530$$ + 
                    Rational[3, 250] 2^Rational[-1, 2], 
                    CalculateUtilities`GraphicsUtilities`Private`max1531$$]], 
                    57 + 3 2^Rational[1, 2]]}, Axes -> False, FrameLabel -> {
                    RawBoxes[
                    FormBox[
                    StyleBox["\[Mu]", "Label", 10, StripOnInput -> False], 
                    TraditionalForm]], 
                    RawBoxes[
                    FormBox[
                    StyleBox["\"power\"", "Label", 10, StripOnInput -> False],
                     TraditionalForm]]}, BaseStyle -> AbsoluteThickness[1], 
                    Filling -> Bottom, FillingStyle -> Directive[
                    Opacity[0.05], 
                    Hue[0.67, 0.6, 0.6]], Frame -> True, FrameStyle -> 
                    Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1], ImageSize -> 220., PlotRange -> {0, 1},
                     PerformanceGoal -> "Quality"]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min1530$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max1531$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, $CellContext`UnitNumberForm, 
                    NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1127575]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1127575[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1127575[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbinv7/APkPiM1AGCL0hAB2PSgJKU7/\
XiS2Ph2sF2tsGfB5/dJM3aVYrpAE3ph1N9aR7fPffc9R4dyijt93o9fdmaD5LT9BqeHlozkvNcFoK+\
O8kVaM2kSC/hs5vWxGB2gZMfQL3vqjXvpZoT48+v8H3Ck4ITA18N48ww0NM9RfKMJbr2jBU7sj+\
ZcpkQzn7C4+Fw58Xzl0MPg7GMiTGghH7aFjLPFNGQ9hDoijVvORHf/\
PFBefxUcB7D9wJEAvqe9U4UoRZGCsIxn+\
BbLzZTtzExQwQlip47TU6eo7YXaKOYmE1gnuMbZ5M1bAtM1Ex7bu6U3GxSkA//\
Oj6QsYvJe1zS7uwIDAvjgtF3Wlb/nLsBnl+\
3hVfyeD1xmN8bjrwRw45Ar9L5pHWdPCNV17roF1yd13zZapBnT5n6f+mAabMaxk7bMGB+\
aGu8Xnur8M/awsscu34h7rvWfPaOEnDdcKgE91HSgi+\
iaKY88BJtn67OrcNj3Kr4jtEZUsEKJ7Jxlv3i+uN+BV5vCjHWbroF6Yh6BkSQg3VRx+\
0umzEzyogiiQVeXNcvm2wi61AC7mxfeyYoswPME7JpeUKzny7VnZgk+/\
JHxa3kcqrJkPd9YWAGaqPob2B9lCVX0IkMjCTGC5p6DeawSmpMVLDsByVInBPBEJL9sh/\
3zT9crgRStadQXcqzOHClOQlPol8W+ADEzGTNHTtwdAW3LWYTyeNadRFL0+Vpsz2m+\
02mGzc0B3ooCaElCR/o3abQbQp/dVNY2YO7NaFbE7o1oVsTujXh/10TXMT4r/Qb8Hm4Zg=="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}], 
       XMLElement["states", {"count" -> "1"}, {
         XMLElement[
         "statelist", {
          "count" -> "3", "value" -> "Significance level 5%", "delimiters" -> 
           ""}, {
           XMLElement[
           "state", {
            "name" -> "Significance level 1%", "input" -> 
             "Test__Power function_Significance level 1%"}, {}], 
           XMLElement[
           "state", {
            "name" -> "Significance level 5%", "input" -> 
             "Test__Power function_Significance level 5%"}, {}], 
           XMLElement[
           "state", {
            "name" -> "Significance level 10%", "input" -> 
             "Test__Power function_Significance level 10%"}, {}]}]}]}], 
     XMLElement["subpod", {"title" -> "Test conclusions"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  StyleBox["\"null hypothesis\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], "\" is not rejected\"", 
                  StyleBox["\" at \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 
                  TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1", "SRString" -> "1"]], "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" significance level\""}, 
                   "RowDefault"]}, "RowDefault"]}, {
                TemplateBox[{
                  StyleBox["\"null hypothesis\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], "\" is not rejected\"", 
                  StyleBox["\" at \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 
                  TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["5", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "5", "SRString" -> "5"]], "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" significance level\""}, 
                   "RowDefault"]}, "RowDefault"]}, {
                TemplateBox[{
                  StyleBox["\"null hypothesis\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], "\" is not rejected\"", 
                  StyleBox["\" at \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 
                  TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["10", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "10", "SRString" -> "10"]], "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" significance level\""}, 
                   "RowDefault"]}, "RowDefault"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             
             RowBox[{"\"(\"", "\[NoBreak]", 
               "\"assuming a simple random sample; results are exact if the \
population is normal and approximate for large samples from \
non\[Hyphen]normal populations\"", "\[NoBreak]", "\")\""}], {
             FontFamily -> "Verdana", FontSize -> 10, 
              GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
              LineIndent -> 0}, StripOnInput -> False], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Left\[Hyphen]tailed test", "input" -> 
         "Test__Left\[Hyphen]tailed test"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Two\[Hyphen]tailed test", "input" -> 
         "Test__Two\[Hyphen]tailed test"}, {}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {
    False, False, False, False, False, False, False, False, False}, True}, 
   Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
    "Formula", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.742", 
    "parsetiming" -> "0.96", "parsetimedout" -> "false", "recalculate" -> "", 
    "id" -> "MSPa1431h1027debbf4ai010000560b2fh26fef3ig1", "host" -> 
    "http://www4f.wolframalpha.com", "server" -> "48", "related" -> 
    "http://www4f.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa1441h1027debbf4ai01000029ieg4a42g4b0cdh8130123784979259853", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -6., 
    "Date" -> {2019, 5, 16, 15, 14, 8.152808`7.663882201714279}, "Line" -> 14,
     "SessionID" -> 27364551010961356374}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "t-test mu0=57, xbar=58.5, s=3, n=5"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1215., {817., 826.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Output",
 CellChangeTimes->{3.767030048426208*^9}]
}, Open  ]],

Cell["\<\
9.  What is the rejection region in problem 6 in the case of a two-sided test \
with \[Alpha] = 5%?\
\>", "Text",
 CellChangeTimes->{{3.7667783052780113`*^9, 3.7667783319479303`*^9}},
 Background->RGBColor[1, 0.9, 0.8]],

Cell["\<\
The following grid shows the results of testing on Wolfram|Alpha.\
\>", "Text",
 CellChangeTimes->{
  3.766862331364554*^9, {3.766866014236103*^9, 3.766866029760989*^9}, {
   3.767030581260654*^9, 3.767030599881853*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"57", ",", "Reject"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"58", ",", 
       RowBox[{"Do", " ", "not", " ", "reject"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"59", ",", 
       RowBox[{"Do", " ", "not", " ", "reject"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"60", ",", " ", "Reject"}], "}"}]}], "}"}], ",", 
   RowBox[{"Frame", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.766691103111822*^9, 3.766691193209503*^9}, {
  3.766691226586776*^9, 3.766691355469562*^9}, {3.767030414478084*^9, 
  3.767030472233459*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {"57", "Reject"},
    {"58", 
     RowBox[{"Do", " ", "not", " ", "reject"}]},
    {"59", 
     RowBox[{"Do", " ", "not", " ", "reject"}]},
    {"60", "Reject"}
   },
   AutoDelete->False,
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{3.767030472920981*^9}]
}, Open  ]],

Cell["\<\
11.  A firm sells oil in cans containing 5000 g oil per can and is interested \
to know whether the mean weight differs significantly from 5000 g at the 5% \
level, in which case the filling machine has to be adjusted. Set up a \
hypothesis and an alternative and perform the test, assuming normality and \
using a sample of 50 fillings with mean 4990 g and standard deviation 20 g.\
\>", "Text",
 CellChangeTimes->{{3.7667784740637836`*^9, 3.766778572178939*^9}},
 Background->RGBColor[1, 0.9, 0.8]],

Cell[BoxData[
 RowBox[{"Clear", "[", "\"\<Global`*\>\"", "]"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"oil", "=", 
   RowBox[{"RandomVariate", "[", 
    RowBox[{
     RowBox[{"NormalDistribution", "[", 
      RowBox[{"5000", ",", "20"}], "]"}], ",", "50"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Mean", "[", "oil", "]"}]}], "Input",
 CellChangeTimes->{{3.766869719323505*^9, 3.7668697500253963`*^9}, {
  3.766869857309163*^9, 3.766869861116638*^9}, {3.7668703975390797`*^9, 
  3.76687040112992*^9}}],

Cell[BoxData["5004.050510529372`"], "Output",
 CellChangeTimes->{
  3.766869861871251*^9, {3.766870402567315*^9, 3.766870413108797*^9}, 
   3.766938877581376*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Variance", "[", "oil", "]"}]], "Input",
 CellChangeTimes->{{3.766869867435575*^9, 3.766869871580155*^9}}],

Cell[BoxData["424.08991093312267`"], "Output",
 CellChangeTimes->{3.7668698722491827`*^9, 3.766870415974091*^9, 
  3.766938880061226*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"h", "=", 
  RowBox[{"LocationTest", "[", 
   RowBox[{"oil", ",", "4990", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<TestDataTable\>\"", ",", "All"}], "}"}]}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.766869802760564*^9, 3.7668698334939737`*^9}, {
  3.766870421097567*^9, 3.76687042491188*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {"\<\"\"\>", "\<\"Statistic\"\>", "\<\"P\[Hyphen]Value\"\>"},
     {"\<\"Paired T\"\>", "4.824453629762478`", "0.000014086113551413794`"},
     {"\<\"Paired Z\"\>", "4.824453629762478`", "1.403875726470012`*^-6"},
     {"\<\"Sign\"\>", "35", "0.006600447966811`"},
     {"\<\"Signed\[Hyphen]Rank\"\>", "1045.`", "0.00008534084188195767`"},
     {"\<\"T\"\>", "4.824453629762478`", "0.000014086113551413794`"},
     {"\<\"Z\"\>", "4.824453629762478`", "1.403875726470012`*^-6"}
    },
    AutoDelete->False,
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
    GridBoxDividers->{
     "ColumnsIndexed" -> {2 -> GrayLevel[0.7]}, 
      "RowsIndexed" -> {2 -> GrayLevel[0.7]}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
    GridBoxSpacings->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Grid"], "DialogStyle",
  StripOnInput->False]], "Output",
 CellChangeTimes->{3.7668698355343723`*^9, 3.766870426001021*^9, 
  3.766938884358055*^9}]
}, Open  ]],

Cell["\<\
The p-value for T is so small that I think the alternative hypothesis based \
on 4990 must be accepted. I think this is what the text answer is saying \
also. This judgment is reinforced by W|A.\
\>", "Text",
 CellChangeTimes->{{3.766939863810313*^9, 3.76693990500628*^9}, {
  3.767034927377654*^9, 3.767034939337309*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WolframAlpha", "[", 
  "\"\<t-test mu0=5000, xbar=4990, s=20, n=50\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.767030788296657*^9, 3.767030836908701*^9}}],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "t-test mu0=5000, xbar=4990, s=20, n=50", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input information", "scanner" -> "Formula", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   StyleBox[
                    TemplateBox[{
                    StyleBox["\"T\"", Italic, StripOnInput -> False], 
                    "\"\[Hyphen]test for a population mean\""}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                   BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], "\[SpanFromLeft]"}, {
                 TagBox[
                  PaneBox[
                  "\"hypothesized mean\"", 
                   BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TemplateBox[{"5000"}, "RowDefault"]}, {
                 TagBox[
                  PaneBox[
                  "\"sample mean\"", 
                   BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TemplateBox[{"4990"}, "RowDefault"]}, {
                 TagBox[
                  PaneBox[
                  "\"sample standard deviation\"", 
                   BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TemplateBox[{"20"}, "RowDefault"]}, {
                 TagBox[
                  PaneBox[
                  "\"sample size\"", 
                   BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TemplateBox[{"50"}, "RowDefault"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}, 
                 "ItemsIndexed" -> {{1, 1} -> {Left, Baseline}, {1, 2} -> {
                    Left, Baseline}}}, AutoDelete -> False, 
               GridBoxBackground -> {
                "Columns" -> {{None}}, "Rows" -> {{None}}, 
                 "ItemsIndexed" -> {{{1, 1}, {1, 2}} -> 
                   GrayLevel[0.9568627450980393]}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata"}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Left\[Hyphen]tailed test", "scanner" -> "Formula", 
     "id" -> "Test", "position" -> "200", "error" -> "false", "numsubpods" -> 
     "9"}, {
     XMLElement["subpod", {"title" -> "Null hypothesis"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\[Mu]", "\" = \"", "5000"}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Alternative hypothesis"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\[Mu]", "\" < \"", "5000"}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Test statistic"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              RowBox[{"-", 
                FractionBox["5", 
                 SqrtBox["2"]]}], "\" \[TildeTilde] \"", 
              RowBox[{"-", "3.5355339059327373`"}]}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Degrees of freedom"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["49", TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["subpod", {"title" -> "p\[Hyphen]value"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"4.5", 
               StyleBox["\[Times]", 
                GrayLevel[0.5]], 
               SuperscriptBox["10", "-4"]}], 
             $CellContext`TagBoxWrapper[
             "StringBoxes" -> RowBox[{"4.5", "\[Times]", 
                 SuperscriptBox["10", "-4"]}], "SRString" -> 
              "4.5 times 10 to the negative 4"], SyntaxForm -> CenterDot], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata"}]}], 
     XMLElement[
     "subpod", {
      "title" -> 
       "Sampling distribution of test statistic under the null hypothesis"}, {
      
       XMLElement[
       "minput", {}, {
        "Plot[{(18079389499789617277846114872989136522027702078089986048 \
Boole[x <= -5/Sqrt[2]])/(8061900920775 Pi (49 + x^2)^25), \
18079389499789617277846114872989136522027702078089986048/(8061900920775 Pi \
(49 + x^2)^25)}, {x, -3.6, 21/Sqrt[47]}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max6864$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min6863$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min6863$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max6864$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$3333068$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min6863$\
3333073$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max6864$3333074$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max6864$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min6863$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$3333068$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min6863$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min6863$\
3333073$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max6864$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max6864$\
3333074$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$3333051[
                    
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], 
                    HoldAll][{((
                    Rational[
                    18079389499789617277846114872989136522027702078089986048, 
                    8061900920775]/Pi) (49 + $CellContext`x^2)^(-25)) 
                    Boole[$CellContext`x <= (-5) 2^Rational[-1, 2]], (
                    Rational[
                    18079389499789617277846114872989136522027702078089986048, 
                    8061900920775]/
                    Pi) (49 + $CellContext`x^2)^(-25)}, {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min6863$$], 
                    (
                    Piecewise[{{-0.2861845422384759 + 
                    3.5806050821580664` Tan[1.5040801783846716` #], # < 
                    0}}, -0.2861845422384759 + 
                    3.5806050821580664` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min6863$$], \
-3.6355339059327374`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min6863$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max6864$$]], \

                    (Piecewise[{{-0.2861845422384759 + 
                    3.5806050821580664` Tan[1.5040801783846716` #], # < 
                    0}}, -0.2861845422384759 + 
                    3.5806050821580664` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min6863$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max6864$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min6863$$ + 
                    0.006698698727388523, 
                    CalculateUtilities`GraphicsUtilities`Private`max6864$$]], 
                    21 47^Rational[-1, 2]]}, Axes -> None, BaseStyle -> 
                    AbsoluteThickness[1], Epilog -> {{
                    Opacity[0], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    
                    Rectangle[{(-5) 2^Rational[-1, 2], 0}, {(-5) 
                    2^Rational[-1, 2], 0}]}, {
                    RGBColor[1, 0, 0], 
                    
                    Line[{{(-5) 2^Rational[-1, 2], 0}, {(-5) 
                    2^Rational[-1, 2], 
                    Rational[
                    6066436455722047272555125679699026181670950314955291267285\
64736, 142582177339523311831747908173403281249513151960306811881174203325]/
                    Pi}}]}}, Filling -> {1 -> Bottom}, FillingStyle -> 
                    Directive[
                    Opacity[0.15], 
                    Hue[0.67, 0.6, 0.6]], Frame -> True, FrameStyle -> 
                    Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1], FrameTicks -> Automatic, ImageSize -> 
                    330., PlotRange -> All, PlotRangePadding -> {{0, 0}, {0, 
                    Scaled[0.1]}}, PlotStyle -> {{
                    Opacity[0], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]}, 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]}, 
                    PerformanceGoal -> "Quality"]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min6863$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max6864$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, $CellContext`UnitNumberForm, 
                    NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[CalculateUtilities`GraphicsUtilities`Private`res, 
                    All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$3333051]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3333051[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3333051[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbikw3t/+ARKfETCQ+ILE6MaYNKAk5Xu9+\
NJYuHawnW3w58FnN0mzdpViOkBT8uFUn5vHd889vtzjIxml/\
V6vp69a80Fymm7h6pE1QznLZSHo3mmuQGsmRXoF925ZE4PZBU5+APW+69a8l2pGjF+/\
wfcJTwpODHw1jDPDQE/2FckzlujaM1Ls2P5lwmVCOPsJT7bt8+zVaw+\
DsYyIMaCE3m4LmWeKaEh7CHTNmneciG9++bBcfio4j+\
F7ASIBfd96x4pQCyMF4ZhP8KmXm6k7mJghghJFL5wmJ89h2wO0UUxMxzDL8Y3zyXreFpioqfbc3C25\
WacgH/4N3JCxi8l7XNJu7QgMC+OS0XdWVv+cuwGu37aFV/\
JkNXGY3w5H3ohhx6CX6Xzauk6ekerWuujnXF1Uf9lokOd3mfq7dMi0WQ7jRdswYHZka7xae8vwL9vC\
yxxv/Vzc96z57B0l4KrmUAnuo6QFn0fRTHngJdo+\
XZ1bh8e4XfEdozOkghVOZOMs74u7Hw8q8HpSiLF2kw1IR9Q9IIIcrIs6bnfZlJlhRhRJLPD8uH55yc\
ayDiXgzPa1Z4Iy28A8IeuGJzQH6ULdiUmyL39U3EouZy4Z8n4gDExBrRX9TayPsuQKOpaBkcR4QFOv\
wRxWSY2ICpb9oASJcyIYQrJf9nG//OZiJZCqfYXqUp7FgSvNaXgS/bLAhyCmJmvO2IGtK/\
jaYjaRPKlVF7E0Xew2m2O632S6cUKzoYeSEFqS8IbeTQrdpPBXJ4WlObgbE7oxoRsTujGhGxP+\
3zHBRYxfpd/wgbhm"]]}; Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> "Power function"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max6866$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min6865$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min6865$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max6866$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$3333155$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min6865$\
3333156$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max6866$3333157$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max6866$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min6865$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$3333155$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min6865$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min6865$\
3333156$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max6866$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max6866$\
3333157$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$3333139[
                    
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    
                    Piecewise[{{
                    Rational[1, 2] 
                    BetaRegularized[
                    49/(49 + (-1.6765508926168917` + (Rational[-1, 2] 
                    2^Rational[-1, 2]) (-5000 + 
                    CalculateScan`StatisticsScanner`Private`x))^2), 
                    Rational[49, 2], 
                    Rational[
                    1, 2]], -1.6765508926168917` + (Rational[-1, 2] 
                    2^Rational[-1, 2]) (-5000 + 
                    CalculateScan`StatisticsScanner`Private`x) <= 0}}, 
                    Rational[1, 2] (1 + 
                    BetaRegularized[(
                    49 + (-1.6765508926168917` + (Rational[-1, 2] 
                    2^Rational[-1, 2]) (-5000 + 
                    CalculateScan`StatisticsScanner`Private`x))^2)^(-1) \
(-1.6765508926168917` + (Rational[-1, 2] 2^Rational[-1, 2]) (-5000 + 
                    CalculateScan`StatisticsScanner`Private`x))^2, 
                    Rational[1, 2], 
                    Rational[49, 2]])], {
                    CalculateScan`StatisticsScanner`Private`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min6865$$], 
                    (
                    Piecewise[{{
                    5000. + 3.2746609374588913` Tan[1.5040801783846716` #], # < 
                    0}}, 5000. + 
                    3.2746609374588913` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min6865$$], 
                    5000 - 21 47^Rational[-1, 2]], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min6865$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max6866$$]], \

                    (Piecewise[{{
                    5000. + 3.2746609374588913` Tan[1.5040801783846716` #], # < 
                    0}}, 5000. + 
                    3.2746609374588913` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min6865$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max6866$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min6865$$ + 
                    Rational[21, 500] 47^Rational[-1, 2], 
                    CalculateUtilities`GraphicsUtilities`Private`max6866$$]], 
                    5000 + 21 47^Rational[-1, 2]]}, Axes -> False, FrameLabel -> {
                    RawBoxes[
                    FormBox[
                    StyleBox["\[Mu]", "Label", 10, StripOnInput -> False], 
                    TraditionalForm]], 
                    RawBoxes[
                    FormBox[
                    StyleBox["\"power\"", "Label", 10, StripOnInput -> False],
                     TraditionalForm]]}, BaseStyle -> AbsoluteThickness[1], 
                    Filling -> Bottom, FillingStyle -> Directive[
                    Opacity[0.05], 
                    Hue[0.67, 0.6, 0.6]], Frame -> True, FrameStyle -> 
                    Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1], ImageSize -> 220., PlotRange -> {0, 1},
                     PerformanceGoal -> "Quality"]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min6865$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max6866$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, $CellContext`UnitNumberForm, 
                    NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$3333139]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3333139[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3333139[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    All, 2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbikw3t/+\
ARKfkcbGRySggzFpQEnK995iJ7Vw7cx29sKfB5/dJM3aVYrpAE3Jh1N9bh7fPff4cs+\
PZJT2e72evmnNJ8lJuoWrZ9YM5SyXhSAfznJFtWZSpDdw7541MTV7lMM5Jd5325qPUs3A+\
PUbfB94UnAw9LthnBlG9WRfQT5lia49I8VO7F8mXCbA2U/6Ysc+\
27uvPQzGMgJjqBJ6py1kPlWgadpDoFvWvOcgfvjl03L5peA8pscFFQnVj613rIBYGCmAYz7Bp15vph\
5gYgYEAUWunCYnz2HbA7RRTGRjOsvxjcvJ2m4LDCrTnpuHJTfrFOTDv4MbMnYxeY9L2q0dgWFhXDP6\
Lsrqn3M3wPXbtvBKnq4mDvN7x5E3MOyE6mU6X7auk2ekurUu+jlXV9VfNhrk5V2m/\
i4dMm2Ww3jVNgw6O7I1Xq29ZfjdtvAyx1s/F/\
cja756Rwm4qjlUgvssScHnUTRTHniJtk9X59bhMe5XfMfoDKlghRPZOMv74u7Hkwq8nhRirN1kA9IR\
dQ+IaE6tizhu91jGzHAKChILPD+uX16ysaxDCTizfe2ZIMw2ME/\
IuuEJzUG6UHcwyfTbHxW3ksuFS4a8HwhDM6rWiv4u1kdZcgUZy8BIYjygqddgDqukRqCCZT8oQeIcB\
ENI9ss+7pffXKwEUrWvUF3KszhwpTkLT6JfFviQisxMmzN2YOsKvraYTSRPa9VFLE0Xu83mmO43mW6\
c0GzooSSEliS8oXeTQjcp/NVJYWkO7saEbkzoxoRuTOjGhP93THAR41fpN4MxuE4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}], 
       XMLElement["states", {"count" -> "1"}, {
         XMLElement[
         "statelist", {
          "count" -> "3", "value" -> "Significance level 5%", "delimiters" -> 
           ""}, {
           XMLElement[
           "state", {
            "name" -> "Significance level 1%", "input" -> 
             "Test__Power function_Significance level 1%"}, {}], 
           XMLElement[
           "state", {
            "name" -> "Significance level 5%", "input" -> 
             "Test__Power function_Significance level 5%"}, {}], 
           XMLElement[
           "state", {
            "name" -> "Significance level 10%", "input" -> 
             "Test__Power function_Significance level 10%"}, {}]}]}]}], 
     XMLElement["subpod", {"title" -> "Test conclusions"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  StyleBox["\"null hypothesis\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], "\" is rejected\"", 
                  StyleBox["\" at \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 
                  TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1", "SRString" -> "1"]], "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" significance level\""}, 
                   "RowDefault"]}, "RowDefault"]}, {
                TemplateBox[{
                  StyleBox["\"null hypothesis\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], "\" is rejected\"", 
                  StyleBox["\" at \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 
                  TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["5", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "5", "SRString" -> "5"]], "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" significance level\""}, 
                   "RowDefault"]}, "RowDefault"]}, {
                TemplateBox[{
                  StyleBox["\"null hypothesis\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], "\" is rejected\"", 
                  StyleBox["\" at \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 
                  TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["10", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "10", "SRString" -> "10"]], "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" significance level\""}, 
                   "RowDefault"]}, "RowDefault"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             
             RowBox[{"\"(\"", "\[NoBreak]", 
               "\"assuming a simple random sample; results are exact if the \
population is normal and approximate for large samples from \
non\[Hyphen]normal populations\"", "\[NoBreak]", "\")\""}], {
             FontFamily -> "Verdana", FontSize -> 10, 
              GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
              LineIndent -> 0}, StripOnInput -> False], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Right\[Hyphen]tailed test", "input" -> 
         "Test__Right\[Hyphen]tailed test"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Two\[Hyphen]tailed test", "input" -> 
         "Test__Two\[Hyphen]tailed test"}, {}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {
    False, False, False, False, False, False, False, False, False}, True}, 
   Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
    "Formula", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.131", 
    "parsetiming" -> "0.5760000000000001", "parsetimedout" -> "false", 
    "recalculate" -> "", "id" -> 
    "MSPa617721gc42a8ic2d0acg00006ai8bd2eadbhbfec", "host" -> 
    "http://www4d.wolframalpha.com", "server" -> "39", "related" -> 
    "http://www4d.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa617821gc42a8ic2d0acg00001af93dge14ga6c0h8033132334757625844", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -6., 
    "Date" -> {2019, 5, 16, 15, 27, 20.260711`8.059229665497101}, "Line" -> 
    17, "SessionID" -> 27364551010961356374}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "t-test mu0=5000, xbar=4990, s=20, n=50"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1215., {837., 846.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Output",
 CellChangeTimes->{3.767030840554432*^9}]
}, Open  ]],

Cell["\<\
Based on the W|A output above, it looks like the filling machine needs to be \
adjusted, because the sample data indicate significantly lower fill weight.\
\>", "Text",
 CellChangeTimes->{{3.7670309188797503`*^9, 3.7670309900598*^9}}],

Cell["\<\
13.  If simultaneous measurements of electric voltage by two different types \
of voltmeter yield the differences (in volts) 0.4, -0.6, 0.2, 0.0, 1.0, 1.4, \
0.4, 1.6, can we assert at the 5% level that there is no significant \
difference in the calibration of the two types of instruments? Assume \
normality.\
\>", "Text",
 CellChangeTimes->{{3.766778613506351*^9, 3.766778698638035*^9}},
 Background->RGBColor[1, 0.9, 0.8]],

Cell["\<\
I do not understand the problem. Would it not make a difference whether I am \
measuring 110 V or 10000 V? I suppose that the normality of the sample is the \
guiding factor. If the differences between the voltmeters is close to a \
normal curve, they are probably equivalent.\
\>", "Text",
 CellChangeTimes->{{3.766940004464864*^9, 3.766940033541882*^9}, {
  3.76694038173521*^9, 3.766940382807111*^9}, {3.7670337317736807`*^9, 
  3.767033796344426*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dtest", "=", 
  RowBox[{"{", 
   RowBox[{"0.4", ",", 
    RowBox[{"-", "0.6"}], ",", "0.2", ",", "0.0", ",", "1.0", ",", "1.4", ",",
     "0.4", ",", "1.6"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.767031446765295*^9, 3.767031461882107*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.4`", ",", 
   RowBox[{"-", "0.6`"}], ",", "0.2`", ",", "0.`", ",", "1.`", ",", "1.4`", 
   ",", "0.4`", ",", "1.6`"}], "}"}]], "Output",
 CellChangeTimes->{3.767033461186542*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Mean", "[", "dtest", "]"}]], "Input",
 CellChangeTimes->{{3.76703346789857*^9, 3.7670334728437767`*^9}}],

Cell[BoxData["0.55`"], "Output",
 CellChangeTimes->{3.767033912013303*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StandardDeviation", "[", "dtest", "]"}]], "Input"],

Cell[BoxData["0.7387247699341654`"], "Output",
 CellChangeTimes->{3.767033908708557*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"voltmeter", "=", 
  RowBox[{"DistributionFitTest", "[", "dtest", "]"}]}]], "Input",
 CellChangeTimes->{{3.767031497696199*^9, 3.767031499750372*^9}, {
  3.7670330048497887`*^9, 3.7670330090394793`*^9}}],

Cell[BoxData["0.6872892787909722`"], "Output",
 CellChangeTimes->{3.767031501041143*^9, 3.7670330097707767`*^9},
 Background->RGBColor[1, 1, 0.85]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[ScriptD]", "=", 
  RowBox[{"NormalDistribution", "[", 
   RowBox[{"0.55", ",", "9"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.76703348008547*^9, 3.7670334856430264`*^9}}],

Cell[BoxData[
 RowBox[{"NormalDistribution", "[", 
  RowBox[{"0.55`", ",", "9"}], "]"}]], "Output",
 CellChangeTimes->{3.767033387428591*^9, 3.767033486817031*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"QuantilePlot", "[", 
  RowBox[{"dtest", ",", "\[ScriptD]"}], "]"}]], "Input",
 CellChangeTimes->{{3.767033435535563*^9, 3.7670334390150537`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {{
     {Hue[0.9060679774997897, 0.6, 0.6], Opacity[0], Dashing[Small], 
      LineBox[{{-35.69084143171723, -0.6}, {-12.713285861171702`, -0.6}}]}, 
     {Hue[0.9060679774997897, 0.6, 0.6], Opacity[0], Dashing[Small], 
      LineBox[{{10.6300972544905, 1.6}, {38.99084143171723, 1.6}}]}, {}, 
     {Hue[0.9060679774997897, 0.6, 0.6], Opacity[0], 
      LineBox[{{-12.713285861171702`, -0.6}, {10.6300972544905, 1.6}}]}}, {{}, 
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], 
      PointBox[{{-11.896947143905743`, -0.6}, {-6.948321794716489, 
       0.}, {-3.62336976311461, 0.2}, {-0.7978581120016419, 0.4}, {
       1.897858112001642, 0.4}, {4.723369763114612, 1.}, {8.048321794716484, 
       1.4}, {12.996947143905743`, 1.6}}]}, {}, {}}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Epilog->{{}, 
    StyleBox[
     LineBox[{{-35.69084143171723, -2.7655225382169784`}, {38.99084143171723, 
      4.272861807594458}}], 
     Directive[
      RGBColor[0.368417, 0.506779, 0.709798], 
      AbsoluteThickness[1.6], 
      Dashing[{0, Small}]], StripOnInput -> False]},
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{},
  PlotRange->{{-11.896947143905743`, 12.996947143905743`}, {-0.6, 1.6}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.767033489345086*^9}]
}, Open  ]],

Cell[TextData[{
 "The score on the probabilty which is the result of the ",
 StyleBox["DistributionFitTest", "Input"],
 " is pretty high, although I didn\[CloseCurlyQuote]t find any numerical \
guidance on making a choice. I would call the meters equivalent."
}], "Text",
 CellChangeTimes->{{3.767033814127055*^9, 3.7670338541726933`*^9}, {
  3.767033936073348*^9, 3.767033964366123*^9}, {3.767188177439735*^9, 
  3.767188215515154*^9}}],

Cell[TextData[{
 "15.  Suppose that in the past the standard deviation of weights of certain \
100.0-oz packages filled by a machine was 0.8 oz. Test the hypothesis ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["H", "0"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " : \[Sigma] = 0.8 against the alternative ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["H", "1"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " : \[Sigma] > 0.8 (an undesirable increase), using a sample of 20 packages \
with standard deviation 1.0 oz and assuming normality. Choose \[Alpha] = 5%."
}], "Text",
 CellChangeTimes->{{3.7667787323415337`*^9, 3.766778865159651*^9}},
 Background->RGBColor[1, 0.9, 0.8]],

Cell[BoxData[
 RowBox[{"Clear", "[", "\"\<Global`*\>\"", "]"}]], "Input"],

Cell[TextData[{
 "When fiddling with mean values, the ",
 StyleBox["Normal", "Input"],
 " distribution is the common one. Sometimes, as in this problem, the focus \
is on standard deviation, and I get the impression that that is where the \
ChiSquare distribution is commonly used. I don\[CloseCurlyQuote]t know if it\
\[CloseCurlyQuote]s general, but in this case it is not necessary to \
construct a ",
 StyleBox["RandomVariate", "Input"],
 " set."
}], "Text",
 CellChangeTimes->{{3.766958035623289*^9, 3.766958095779442*^9}, {
  3.766958205158559*^9, 3.7669582309576893`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"c", "=", 
  RowBox[{"critCXM", "[", 
   RowBox[{"19", ",", "0.05"}], "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"degrees", " ", "of", " ", "freedom"}], ",", " ", 
    RowBox[{"level", " ", "of", " ", "significance"}]}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.766954103167698*^9, 3.7669541479884567`*^9}, {
  3.766957534750271*^9, 3.766957539476387*^9}, {3.766958244812866*^9, 
  3.766958286995232*^9}, {3.7669583177936583`*^9, 3.766958317993894*^9}}],

Cell[BoxData["30.14`"], "Output",
 CellChangeTimes->{{3.7669541178010902`*^9, 3.766954149018003*^9}, 
   3.766957540617412*^9, 3.7669583193681717`*^9},
 Background->RGBColor[0.88, 1, 0.88]]
}, Open  ]],

Cell[BoxData[
 RowBox[{"DegreesOfFreedom", 
  SuperscriptBox[
   RowBox[{"(", 
    FractionBox["H1sigma", "H0sigma"], ")"}], "2"]}]], "Text",
 CellChangeTimes->{{3.7669575891417427`*^9, 3.766957598201756*^9}, {
  3.7669576727026*^9, 3.766957711823146*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"19", 
  SuperscriptBox[
   RowBox[{"(", 
    FractionBox["1.0", "0.8"], ")"}], "2"]}]], "Input",
 CellChangeTimes->{{3.766957720712813*^9, 3.766957748962873*^9}, {
  3.7669577796259727`*^9, 3.766957787025157*^9}}],

Cell[BoxData["29.6875`"], "Output",
 CellChangeTimes->{3.7669577519143667`*^9, 3.76695778829135*^9},
 Background->RGBColor[0.88, 1, 0.88]]
}, Open  ]],

Cell["\<\
Since the calculated formula is less than the c value, the proposed \
hypothesis is accepted. That is, the standard deviation is considered to have \
risen above 0.8.\
\>", "Text",
 CellChangeTimes->{{3.7669583642634077`*^9, 3.766958365599142*^9}, {
  3.766958518616713*^9, 3.766958576830016*^9}, {3.767030658678656*^9, 
  3.767030661398509*^9}, {3.767033999860215*^9, 3.767034007473691*^9}}],

Cell["\<\
17. Brand A gasoline was used in 16 similar automobiles under identical \
conditions. The corresponding sample of 16 values (miles per gallon) had mean \
19.6 and standard deviation 0.4. Under the same conditions, high-power brand \
B gasoline gave a sample of 16 values with mean 20.2 and standard deviation \
0.6. Is the mileage of B significantly better than that of A? Test at the 5% \
level; assume normality. First guess. Then calculate.\
\>", "Text",
 CellChangeTimes->{{3.766778924310175*^9, 3.766779092918798*^9}},
 Background->RGBColor[1, 0.9, 0.8]],

Cell["\<\
According to example 5 on p. 1084, although the number of degrees of freedom \
is the sum of the two samples, it is necessary to subtract one from each \
sample, leaving, in this case, 30 total. \
\>", "Text",
 CellChangeTimes->{{3.766960178030982*^9, 3.76696021740421*^9}, {
   3.76696030640833*^9, 3.766960326727263*^9}, 3.766960377862239*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"c", "=", 
  RowBox[{"critCVM", "[", 
   RowBox[{"30", ",", "0.05"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.766958907130715*^9, 3.766958928486288*^9}, {
  3.7669590828410187`*^9, 3.7669590864073963`*^9}, {3.766959221985448*^9, 
  3.766959223336982*^9}, {3.766959261151561*^9, 3.766959274094758*^9}, {
  3.766960330959869*^9, 3.766960331238924*^9}}],

Cell[BoxData["1.7`"], "Output",
 CellChangeTimes->{
  3.766958931159013*^9, 3.766959089268024*^9, 3.766959224299779*^9, {
   3.766959262724619*^9, 3.766959275540001*^9}, 3.766960332019348*^9},
 Background->RGBColor[0.88, 1, 0.88]]
}, Open  ]],

Cell[TextData[{
 "Numbered line (12) on p. 1085 gives the formula for ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["t", "0"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " in a combined instance such as the present\n",
 Cell[BoxData[
  RowBox[{
   SubscriptBox["t", "0"], "=", 
   RowBox[{
    SqrtBox["n"], 
    FractionBox[
     RowBox[{
      OverscriptBox["x", "_"], "-", 
      OverscriptBox["y", "_"]}], 
     SqrtBox[
      RowBox[{
       SuperscriptBox[
        SubscriptBox["s", "x"], "2"], "+", 
       SuperscriptBox[
        SubscriptBox["s", "y"], "2"]}]]]}]}]], "Input",
  CellChangeTimes->{{3.766960447045555*^9, 3.766960508224065*^9}}]
}], "Text",
 CellChangeTimes->{{3.766960384276532*^9, 3.766960418883143*^9}, {
  3.766960529439548*^9, 3.7669605310663147`*^9}}],

Cell[TextData[{
 "I see that n is not the sum of the two samples, but rather the size of one \
complete sample. Inasmuch as the procedure is supposed to allow for samples \
of different sizes, there must be a rule for choosing n when the samples are \
not the same size, but I do not know it. The calculated set-up for ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["t", "0"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", shown below, appears in the text answer."
}], "Text",
 CellChangeTimes->{{3.766961229430462*^9, 3.766961253461507*^9}, {
   3.766961306316601*^9, 3.7669613301062183`*^9}, {3.767034464905879*^9, 
   3.767034510129081*^9}, 3.767035058805163*^9, 3.767188321912794*^9, {
   3.769381236590749*^9, 3.769381296891142*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["t", "0"], "=", 
  RowBox[{
   SqrtBox["16"], 
   FractionBox[
    RowBox[{"20.2", "-", "19.6"}], 
    SqrtBox[
     RowBox[{
      SuperscriptBox[
       RowBox[{"(", "0.4", ")"}], "2"], "+", 
      SuperscriptBox[
       RowBox[{"(", "0.6", ")"}], "2"]}]]]}]}]], "Input",
 CellChangeTimes->{{3.7669605565051727`*^9, 3.766960652842058*^9}, {
  3.7669608228110113`*^9, 3.76696084014461*^9}}],

Cell[BoxData["3.328201177351363`"], "Output",
 CellChangeTimes->{3.766960661041123*^9, 3.766960842736539*^9}]
}, Open  ]],

Cell[TextData[{
 "I notice that the formula for ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["t", "0"], TraditionalForm]]],
 " above contains the sense that ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["x", "_"], TraditionalForm]]],
 " - ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["y", "_"], TraditionalForm]]],
 " in the numerator makes x the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["H", "0"], TraditionalForm]]],
 " hypothesis and y the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["H", "a"], TraditionalForm]]],
 " hypothesis. In this case ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["H", "0"], TraditionalForm]]],
 " is gasoline B. Since ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["t", "0"], TraditionalForm]]],
 " is larger than c at the 0.05 level, it means that when the alternative is \
ignored, ",
 StyleBox["B will be triumphant",
  Background->RGBColor[0.88, 1, 0.88]],
 "."
}], "Text",
 CellChangeTimes->{{3.766961022680986*^9, 3.7669611935362988`*^9}, {
  3.7670345404873047`*^9, 3.7670345411832123`*^9}}]
},
WindowSize->{1366, 843},
WindowMargins->{{1, Automatic}, {Automatic, 0}},
Magnification:>1.5 Inherited,
FrontEndVersion->"10.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (December 10, \
2015)",
StyleDefinitions->"Charter1.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[400, 13, 218, 5, 51, "Text",
 Evaluatable->False],
Cell[621, 20, 68, 1, 45, "Input"],
Cell[692, 23, 151, 2, 45, "Input"],
Cell[846, 27, 854, 17, 120, "Text"],
Cell[CellGroupData[{
Cell[1725, 48, 7191, 177, 655, "Input"],
Cell[8919, 227, 385, 8, 45, "Output"],
Cell[9307, 237, 9519, 196, 101, "Output"]
}, Open  ]],
Cell[18841, 436, 237, 7, 51, "Text"],
Cell[CellGroupData[{
Cell[19103, 447, 8567, 236, 975, "Input"],
Cell[27673, 685, 254, 5, 45, "Output"],
Cell[27930, 692, 9399, 194, 93, "Output"]
}, Open  ]],
Cell[37344, 889, 413, 8, 110, "Text"],
Cell[37760, 899, 168, 3, 45, "Input"],
Cell[37931, 904, 466, 8, 120, "Text"],
Cell[CellGroupData[{
Cell[38422, 916, 253, 6, 45, "Input"],
Cell[38678, 924, 276, 6, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[38991, 935, 167, 3, 45, "Input"],
Cell[39161, 940, 9449, 232, 94, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[48647, 1177, 204, 4, 45, "Input"],
Cell[48854, 1183, 157, 2, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[49048, 1190, 168, 3, 45, "Input"],
Cell[49219, 1195, 88, 1, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[49344, 1201, 453, 11, 45, "Input"],
Cell[49800, 1214, 58046, 939, 224, "Output"]
}, Open  ]],
Cell[107861, 2156, 976, 19, 189, "Text"],
Cell[108840, 2177, 122, 2, 45, "Input"],
Cell[108965, 2181, 197, 4, 51, "Text"],
Cell[CellGroupData[{
Cell[109187, 2189, 373, 9, 45, "Input"],
Cell[109563, 2200, 1072, 22, 180, "Output"]
}, Open  ]],
Cell[110650, 2225, 199, 4, 75, "Text"],
Cell[110852, 2231, 426, 7, 86, "Text"],
Cell[CellGroupData[{
Cell[111303, 2242, 225, 5, 45, "Input"],
Cell[111531, 2249, 188, 4, 69, "Output"]
}, Open  ]],
Cell[111734, 2256, 404, 7, 86, "Text"],
Cell[CellGroupData[{
Cell[112163, 2267, 429, 14, 99, "Input"],
Cell[112595, 2283, 312, 10, 85, "Output"]
}, Open  ]],
Cell[112922, 2296, 176, 4, 51, "Text"],
Cell[113101, 2302, 232, 5, 51, "Text"],
Cell[113336, 2309, 237, 5, 75, "Text"],
Cell[113576, 2316, 283, 8, 45, "Input"],
Cell[113862, 2326, 248, 7, 45, "Input"],
Cell[CellGroupData[{
Cell[114135, 2337, 129, 2, 45, "Input"],
Cell[114267, 2341, 73, 1, 45, "Output"]
}, Open  ]],
Cell[114355, 2345, 196, 5, 45, "Input"],
Cell[CellGroupData[{
Cell[114576, 2354, 167, 3, 45, "Input"],
Cell[114746, 2359, 9338, 227, 94, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[124121, 2591, 206, 4, 45, "Input"],
Cell[124330, 2597, 112, 1, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[124479, 2603, 234, 4, 45, "Input"],
Cell[124716, 2609, 135, 2, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[124888, 2616, 195, 4, 45, "Input"],
Cell[125086, 2622, 138, 2, 45, "Output"]
}, Open  ]],
Cell[125239, 2627, 544, 9, 120, "Text"],
Cell[CellGroupData[{
Cell[125808, 2640, 250, 5, 45, "Input"],
Cell[126061, 2647, 205, 5, 45, "Output"]
}, Open  ]],
Cell[126281, 2655, 395, 6, 120, "Text"],
Cell[CellGroupData[{
Cell[126701, 2665, 438, 8, 45, "Input"],
Cell[127142, 2675, 402, 7, 45, "Output"]
}, Open  ]],
Cell[127559, 2685, 285, 3, 51, "Text"],
Cell[CellGroupData[{
Cell[127869, 2692, 181, 4, 45, "Input"],
Cell[128053, 2698, 147, 2, 69, "Output"]
}, Open  ]],
Cell[128215, 2703, 132, 1, 51, "Text"],
Cell[128350, 2706, 279, 7, 75, "Input"],
Cell[CellGroupData[{
Cell[128654, 2717, 181, 4, 45, "Input"],
Cell[128838, 2723, 111, 1, 45, "Output"]
}, Open  ]],
Cell[128964, 2727, 282, 7, 75, "Input"],
Cell[CellGroupData[{
Cell[129271, 2738, 182, 4, 45, "Input"],
Cell[129456, 2744, 148, 2, 69, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[129641, 2751, 158, 3, 45, "Input"],
Cell[129802, 2756, 114, 1, 45, "Output"]
}, Open  ]],
Cell[129931, 2760, 535, 8, 120, "Text"],
Cell[130469, 2770, 423, 9, 86, "Text"],
Cell[130895, 2781, 126, 2, 45, "Input"],
Cell[131024, 2785, 215, 4, 86, "Text"],
Cell[CellGroupData[{
Cell[131264, 2793, 329, 6, 45, "Input"],
Cell[131596, 2801, 229, 4, 45, "Output"]
}, Open  ]],
Cell[131840, 2808, 567, 16, 47, "Text"],
Cell[CellGroupData[{
Cell[132432, 2828, 168, 4, 75, "Input"],
Cell[132603, 2834, 97, 1, 45, "Output"]
}, Open  ]],
Cell[132715, 2838, 104, 1, 51, "Text"],
Cell[CellGroupData[{
Cell[132844, 2843, 351, 10, 75, "Input"],
Cell[133198, 2855, 276, 7, 45, "Output"]
}, Open  ]],
Cell[133489, 2865, 112, 1, 51, "Text"],
Cell[CellGroupData[{
Cell[133626, 2870, 172, 4, 49, "Input"],
Cell[133801, 2876, 142, 2, 45, "Output"]
}, Open  ]],
Cell[133958, 2881, 160, 2, 51, "Text"],
Cell[CellGroupData[{
Cell[134143, 2887, 197, 4, 45, "Input"],
Cell[134343, 2893, 172, 3, 69, "Output"]
}, Open  ]],
Cell[134530, 2899, 161, 2, 51, "Text"],
Cell[CellGroupData[{
Cell[134716, 2905, 201, 4, 45, "Input"],
Cell[134920, 2911, 150, 2, 69, "Output"]
}, Open  ]],
Cell[135085, 2916, 414, 7, 120, "Text"],
Cell[135502, 2925, 478, 13, 88, "Text"],
Cell[135983, 2940, 402, 10, 111, "Text"],
Cell[136388, 2952, 276, 5, 86, "Text"],
Cell[136667, 2959, 202, 3, 51, "Text"],
Cell[136872, 2964, 960, 14, 224, "Text"],
Cell[CellGroupData[{
Cell[137857, 2982, 358, 8, 45, "Input"],
Cell[138218, 2992, 577, 10, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[138832, 3007, 203, 4, 45, "Input"],
Cell[139038, 3013, 281, 4, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[139356, 3022, 317, 8, 45, "Input"],
Cell[139676, 3032, 1298, 28, 180, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[141011, 3065, 269, 7, 45, "Input"],
Cell[141283, 3074, 1129, 22, 180, "Output"]
}, Open  ]],
Cell[142427, 3099, 134, 2, 51, "Text"],
Cell[CellGroupData[{
Cell[142586, 3105, 262, 6, 45, "Input"],
Cell[142851, 3113, 550, 9, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[143438, 3127, 206, 4, 45, "Input"],
Cell[143647, 3133, 256, 4, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[143940, 3142, 295, 8, 45, "Input"],
Cell[144238, 3152, 1258, 28, 180, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[145533, 3185, 272, 7, 45, "Input"],
Cell[145808, 3194, 1158, 23, 180, "Output"]
}, Open  ]],
Cell[146981, 3220, 428, 7, 86, "Text"],
Cell[147412, 3229, 479, 8, 120, "Text"],
Cell[CellGroupData[{
Cell[147916, 3241, 177, 3, 45, "Input"],
Cell[148096, 3246, 118627, 2288, 1667, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[266760, 5539, 177, 3, 45, "Input"],
Cell[266940, 5544, 118519, 2282, 1667, "Output"]
}, Open  ]],
Cell[385474, 7829, 229, 5, 75, "Text"],
Cell[385706, 7836, 230, 5, 51, "Text"],
Cell[CellGroupData[{
Cell[385961, 7845, 672, 18, 75, "Input"],
Cell[386636, 7865, 426, 13, 154, "Output"]
}, Open  ]],
Cell[387077, 7881, 510, 8, 179, "Text"],
Cell[387590, 7891, 73, 1, 45, "Input"],
Cell[CellGroupData[{
Cell[387688, 7896, 447, 11, 75, "Input"],
Cell[388138, 7909, 162, 3, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[388337, 7917, 129, 2, 45, "Input"],
Cell[388469, 7921, 137, 2, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[388643, 7928, 318, 8, 45, "Input"],
Cell[388964, 7938, 1052, 21, 184, "Output"]
}, Open  ]],
Cell[390031, 7962, 332, 6, 86, "Text"],
Cell[CellGroupData[{
Cell[390388, 7972, 179, 3, 45, "Input"],
Cell[390570, 7977, 119780, 2308, 1707, "Output"]
}, Open  ]],
Cell[510365, 10288, 244, 4, 86, "Text"],
Cell[510612, 10294, 437, 8, 144, "Text"],
Cell[511052, 10304, 465, 8, 120, "Text"],
Cell[CellGroupData[{
Cell[511542, 10316, 267, 6, 45, "Input"],
Cell[511812, 10324, 220, 5, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[512069, 10334, 128, 2, 45, "Input"],
Cell[512200, 10338, 74, 1, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[512311, 10344, 74, 1, 45, "Input"],
Cell[512388, 10347, 88, 1, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[512513, 10353, 226, 4, 45, "Input"],
Cell[512742, 10359, 147, 2, 69, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[512926, 10366, 197, 4, 45, "Input"],
Cell[513126, 10372, 163, 3, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[513326, 10380, 169, 3, 45, "Input"],
Cell[513498, 10385, 1828, 42, 356, "Output"]
}, Open  ]],
Cell[515341, 10430, 437, 8, 86, "Text"],
Cell[515781, 10440, 699, 16, 146, "Text"],
Cell[516483, 10458, 73, 1, 45, "Input"],
Cell[516559, 10461, 579, 12, 120, "Text"],
Cell[CellGroupData[{
Cell[517163, 10477, 488, 10, 45, "Input"],
Cell[517654, 10489, 189, 3, 69, "Output"]
}, Open  ]],
Cell[517858, 10495, 256, 6, 78, "Text"],
Cell[CellGroupData[{
Cell[518139, 10505, 237, 6, 78, "Input"],
Cell[518379, 10513, 138, 2, 69, "Output"]
}, Open  ]],
Cell[518532, 10518, 402, 7, 86, "Text"],
Cell[518937, 10527, 569, 9, 179, "Text"],
Cell[519509, 10538, 355, 6, 86, "Text"],
Cell[CellGroupData[{
Cell[519889, 10548, 374, 7, 45, "Input"],
Cell[520266, 10557, 230, 4, 69, "Output"]
}, Open  ]],
Cell[520511, 10564, 791, 25, 141, "Text"],
Cell[521305, 10591, 747, 14, 122, "Text"],
Cell[CellGroupData[{
Cell[522077, 10609, 430, 14, 98, "Input"],
Cell[522510, 10625, 109, 1, 45, "Output"]
}, Open  ]],
Cell[522634, 10629, 1030, 36, 124, "Text"]
}
]
*)

