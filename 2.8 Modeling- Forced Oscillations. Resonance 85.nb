(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[         0,          0]
NotebookDataLength[    310020,       6934]
NotebookOptionsPosition[    301467,       6662]
NotebookOutlinePosition[    301855,       6679]
CellTagsIndexPosition[    301812,       6676]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell["\<\
3 - 7 Steady-state solutions
Find the steady-state motion of the mass-spring system modeled by the ODE.\
\>", "Text",
 CellChangeTimes->{{3.7680521957761602`*^9, 3.768052232724477*^9}, {
  3.769509403247651*^9, 3.7695094061941566`*^9}}],

Cell["3.  y'' + 6 y' + 8 y = 42.5 Cos[2 t]", "Text",
 CellChangeTimes->{{3.7680522423085003`*^9, 3.768052275339343*^9}},
 Background->RGBColor[1, 0.9, 0.8]],

Cell[BoxData[
 RowBox[{"ClearAll", "[", "\"\<Global`*\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.673370671918249*^9, 3.673370673714575*^9}, 
   3.7680523135624523`*^9, {3.772894504126725*^9, 3.772894504611833*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"hog", "=", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"y", "''"}], "[", "t", "]"}], "+", 
    RowBox[{"6", " ", 
     RowBox[{
      RowBox[{"y", "'"}], "[", "t", "]"}]}], "+", 
    RowBox[{"8", " ", 
     RowBox[{"y", "[", "t", "]"}]}]}], "\[Equal]", 
   RowBox[{"42.5", " ", 
    RowBox[{"Cos", "[", 
     RowBox[{"2", " ", "t"}], "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{"nar", "=", 
  RowBox[{"DSolve", "[", 
   RowBox[{"hog", ",", 
    RowBox[{"y", "[", "t", "]"}], ",", "t"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.673370678718192*^9, 3.673370750951927*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"8", " ", 
    RowBox[{"y", "[", "t", "]"}]}], "+", 
   RowBox[{"6", " ", 
    RowBox[{
     SuperscriptBox["y", "\[Prime]",
      MultilineFunction->None], "[", "t", "]"}]}], "+", 
   RowBox[{
    SuperscriptBox["y", "\[Prime]\[Prime]",
     MultilineFunction->None], "[", "t", "]"}]}], "\[Equal]", 
  RowBox[{"42.5`", " ", 
   RowBox[{"Cos", "[", 
    RowBox[{"2", " ", "t"}], "]"}]}]}]], "Output",
 CellChangeTimes->{{3.673370735273898*^9, 3.6733707521502867`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "t", "]"}], "\[Rule]", 
    RowBox[{
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{"-", "4.`"}], " ", "t"}]], " ", 
      RowBox[{"C", "[", "1", "]"}]}], "+", 
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{"-", "2.`"}], " ", "t"}]], " ", 
      RowBox[{"C", "[", "2", "]"}]}], "+", 
     RowBox[{"1.0624999999999991`", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"1.`", " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"2.`", " ", "t"}], "]"}]}], "+", 
        RowBox[{"3.000000000000002`", " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"2.`", " ", "t"}], "]"}]}]}], ")"}]}]}]}], "}"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.673370735273898*^9, 3.673370752224491*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Expand", "[", 
  RowBox[{"1.0624999999999991`", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"1.`", " ", 
      RowBox[{"Cos", "[", 
       RowBox[{"2.`", " ", "t"}], "]"}]}], "+", 
     RowBox[{"3.000000000000002`", " ", 
      RowBox[{"Sin", "[", 
       RowBox[{"2.`", " ", "t"}], "]"}]}]}], ")"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6733709676993856`*^9, 3.6733709814731207`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"1.0624999999999991`", " ", 
   RowBox[{"Cos", "[", 
    RowBox[{"2.`", " ", "t"}], "]"}]}], "+", 
  RowBox[{"3.1874999999999996`", " ", 
   RowBox[{"Sin", "[", 
    RowBox[{"2.`", " ", "t"}], "]"}]}]}]], "Output",
 CellChangeTimes->{3.673370982317535*^9},
 Background->RGBColor[1, 1, 0.85]]
}, Open  ]],

Cell["1. Above: one section of \[OpenCurlyQuote]nar\[CloseCurlyQuote] is \
expanded \[OpenCurlyQuote]by hand\[CloseCurlyQuote].", "Text",
 CellChangeTimes->{{3.673370997534595*^9, 3.673371036181592*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nar", "/.", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"1.0624999999999991`", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"1.`", " ", 
        RowBox[{"Cos", "[", 
         RowBox[{"2.`", " ", "t"}], "]"}]}], "+", 
       RowBox[{"3.000000000000002`", " ", 
        RowBox[{"Sin", "[", 
         RowBox[{"2.`", " ", "t"}], "]"}]}]}], ")"}]}], ")"}], "->", 
   RowBox[{
    RowBox[{"1.0624999999999991`", " ", 
     RowBox[{"Cos", "[", 
      RowBox[{"2.`", " ", "t"}], "]"}]}], "+", 
    RowBox[{"3.1874999999999996`", " ", 
     RowBox[{"Sin", "[", 
      RowBox[{"2.`", " ", "t"}], "]"}]}]}]}]}]], "Input",
 CellChangeTimes->{{3.673371045928371*^9, 3.6733710470462093`*^9}, {
  3.673371085575191*^9, 3.673371110220932*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "t", "]"}], "\[Rule]", 
    RowBox[{
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{"-", "4.`"}], " ", "t"}]], " ", 
      RowBox[{"C", "[", "1", "]"}]}], "+", 
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{"-", "2.`"}], " ", "t"}]], " ", 
      RowBox[{"C", "[", "2", "]"}]}], "+", 
     RowBox[{"1.0624999999999991`", " ", 
      RowBox[{"Cos", "[", 
       RowBox[{"2.`", " ", "t"}], "]"}]}], "+", 
     RowBox[{"3.1874999999999996`", " ", 
      RowBox[{"Sin", "[", 
       RowBox[{"2.`", " ", "t"}], "]"}]}]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.673371112373713*^9},
 Background->RGBColor[0.88, 1, 0.88]]
}, Open  ]],

Cell["\<\
2. Above: expanded section reinserted into \[OpenCurlyQuote]nar\
\[CloseCurlyQuote]. This version matches the text answer, if the two constant \
coefficients C[1] and C[2] assume a value of zero.\
\>", "Text",
 CellChangeTimes->{{3.673371135419149*^9, 3.6733712193992863`*^9}, {
  3.673371669167364*^9, 3.6733716778148193`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"5.", "  ", 
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox["D", "2"], "+", "D", "+", 
     RowBox[{"4.25", "I"}]}], ")"}], "y"}], "=", 
  RowBox[{"22.1", 
   RowBox[{"Cos", "[", "4.5", "]"}], "t"}]}]], "Text",
 CellChangeTimes->{{3.76805240840725*^9, 3.768052451463763*^9}},
 Background->RGBColor[1, 0.9, 0.8]],

Cell[BoxData[
 RowBox[{"ClearAll", "[", "\"\<Global`*\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.6733716926512938`*^9, 3.673371694696167*^9}, 
   3.768052320073894*^9, {3.772894512156912*^9, 3.772894512635419*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"opa", "=", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"y", "''"}], "[", "t", "]"}], "+", 
    RowBox[{
     RowBox[{"y", "'"}], "[", "t", "]"}], "+", 
    RowBox[{"4.25", " ", 
     RowBox[{"y", "[", "t", "]"}]}]}], "\[Equal]", 
   RowBox[{"22.1", " ", 
    RowBox[{"Cos", "[", 
     RowBox[{"4.5", " ", "t"}], "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{"erb", "=", 
  RowBox[{"DSolve", "[", 
   RowBox[{"opa", ",", 
    RowBox[{"y", "[", "t", "]"}], ",", "t"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.673371703738901*^9, 3.6733717790754547`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"4.25`", " ", 
    RowBox[{"y", "[", "t", "]"}]}], "+", 
   RowBox[{
    SuperscriptBox["y", "\[Prime]",
     MultilineFunction->None], "[", "t", "]"}], "+", 
   RowBox[{
    SuperscriptBox["y", "\[Prime]\[Prime]",
     MultilineFunction->None], "[", "t", "]"}]}], "\[Equal]", 
  RowBox[{"22.1`", " ", 
   RowBox[{"Cos", "[", 
    RowBox[{"4.5`", " ", "t"}], "]"}]}]}]], "Output",
 CellChangeTimes->{{3.6733717706677427`*^9, 3.673371780170351*^9}, 
   3.673371891353875*^9, 3.673372563006188*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "t", "]"}], "\[Rule]", 
    RowBox[{
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{"-", "0.5`"}], " ", "t"}]], " ", 
      RowBox[{"C", "[", "2", "]"}], " ", 
      RowBox[{"Cos", "[", 
       RowBox[{"2.`", " ", "t"}], "]"}]}], "+", 
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{"-", "0.5`"}], " ", "t"}]], " ", 
      RowBox[{"C", "[", "1", "]"}], " ", 
      RowBox[{"Sin", "[", 
       RowBox[{"2.`", " ", "t"}], "]"}]}], "-", 
     RowBox[{"2.125`", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"1.`", " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"2.`", " ", "t"}], "]"}], " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"2.5`", " ", "t"}], "]"}]}], "-", 
        RowBox[{"0.39764705882352946`", " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"2.`", " ", "t"}], "]"}], " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"6.5`", " ", "t"}], "]"}]}], "-", 
        RowBox[{"0.19999999999999998`", " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"2.5`", " ", "t"}], "]"}], " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"2.`", " ", "t"}], "]"}]}], "-", 
        RowBox[{"0.030588235294117656`", " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"6.5`", " ", "t"}], "]"}], " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"2.`", " ", "t"}], "]"}]}], "-", 
        RowBox[{"0.19999999999999998`", " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"2.`", " ", "t"}], "]"}], " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"2.5`", " ", "t"}], "]"}]}], "-", 
        RowBox[{"1.`", " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"2.`", " ", "t"}], "]"}], " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"2.5`", " ", "t"}], "]"}]}], "+", 
        RowBox[{"0.030588235294117656`", " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"2.`", " ", "t"}], "]"}], " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"6.5`", " ", "t"}], "]"}]}], "-", 
        RowBox[{"0.3976470588235295`", " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"2.`", " ", "t"}], "]"}], " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"6.5`", " ", "t"}], "]"}]}]}], ")"}]}]}]}], "}"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.6733717706677427`*^9, 3.673371780170351*^9}, 
   3.673371891353875*^9, 3.673372563179817*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"latch", "=", 
  RowBox[{"TrigReduce", "[", "erb", "]"}]}]], "Input",
 CellChangeTimes->{{3.673371999543655*^9, 3.673372004075013*^9}, {
  3.673372215517927*^9, 3.673372218307601*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "t", "]"}], "\[Rule]", 
    RowBox[{
     RowBox[{"-", "1.2799999999999998`"}], " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{
       RowBox[{"-", "0.5`"}], " ", "t"}]], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "0.7812500000000001`"}], " ", 
        RowBox[{"C", "[", "2", "]"}], " ", 
        RowBox[{"Cos", "[", 
         RowBox[{"2.`", " ", "t"}], "]"}]}], "+", 
       RowBox[{"1.`", " ", 
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"0.5`", " ", "t"}]], " ", 
        RowBox[{"Cos", "[", 
         RowBox[{"4.5`", " ", "t"}], "]"}]}], "+", 
       RowBox[{"4.6078592330633945`*^-17", " ", 
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"0.5`", " ", "t"}]], " ", 
        RowBox[{"Cos", "[", 
         RowBox[{"8.5`", " ", "t"}], "]"}]}], "-", 
       RowBox[{"0.7812500000000001`", " ", 
        RowBox[{"C", "[", "1", "]"}], " ", 
        RowBox[{"Sin", "[", 
         RowBox[{"2.`", " ", "t"}], "]"}]}], "-", 
       RowBox[{"0.28125000000000006`", " ", 
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"0.5`", " ", "t"}]], " ", 
        RowBox[{"Sin", "[", 
         RowBox[{"4.5`", " ", "t"}], "]"}]}]}], ")"}]}]}], "}"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.6733720048657427`*^9, 3.673372219380774*^9, 
  3.673372567381775*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", "latch", "]"}]], "Input",
 CellChangeTimes->{{3.6733720881082497`*^9, 3.673372089872089*^9}, {
  3.6733722223474083`*^9, 3.673372226643313*^9}, {3.6733722817870617`*^9, 
  3.6733722913533077`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "t", "]"}], "\[Rule]", 
    RowBox[{
     RowBox[{"1.`", " ", 
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{"-", "0.5`"}], " ", "t"}]], " ", 
      RowBox[{"C", "[", "2", "]"}], " ", 
      RowBox[{"Cos", "[", 
       RowBox[{"2.`", " ", "t"}], "]"}]}], "-", 
     RowBox[{"1.2799999999999998`", " ", 
      RowBox[{"Cos", "[", 
       RowBox[{"4.5`", " ", "t"}], "]"}]}], "-", 
     RowBox[{"5.898059818321144`*^-17", " ", 
      RowBox[{"Cos", "[", 
       RowBox[{"8.5`", " ", "t"}], "]"}]}], "+", 
     RowBox[{"1.`", " ", 
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{"-", "0.5`"}], " ", "t"}]], " ", 
      RowBox[{"C", "[", "1", "]"}], " ", 
      RowBox[{"Sin", "[", 
       RowBox[{"2.`", " ", "t"}], "]"}]}], "+", 
     RowBox[{"0.36000000000000004`", " ", 
      RowBox[{"Sin", "[", 
       RowBox[{"4.5`", " ", "t"}], "]"}]}]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.673372570637693*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"redondo", "=", 
  RowBox[{"Simplify", "[", 
   RowBox[{"Chop", "[", 
    RowBox[{"latch", ",", 
     RowBox[{"10", "^", 
      RowBox[{"-", "16"}]}]}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.673372401417859*^9, 3.67337243589987*^9}, {
  3.673372603159709*^9, 3.673372620765408*^9}, {3.6733726566378117`*^9, 
  3.673372661613242*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "t", "]"}], "\[Rule]", 
    RowBox[{
     RowBox[{"1.`", " ", 
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{"-", "0.5`"}], " ", "t"}]], " ", 
      RowBox[{"C", "[", "2", "]"}], " ", 
      RowBox[{"Cos", "[", 
       RowBox[{"2.`", " ", "t"}], "]"}]}], "-", 
     RowBox[{"1.2799999999999998`", " ", 
      RowBox[{"Cos", "[", 
       RowBox[{"4.5`", " ", "t"}], "]"}]}], "+", 
     RowBox[{"1.`", " ", 
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{"-", "0.5`"}], " ", "t"}]], " ", 
      RowBox[{"C", "[", "1", "]"}], " ", 
      RowBox[{"Sin", "[", 
       RowBox[{"2.`", " ", "t"}], "]"}]}], "+", 
     RowBox[{"0.36000000000000004`", " ", 
      RowBox[{"Sin", "[", 
       RowBox[{"4.5`", " ", "t"}], "]"}]}]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.6733724378283997`*^9, 3.673372485522889*^9, 
  3.673372587223384*^9, 3.673372621369824*^9, 3.673372662386232*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"narv", "=", 
  RowBox[{"Simplify", "[", 
   RowBox[{"redondo", "/.", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"C", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{"C", "[", "2", "]"}], "\[Rule]", "0"}]}], "}"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.673372689606822*^9, 3.673372718962042*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "t", "]"}], "\[Rule]", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "1.2799999999999998`"}], " ", 
      RowBox[{"Cos", "[", 
       RowBox[{"4.5`", " ", "t"}], "]"}]}], "+", 
     RowBox[{"0.36000000000000004`", " ", 
      RowBox[{"Sin", "[", 
       RowBox[{"4.5`", " ", "t"}], "]"}]}]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.6733727198608027`*^9},
 Background->RGBColor[0.88, 1, 0.88]]
}, Open  ]],

Cell["1. The above result matches the text answer.", "Text",
 CellChangeTimes->{{3.673372766513117*^9, 3.67337278056758*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"7.", "  ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"4", 
      SuperscriptBox["D", "2"]}], "+", 
     RowBox[{"12", "D"}], "+", 
     RowBox[{"9", "I"}]}], ")"}], "y"}], "=", 
  RowBox[{"225", "-", 
   RowBox[{"75", 
    RowBox[{"Sin", "[", 
     RowBox[{"3", "t"}], "]"}]}]}]}]], "Text",
 CellChangeTimes->{{3.768052473401148*^9, 3.768052513739949*^9}},
 Background->RGBColor[1, 0.9, 0.8]],

Cell[BoxData[
 RowBox[{"ClearAll", "[", "\"\<Global`*\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.6733728690168877`*^9, 3.673372870869987*^9}, 
   3.768052328624366*^9, {3.772894519356859*^9, 3.772894519835227*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"halli", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"4", " ", 
     RowBox[{
      RowBox[{"y", "''"}], "[", "t", "]"}]}], "+", 
    RowBox[{"12", " ", 
     RowBox[{
      RowBox[{"y", "'"}], "[", "t", "]"}]}], "+", 
    RowBox[{"9", " ", 
     RowBox[{"y", "[", "t", "]"}]}]}], "\[Equal]", 
   RowBox[{"225", "-", 
    RowBox[{"75", " ", 
     RowBox[{"Sin", "[", 
      RowBox[{"3", " ", "t"}], "]"}]}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{"wan", "=", 
  RowBox[{"DSolve", "[", 
   RowBox[{"halli", ",", 
    RowBox[{"y", "[", "t", "]"}], ",", "t"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.673372987046158*^9, 3.6733730558462257`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"9", " ", 
    RowBox[{"y", "[", "t", "]"}]}], "+", 
   RowBox[{"12", " ", 
    RowBox[{
     SuperscriptBox["y", "\[Prime]",
      MultilineFunction->None], "[", "t", "]"}]}], "+", 
   RowBox[{"4", " ", 
    RowBox[{
     SuperscriptBox["y", "\[Prime]\[Prime]",
      MultilineFunction->None], "[", "t", "]"}]}]}], "\[Equal]", 
  RowBox[{"225", "-", 
   RowBox[{"75", " ", 
    RowBox[{"Sin", "[", 
     RowBox[{"3", " ", "t"}], "]"}]}]}]}]], "Output",
 CellChangeTimes->{3.673373057655457*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "t", "]"}], "\[Rule]", 
    RowBox[{
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "3"}], " ", "t"}], "/", "2"}]], " ", 
      RowBox[{"C", "[", "1", "]"}]}], "+", 
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "3"}], " ", "t"}], "/", "2"}]], " ", "t", " ", 
      RowBox[{"C", "[", "2", "]"}]}], "+", 
     RowBox[{
      FractionBox["1", "3"], " ", 
      RowBox[{"(", 
       RowBox[{"75", "+", 
        RowBox[{"4", " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"3", " ", "t"}], "]"}]}], "+", 
        RowBox[{"3", " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"3", " ", "t"}], "]"}]}]}], ")"}]}]}]}], "}"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.6733730577882853`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", "wan", "]"}]], "Input",
 CellChangeTimes->{{3.673373131928226*^9, 3.6733731380825577`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "t", "]"}], "\[Rule]", 
    RowBox[{"25", "+", 
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "3"}], " ", "t"}], "/", "2"}]], " ", 
      RowBox[{"C", "[", "1", "]"}]}], "+", 
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "3"}], " ", "t"}], "/", "2"}]], " ", "t", " ", 
      RowBox[{"C", "[", "2", "]"}]}], "+", 
     RowBox[{
      FractionBox["4", "3"], " ", 
      RowBox[{"Cos", "[", 
       RowBox[{"3", " ", "t"}], "]"}]}], "+", 
     RowBox[{"Sin", "[", 
      RowBox[{"3", " ", "t"}], "]"}]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.673373139045874*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sz", "=", 
  RowBox[{"Simplify", "[", 
   RowBox[{"wan", "/.", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"C", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{"C", "[", "2", "]"}], "\[Rule]", "0"}]}], "}"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.673373151207691*^9, 3.673373207617927*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "t", "]"}], "\[Rule]", 
    RowBox[{"25", "+", 
     RowBox[{
      FractionBox["4", "3"], " ", 
      RowBox[{"Cos", "[", 
       RowBox[{"3", " ", "t"}], "]"}]}], "+", 
     RowBox[{"Sin", "[", 
      RowBox[{"3", " ", "t"}], "]"}]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.673373181487268*^9, 3.673373208106895*^9}},
 Background->RGBColor[0.88, 1, 0.88]]
}, Open  ]],

Cell["1. The above result matches the text answer.", "Text",
 CellChangeTimes->{{3.673373226815299*^9, 3.673373236663054*^9}}],

Cell["\<\
8 - 15 Transient solutions
Find the transient motion of the mass-spring system modeled by the ODE. \
\>", "Text",
 CellChangeTimes->{{3.76805254372171*^9, 3.768052572494766*^9}},
 Background->RGBColor[
  0.9600061036087587, 0.9600061036087587, 0.9600061036087587]],

Cell["9.  y'' + 3 y' + 3.25 y = 3 Cos[t] - 1.5 Sin[t]", "Text",
 CellChangeTimes->{{3.7680525869232903`*^9, 3.768052618925707*^9}},
 Background->RGBColor[1, 0.9, 0.8]],

Cell[BoxData[
 RowBox[{"ClearAll", "[", "\"\<Global`*\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.67337340337287*^9, 3.6733734050579777`*^9}, 
   3.768052337184812*^9, {3.772894526516268*^9, 3.772894527034855*^9}}],

Cell[TextData[{
 "I ran across a perfect way to do the method of undetermined coefficients in \
",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", for problems like this, at ",
 StyleBox["https://mathematica.stackexchange.com/questions/159382/using-the-\
method-of-undetermined-coefficients",
  FontSize->14,
  FontSlant->"Italic"],
 ", response of Nasser."
}], "Text",
 CellChangeTimes->{{3.768070334350574*^9, 3.768070423991704*^9}, {
   3.768071782952083*^9, 3.768071783294709*^9}, 3.768072567454463*^9, {
   3.7683305864688883`*^9, 3.768330589385577*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "returns", " ", "homogeneous", " ", "and", " ", "particular", " ", 
    "solutions"}], "*)"}], 
  RowBox[{
   RowBox[{
    RowBox[{"hAndp", "[", 
     RowBox[{"odeH_", ",", "rhs_", ",", "y_", ",", "x_"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "wronskian", ",", "u1", ",", "u2", ",", "solH", ",", "y1", ",", "y2", 
        ",", "leadingC"}], "}"}], ",", 
      RowBox[{
       RowBox[{"leadingC", "=", 
        RowBox[{"Cases", "[", 
         RowBox[{"odeH", ",", 
          RowBox[{
           RowBox[{"c_", " ", 
            RowBox[{
             RowBox[{"y", "''"}], "[", "x", "]"}]}], "\[RuleDelayed]", 
           "c"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"leadingC", "=", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"leadingC", "===", 
           RowBox[{"{", "}"}]}], ",", "1", ",", 
          RowBox[{"First", "@", "leadingC"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"solH", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"y", "[", "x", "]"}], "/.", 
          RowBox[{"First", "@", 
           RowBox[{"DSolve", "[", 
            RowBox[{
             RowBox[{"odeH", "\[Equal]", "0"}], ",", 
             RowBox[{"y", "[", "x", "]"}], ",", "x"}], "]"}]}]}], ")"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"y1", ",", "y2"}], "}"}], "=", 
        RowBox[{"solH", "/.", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"C", "[", "1", "]"}], " ", "y1_"}], "+", 
           RowBox[{
            RowBox[{"C", "[", "2", "]"}], " ", "y2_"}]}], "\[RuleDelayed]", 
          RowBox[{"{", 
           RowBox[{"y1", ",", "y2"}], "}"}]}]}]}], ";", 
       RowBox[{"(*", 
        RowBox[{"basis", " ", "solutions"}], "*)"}], 
       RowBox[{"wronskian", "=", 
        RowBox[{"Det", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"y1", ",", "y2"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"D", "[", 
              RowBox[{"y1", ",", "x"}], "]"}], ",", 
             RowBox[{"D", "[", 
              RowBox[{"y2", ",", "x"}], "]"}]}], "}"}]}], "}"}], "]"}]}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"u1", "=", 
        RowBox[{"-", 
         RowBox[{"Integrate", "[", 
          RowBox[{
           RowBox[{"y2", " ", 
            RowBox[{"rhs", "/", 
             RowBox[{"(", 
              RowBox[{"leadingC", "*", "wronskian"}], ")"}]}]}], ",", "x"}], 
          "]"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"u2", "=", 
        RowBox[{"Integrate", "[", 
         RowBox[{
          RowBox[{"y1", " ", 
           RowBox[{"rhs", "/", 
            RowBox[{"(", 
             RowBox[{"leadingC", "*", "wronskian"}], ")"}]}]}], ",", "x"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"solH", ",", 
         RowBox[{"Simplify", "[", 
          RowBox[{
           RowBox[{"y1", " ", "u1"}], "+", 
           RowBox[{"y2", " ", "u2"}]}], "]"}]}], "}"}]}]}], "]"}]}], 
   ";"}]}]], "Input",
 CellChangeTimes->{{3.7680695938252974`*^9, 3.768069600919635*^9}, {
  3.768069753752782*^9, 3.768069776574359*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"odeH", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"y", "''"}], "[", "t", "]"}], "+", 
    RowBox[{"3.", " ", 
     RowBox[{
      RowBox[{"y", "'"}], "[", "t", "]"}]}], "+", 
    RowBox[{"3.25", " ", 
     RowBox[{"y", "[", "t", "]"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rhs", "=", 
   RowBox[{
    RowBox[{"3.", " ", 
     RowBox[{"Cos", "[", "t", "]"}]}], "-", 
    RowBox[{"1.5", " ", 
     RowBox[{"Sin", "[", "t", "]"}]}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.76806990098234*^9, 3.768069947472186*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"yh", ",", "yp"}], "}"}], "=", 
  RowBox[{"hAndp", "[", 
   RowBox[{"odeH", ",", "rhs", ",", "y", ",", "t"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.768069642574399*^9, 3.7680696760643587`*^9}, 
   3.76806977962119*^9, {3.7680699617756643`*^9, 3.768069966799242*^9}, {
   3.768070003868896*^9, 3.76807000404329*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{
       RowBox[{"-", "1.5`"}], " ", "t"}]], " ", 
     RowBox[{"C", "[", "2", "]"}], " ", 
     RowBox[{"Cos", "[", 
      RowBox[{"1.`", " ", "t"}], "]"}]}], "+", 
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{
       RowBox[{"-", "1.5`"}], " ", "t"}]], " ", 
     RowBox[{"C", "[", "1", "]"}], " ", 
     RowBox[{"Sin", "[", 
      RowBox[{"1.`", " ", "t"}], "]"}]}]}], ",", 
   RowBox[{
    RowBox[{"0.30000000000000004`", " ", 
     RowBox[{"Cos", "[", "t", "]"}]}], "+", 
    RowBox[{"0.5`", " ", 
     RowBox[{"Cos", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"1.`", "\[VeryThinSpace]", "+", 
         RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], ")"}], " ", "t"}], "]"}]}], 
    "-", 
    RowBox[{"0.6000000000000001`", " ", 
     RowBox[{"Sin", "[", "t", "]"}]}], "+", 
    RowBox[{"1.`", " ", 
     RowBox[{"Sin", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"1.`", "\[VeryThinSpace]", "+", 
         RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], ")"}], " ", "t"}], 
      "]"}]}]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.768069680366008*^9, {3.768069781364996*^9, 3.7680697965104647`*^9}, 
   3.768069968026638*^9, 3.7680700063679113`*^9, 3.7680728758147793`*^9, 
   3.768073137320141*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fullSolution", "=", 
  RowBox[{"yh", "+", "yp"}]}]], "Input",
 CellChangeTimes->{{3.7680707412692757`*^9, 3.768070741279111*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"0.30000000000000004`", " ", 
   RowBox[{"Cos", "[", "t", "]"}]}], "+", 
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"-", "1.5`"}], " ", "t"}]], " ", 
   RowBox[{"C", "[", "2", "]"}], " ", 
   RowBox[{"Cos", "[", 
    RowBox[{"1.`", " ", "t"}], "]"}]}], "+", 
  RowBox[{"0.5`", " ", 
   RowBox[{"Cos", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"1.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], ")"}], " ", "t"}], "]"}]}], 
  "-", 
  RowBox[{"0.6000000000000001`", " ", 
   RowBox[{"Sin", "[", "t", "]"}]}], "+", 
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"-", "1.5`"}], " ", "t"}]], " ", 
   RowBox[{"C", "[", "1", "]"}], " ", 
   RowBox[{"Sin", "[", 
    RowBox[{"1.`", " ", "t"}], "]"}]}], "+", 
  RowBox[{"1.`", " ", 
   RowBox[{"Sin", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"1.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], ")"}], " ", "t"}], 
    "]"}]}]}]], "Output",
 CellChangeTimes->{3.768070743811781*^9, 3.768072879088379*^9, 
  3.768073141681219*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"colsol", "=", 
  RowBox[{"Collect", "[", 
   RowBox[{"fullSolution", ",", 
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{
      RowBox[{"-", "1.5"}], "t"}]]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7680707665821743`*^9, 3.768070797071508*^9}, {
  3.768070942318181*^9, 3.7680709454378767`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"0.30000000000000004`", " ", 
   RowBox[{"Cos", "[", "t", "]"}]}], "+", 
  RowBox[{"0.5`", " ", 
   RowBox[{"Cos", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"1.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], ")"}], " ", "t"}], "]"}]}], 
  "-", 
  RowBox[{"0.6000000000000001`", " ", 
   RowBox[{"Sin", "[", "t", "]"}]}], "+", 
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"-", "1.5`"}], " ", "t"}]], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"C", "[", "2", "]"}], " ", 
      RowBox[{"Cos", "[", 
       RowBox[{"1.`", " ", "t"}], "]"}]}], "+", 
     RowBox[{
      RowBox[{"C", "[", "1", "]"}], " ", 
      RowBox[{"Sin", "[", 
       RowBox[{"1.`", " ", "t"}], "]"}]}]}], ")"}]}], "+", 
  RowBox[{"1.`", " ", 
   RowBox[{"Sin", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"1.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], ")"}], " ", "t"}], 
    "]"}]}]}]], "Output",
 CellChangeTimes->{{3.7680707870300493`*^9, 3.7680707986718082`*^9}, 
   3.768070946560926*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"colsolSH", "=", 
  RowBox[{
   RowBox[{"0.8", 
    RowBox[{"Cos", "[", "t", "]"}]}], "+", 
   RowBox[{"0.4", 
    RowBox[{"Sin", "[", "t", "]"}]}], "+", 
   RowBox[{
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{
      RowBox[{"-", "1.5"}], "t"}]], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"C", "[", "2", "]"}], 
       RowBox[{"Cos", "[", "t", "]"}]}], "+", 
      RowBox[{
       RowBox[{"C", "[", "1", "]"}], 
       RowBox[{"Sin", "[", "t", "]"}]}]}], ")"}]}]}]}]], "Input",
 CellChangeTimes->{{3.7680714376914263`*^9, 3.7680715196321983`*^9}, {
  3.768071868131048*^9, 3.768071876536742*^9}},
 Background->RGBColor[0.88, 1, 0.88]],

Cell[BoxData[
 RowBox[{
  RowBox[{"0.8`", " ", 
   RowBox[{"Cos", "[", "t", "]"}]}], "+", 
  RowBox[{"0.4`", " ", 
   RowBox[{"Sin", "[", "t", "]"}]}], "+", 
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"-", "1.5`"}], " ", "t"}]], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"C", "[", "2", "]"}], " ", 
      RowBox[{"Cos", "[", "t", "]"}]}], "+", 
     RowBox[{
      RowBox[{"C", "[", "1", "]"}], " ", 
      RowBox[{"Sin", "[", "t", "]"}]}]}], ")"}]}]}]], "Output",
 CellChangeTimes->{3.768071568160001*^9, 3.7680719058095083`*^9, 
  3.768072883422681*^9, 3.768073147796977*^9}]
}, Open  ]],

Cell["\<\
The solution in green above matches the answer in the text. However, I have \
not been successful so far in checking the answer through differentiation and \
substitution. Whatever problem the following crude attempt has, it is a big \
one.\
\>", "Text",
 CellChangeTimes->{{3.673391345619032*^9, 3.673391362985661*^9}, {
  3.6733913942723837`*^9, 3.673391512716206*^9}, {3.768071698725835*^9, 
  3.7680717469530907`*^9}, {3.768071916455203*^9, 3.768071918621625*^9}, {
  3.768074036103689*^9, 3.768074055133636*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"cls", "[", "t_", "]"}], "=", 
  RowBox[{
   RowBox[{"0.8", 
    RowBox[{"Cos", "[", "t", "]"}]}], "+", 
   RowBox[{"0.4", 
    RowBox[{"Sin", "[", "t", "]"}]}], "+", 
   RowBox[{
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{
      RowBox[{"-", "1.5"}], "t"}]], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Cos", "[", "t", "]"}], "+", 
      RowBox[{"Sin", "[", "t", "]"}]}], ")"}]}]}]}]], "Input",
 CellChangeTimes->{{3.768072936361289*^9, 3.7680729690413227`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"0.8`", " ", 
   RowBox[{"Cos", "[", "t", "]"}]}], "+", 
  RowBox[{"0.4`", " ", 
   RowBox[{"Sin", "[", "t", "]"}]}], "+", 
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"-", "1.5`"}], " ", "t"}]], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Cos", "[", "t", "]"}], "+", 
     RowBox[{"Sin", "[", "t", "]"}]}], ")"}]}]}]], "Output",
 CellChangeTimes->{3.7680729702926903`*^9, 3.7680731076566973`*^9, 
  3.768073152715481*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"cd", "[", "t_", "]"}], "=", 
   RowBox[{"D", "[", 
    RowBox[{"cls", ",", "t"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.768072770870617*^9, 3.768072785509145*^9}, {
  3.768072852169738*^9, 3.768072855184568*^9}, {3.768073164759074*^9, 
  3.768073169285336*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"cd2", "[", "t_", "]"}], "=", 
   RowBox[{"D", "[", 
    RowBox[{"cls", ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "2"}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.768072787810369*^9, 3.768072808355626*^9}, {
  3.7680728922381973`*^9, 3.7680728954937677`*^9}, {3.7680731749006433`*^9, 
  3.768073177420959*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"cd2", "[", "k", "]"}], "+", 
        RowBox[{"3", 
         RowBox[{"cd", "[", "k", "]"}]}], "+", 
        RowBox[{"3.25", " ", 
         RowBox[{"cls", "[", "k", "]"}]}]}], ",", 
       RowBox[{
        RowBox[{"3", " ", 
         RowBox[{"Cos", "[", "k", "]"}]}], "-", 
        RowBox[{"1.5", " ", 
         RowBox[{"Sin", "[", "k", "]"}]}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"k", ",", 
       RowBox[{"{", 
        RowBox[{
        "1", ",", "2", ",", "\[ExponentialE]", ",", "3", ",", "\[Pi]"}], 
        "}"}]}], "}"}]}], "]"}], ",", 
   RowBox[{"Frame", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.768072498117435*^9, 3.7680725241678143`*^9}, {
  3.768072578303165*^9, 3.7680725936897583`*^9}, {3.768072633551042*^9, 
  3.768072642506907*^9}, {3.768072685262347*^9, 3.768072729481206*^9}, {
  3.768072980913327*^9, 3.768073060395277*^9}, {3.7680732509682293`*^9, 
  3.768073270374889*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {"3.5007229863288716`", "0.35870044039257465`"},
    {"0.17990057685082883`", 
     RowBox[{"-", "2.6123866498799497`"}]},
    {
     RowBox[{"-", "1.8640905140843558`"}], 
     RowBox[{"-", "3.3513736801152585`"}]},
    {
     RowBox[{"-", "2.4211723756773016`"}], 
     RowBox[{"-", "3.181657501891137`"}]},
    {
     RowBox[{"-", "2.6291956958186704`"}], 
     RowBox[{"-", "3.`"}]}
   },
   AutoDelete->False,
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.768072702330586*^9, 3.768072730205385*^9}, {
   3.768073037505948*^9, 3.7680730615542707`*^9}, 3.768073117356387*^9, 
   3.768073181597328*^9, 3.768073271325803*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"11.", " ", 
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox["D", "2"], "+", 
     RowBox[{"2", "I"}]}], ")"}], "y"}], "=", 
  RowBox[{
   RowBox[{"Cos", "[", 
    RowBox[{
     SqrtBox["2"], "t"}], "]"}], "+", 
   RowBox[{"Sin", "[", 
    RowBox[{
     SqrtBox["2"], "t"}], "]"}]}]}]], "Text",
 CellChangeTimes->{{3.76805264450994*^9, 3.768052693314802*^9}},
 Background->RGBColor[1, 0.9, 0.8]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"eqn", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"y", "''"}], "[", "x", "]"}], "-", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"a", "*", 
        RowBox[{"x", "^", "6"}]}], "+", 
       RowBox[{"x", "^", "2"}]}], ")"}], "*", 
     RowBox[{"y", "[", "x", "]"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"sol", "=", 
  RowBox[{"DSolve", "[", 
   RowBox[{
    RowBox[{"eqn", "\[Equal]", "0"}], ",", "y", ",", "x"}], "]"}]}]}], "Input",\

 CellChangeTimes->{{3.7680807692950153`*^9, 3.768080787635154*^9}}],

Cell[BoxData[
 RowBox[{"ClearAll", "[", "\"\<Global`*\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.67337793403688*^9, 3.673377936266822*^9}, 
   3.768052342064383*^9, {3.772894538891776*^9, 3.772894539370298*^9}}],

Cell["\<\
I reworked Nasser\[CloseCurlyQuote]s module with t instead of x, in the hope \
it would show the reason for the difficulty.\
\>", "Text",
 CellChangeTimes->{{3.768081378665135*^9, 3.7680814271276817`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "returns", " ", "homogeneous", " ", "and", " ", "particular", " ", 
    "solutions"}], "*)"}], 
  RowBox[{
   RowBox[{
    RowBox[{"hAndp", "[", 
     RowBox[{"odeH_", ",", "rhs_", ",", "y_", ",", "t_"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "wronskian", ",", "u1", ",", "u2", ",", "solH", ",", "y1", ",", "y2", 
        ",", "leadingC"}], "}"}], ",", 
      RowBox[{
       RowBox[{"leadingC", "=", 
        RowBox[{"Cases", "[", 
         RowBox[{"odeH", ",", 
          RowBox[{
           RowBox[{"c_", " ", 
            RowBox[{
             RowBox[{"y", "''"}], "[", "t", "]"}]}], "\[RuleDelayed]", 
           "c"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"leadingC", "=", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"leadingC", "===", 
           RowBox[{"{", "}"}]}], ",", "1", ",", 
          RowBox[{"First", "@", "leadingC"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"solH", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"y", "[", "t", "]"}], "/.", 
          RowBox[{"First", "@", 
           RowBox[{"DSolve", "[", 
            RowBox[{
             RowBox[{"odeH", "\[Equal]", "0"}], ",", 
             RowBox[{"y", "[", "t", "]"}], ",", "t"}], "]"}]}]}], ")"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"y1", ",", "y2"}], "}"}], "=", 
        RowBox[{"solH", "/.", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"C", "[", "1", "]"}], " ", "y1_"}], "+", 
           RowBox[{
            RowBox[{"C", "[", "2", "]"}], " ", "y2_"}]}], "\[RuleDelayed]", 
          RowBox[{"{", 
           RowBox[{"y1", ",", "y2"}], "}"}]}]}]}], ";", 
       RowBox[{"(*", 
        RowBox[{"basis", " ", "solutions"}], "*)"}], 
       RowBox[{"wronskian", "=", 
        RowBox[{"Det", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"y1", ",", "y2"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"D", "[", 
              RowBox[{"y1", ",", "t"}], "]"}], ",", 
             RowBox[{"D", "[", 
              RowBox[{"y2", ",", "t"}], "]"}]}], "}"}]}], "}"}], "]"}]}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"u1", "=", 
        RowBox[{"-", 
         RowBox[{"Integrate", "[", 
          RowBox[{
           RowBox[{"y2", " ", 
            RowBox[{"rhs", "/", 
             RowBox[{"(", 
              RowBox[{"leadingC", "*", "wronskian"}], ")"}]}]}], ",", "t"}], 
          "]"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"u2", "=", 
        RowBox[{"Integrate", "[", 
         RowBox[{
          RowBox[{"y1", " ", 
           RowBox[{"rhs", "/", 
            RowBox[{"(", 
             RowBox[{"leadingC", "*", "wronskian"}], ")"}]}]}], ",", "t"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"solH", ",", 
         RowBox[{"Simplify", "[", 
          RowBox[{
           RowBox[{"y1", " ", "u1"}], "+", 
           RowBox[{"y2", " ", "u2"}]}], "]"}]}], "}"}]}]}], "]"}]}], 
   ";"}]}]], "Input",
 CellChangeTimes->{{3.7680695938252974`*^9, 3.768069600919635*^9}, {
  3.768069753752782*^9, 3.768069776574359*^9}, {3.768080061014843*^9, 
  3.768080111147244*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"odeH", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"y", "''"}], "[", "t", "]"}], "+", 
    RowBox[{"2", " ", 
     RowBox[{"y", "[", "t", "]"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rhs", "=", 
   RowBox[{
    RowBox[{"Cos", "[", 
     RowBox[{
      SqrtBox["2"], "t"}], "]"}], "+", " ", 
    RowBox[{"Sin", "[", 
     RowBox[{
      SqrtBox["2"], "t"}], "]"}]}]}], ";"}], "\[IndentingNewLine]"}], "Input",\

 CellChangeTimes->{{3.76807603929205*^9, 3.768076041052483*^9}, {
  3.768076083847376*^9, 3.7680761807115393`*^9}, {3.768080006776013*^9, 
  3.7680800098943043`*^9}}],

Cell["The module still performs.", "Text",
 CellChangeTimes->{{3.768081442079051*^9, 3.768081447742813*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"yh", ",", "yp"}], "}"}], "=", 
  RowBox[{"hAndp", "[", 
   RowBox[{"odeH", ",", "rhs", ",", "y", ",", "t"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"C", "[", "1", "]"}], " ", 
     RowBox[{"Cos", "[", 
      RowBox[{
       SqrtBox["2"], " ", "t"}], "]"}]}], "+", 
    RowBox[{
     RowBox[{"C", "[", "2", "]"}], " ", 
     RowBox[{"Sin", "[", 
      RowBox[{
       SqrtBox["2"], " ", "t"}], "]"}]}]}], ",", 
   FractionBox[
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        SqrtBox["2"], "-", 
        RowBox[{"4", " ", "t"}]}], ")"}], " ", 
      RowBox[{"Cos", "[", 
       RowBox[{
        SqrtBox["2"], " ", "t"}], "]"}]}], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        SqrtBox["2"], "+", 
        RowBox[{"4", " ", "t"}]}], ")"}], " ", 
      RowBox[{"Sin", "[", 
       RowBox[{
        SqrtBox["2"], " ", "t"}], "]"}]}]}], 
    RowBox[{"8", " ", 
     SqrtBox["2"]}]]}], "}"}]], "Output",
 CellChangeTimes->{3.768076212622362*^9, 3.768078859504777*^9, 
  3.768079631714999*^9, 3.768079985574617*^9, 3.768080138813485*^9, 
  3.768080566452794*^9}]
}, Open  ]],

Cell["\<\
The module comes up with a solution which looks a little like the text \
answer, but not quite.\
\>", "Text",
 CellChangeTimes->{{3.7680811909061947`*^9, 3.768081211343487*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fullSolution", "=", 
  RowBox[{"yh", "+", "yp"}]}]], "Input",
 CellChangeTimes->{{3.768076292493258*^9, 3.768076295515197*^9}, {
  3.768077152645988*^9, 3.768077154092066*^9}, {3.768079604735289*^9, 
  3.768079606437633*^9}, {3.768079674308742*^9, 3.768079674971092*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"C", "[", "1", "]"}], " ", 
   RowBox[{"Cos", "[", 
    RowBox[{
     SqrtBox["2"], " ", "t"}], "]"}]}], "+", 
  RowBox[{
   RowBox[{"C", "[", "2", "]"}], " ", 
   RowBox[{"Sin", "[", 
    RowBox[{
     SqrtBox["2"], " ", "t"}], "]"}]}], "+", 
  FractionBox[
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SqrtBox["2"], "-", 
       RowBox[{"4", " ", "t"}]}], ")"}], " ", 
     RowBox[{"Cos", "[", 
      RowBox[{
       SqrtBox["2"], " ", "t"}], "]"}]}], "+", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SqrtBox["2"], "+", 
       RowBox[{"4", " ", "t"}]}], ")"}], " ", 
     RowBox[{"Sin", "[", 
      RowBox[{
       SqrtBox["2"], " ", "t"}], "]"}]}]}], 
   RowBox[{"8", " ", 
    SqrtBox["2"]}]]}]], "Output",
 CellChangeTimes->{
  3.768076237451949*^9, 3.768076296586232*^9, 3.768077155137328*^9, 
   3.768078808247177*^9, 3.7680788645086813`*^9, {3.7680796078122787`*^9, 
   3.768079636591992*^9}, 3.768079676224367*^9, 3.7680801429449463`*^9, 
   3.76808056953617*^9}]
}, Open  ]],

Cell["\<\
Mathematica doubles down on the suspicious solution by DSolving it directly. \
This is a forward test, not a back test.\
\>", "Text",
 CellChangeTimes->{{3.768081217176319*^9, 3.768081243590621*^9}, {
  3.768081471797731*^9, 3.768081479517619*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"y", "[", "t", "]"}], "/.", 
   RowBox[{"First", "@", 
    RowBox[{"DSolve", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"odeH", "-", "rhs"}], "\[Equal]", "0"}], ",", 
      RowBox[{"y", "[", "t", "]"}], ",", "t"}], "]"}]}]}], "\n"}]], "Input",
 CellChangeTimes->{{3.768078366619323*^9, 3.768078383932621*^9}, {
  3.768079143025222*^9, 3.768079160142847*^9}, {3.768079441429722*^9, 
  3.76807944359603*^9}, {3.768079497579604*^9, 3.7680794982419033`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"C", "[", "1", "]"}], " ", 
   RowBox[{"Cos", "[", 
    RowBox[{
     SqrtBox["2"], " ", "t"}], "]"}]}], "+", 
  RowBox[{
   RowBox[{"C", "[", "2", "]"}], " ", 
   RowBox[{"Sin", "[", 
    RowBox[{
     SqrtBox["2"], " ", "t"}], "]"}]}], "+", 
  RowBox[{
   FractionBox["1", 
    RowBox[{"8", " ", 
     SqrtBox["2"]}]], 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "4"}], " ", "t", " ", 
      RowBox[{"Cos", "[", 
       RowBox[{
        SqrtBox["2"], " ", "t"}], "]"}]}], "+", 
     RowBox[{
      SqrtBox["2"], " ", 
      RowBox[{"Cos", "[", 
       RowBox[{
        SqrtBox["2"], " ", "t"}], "]"}], " ", 
      RowBox[{"Cos", "[", 
       RowBox[{"2", " ", 
        SqrtBox["2"], " ", "t"}], "]"}]}], "+", 
     RowBox[{"4", " ", "t", " ", 
      RowBox[{"Sin", "[", 
       RowBox[{
        SqrtBox["2"], " ", "t"}], "]"}]}], "-", 
     RowBox[{
      SqrtBox["2"], " ", 
      RowBox[{"Cos", "[", 
       RowBox[{"2", " ", 
        SqrtBox["2"], " ", "t"}], "]"}], " ", 
      RowBox[{"Sin", "[", 
       RowBox[{
        SqrtBox["2"], " ", "t"}], "]"}]}], "+", 
     RowBox[{
      SqrtBox["2"], " ", 
      RowBox[{"Cos", "[", 
       RowBox[{
        SqrtBox["2"], " ", "t"}], "]"}], " ", 
      RowBox[{"Sin", "[", 
       RowBox[{"2", " ", 
        SqrtBox["2"], " ", "t"}], "]"}]}], "+", 
     RowBox[{
      SqrtBox["2"], " ", 
      RowBox[{"Sin", "[", 
       RowBox[{
        SqrtBox["2"], " ", "t"}], "]"}], " ", 
      RowBox[{"Sin", "[", 
       RowBox[{"2", " ", 
        SqrtBox["2"], " ", "t"}], "]"}]}]}], ")"}]}]}]], "Output",
 CellChangeTimes->{3.7680783855186377`*^9, 3.768078811243486*^9, 
  3.7680788680917892`*^9, 3.76807916350628*^9, 3.768079444959261*^9, 
  3.768079679901484*^9, 3.7680801485806913`*^9, 3.768080574029356*^9, 
  3.768080920094635*^9}]
}, Open  ]],

Cell["\<\
Cutting out the latter part, the \[OpenCurlyQuote]tail\[CloseCurlyQuote], of \
the proposed solution, which seems to contain the wayward-looking content.\
\>", "Text",
 CellChangeTimes->{{3.768081250892275*^9, 3.768081313867942*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"outy", "=", 
   RowBox[{
    FractionBox["1", 
     RowBox[{"8", " ", 
      SqrtBox["2"]}]], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "4"}], " ", "t", " ", 
       RowBox[{"Cos", "[", 
        RowBox[{
         SqrtBox["2"], " ", "t"}], "]"}]}], "+", 
      RowBox[{
       SqrtBox["2"], " ", 
       RowBox[{"Cos", "[", 
        RowBox[{
         SqrtBox["2"], " ", "t"}], "]"}], " ", 
       RowBox[{"Cos", "[", 
        RowBox[{"2", " ", 
         SqrtBox["2"], " ", "t"}], "]"}]}], "+", 
      RowBox[{"4", " ", "t", " ", 
       RowBox[{"Sin", "[", 
        RowBox[{
         SqrtBox["2"], " ", "t"}], "]"}]}], "-", 
      RowBox[{
       SqrtBox["2"], " ", 
       RowBox[{"Cos", "[", 
        RowBox[{"2", " ", 
         SqrtBox["2"], " ", "t"}], "]"}], " ", 
       RowBox[{"Sin", "[", 
        RowBox[{
         SqrtBox["2"], " ", "t"}], "]"}]}], "+", 
      RowBox[{
       SqrtBox["2"], " ", 
       RowBox[{"Cos", "[", 
        RowBox[{
         SqrtBox["2"], " ", "t"}], "]"}], " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"2", " ", 
         SqrtBox["2"], " ", "t"}], "]"}]}], "+", 
      RowBox[{
       SqrtBox["2"], " ", 
       RowBox[{"Sin", "[", 
        RowBox[{
         SqrtBox["2"], " ", "t"}], "]"}], " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"2", " ", 
         SqrtBox["2"], " ", "t"}], "]"}]}]}], ")"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7680795016081543`*^9, 3.76807951606094*^9}, 
   3.768080931524332*^9, 3.768081035033453*^9}],

Cell["The tail is tested on an integer value.", "Text",
 CellChangeTimes->{{3.768081321091701*^9, 3.768081330187417*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"outy", "/.", 
   RowBox[{"t", "\[Rule]", "2"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.768080949336912*^9, 3.768080964961527*^9}}],

Cell[BoxData["0.8101435141651465`"], "Output",
 CellChangeTimes->{3.768080966835538*^9, 3.768081040062767*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        SqrtBox["2"], "-", 
        RowBox[{"4", " ", "t"}]}], ")"}], " ", 
      RowBox[{"Cos", "[", 
       RowBox[{
        SqrtBox["2"], " ", "t"}], "]"}]}], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        SqrtBox["2"], "+", 
        RowBox[{"4", " ", "t"}]}], ")"}], " ", 
      RowBox[{"Sin", "[", 
       RowBox[{
        SqrtBox["2"], " ", "t"}], "]"}]}]}], 
    RowBox[{"8", " ", 
     SqrtBox["2"]}]], "/.", 
   RowBox[{"t", "\[Rule]", "2"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.768077443874054*^9, 3.768077465000296*^9}}],

Cell["The other version of the tail is also tested.", "Text",
 CellChangeTimes->{{3.7680813397788343`*^9, 3.7680813468347273`*^9}}],

Cell[BoxData["0.8101435141651465`"], "Output",
 CellChangeTimes->{{3.768077450514719*^9, 3.768077465682433*^9}, 
   3.7680801765163803`*^9, 3.768081052565031*^9}],

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{
   FractionBox[
    RowBox[{"t", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Sin", "[", 
        RowBox[{
         SqrtBox["2"], "t"}], "]"}], "-", 
       RowBox[{"Cos", "[", 
        RowBox[{
         SqrtBox["2"], "t"}], "]"}]}], ")"}]}], 
    RowBox[{"2", " ", 
     SqrtBox["2"]}]], "/.", 
   RowBox[{"t", "\[Rule]", "2"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7680774782166986`*^9, 3.7680774878231792`*^9}}],

Cell["The text answer \[OpenCurlyQuote]tail\[CloseCurlyQuote] comes back with \
a different value.", "Text",
 CellChangeTimes->{{3.7680813521865587`*^9, 3.768081367265883*^9}}],

Cell[BoxData["0.8905549373854968`"], "Output",
 CellChangeTimes->{3.7680774889728413`*^9, 3.768080180208507*^9, 
  3.7680810551854057`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"13.", "  ", 
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["D", "2"], "+", "I"}], ")"}], "y"}], "=", 
   RowBox[{"Cos", "[", 
    RowBox[{"\[Omega]", " ", "t"}], "]"}]}], ",", " ", 
  RowBox[{
   SuperscriptBox["\[Omega]", "2"], "\[NotEqual]", "1"}]}]], "Text",
 CellChangeTimes->{{3.768052737010396*^9, 3.768052786124789*^9}},
 Background->RGBColor[1, 0.9, 0.8]],

Cell[BoxData[
 RowBox[{"ClearAll", "[", "\"\<Global`*\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.67338520711976*^9, 3.673385208883257*^9}, {
   3.6733858440769672`*^9, 3.673385848108419*^9}, 3.768052357463468*^9, {
   3.772894553082984*^9, 3.7728945535454817`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "returns", " ", "homogeneous", " ", "and", " ", "particular", " ", 
    "solutions"}], "*)"}], 
  RowBox[{
   RowBox[{
    RowBox[{"hAndp", "[", 
     RowBox[{"odeH_", ",", "rhs_", ",", "y_", ",", "x_"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "wronskian", ",", "u1", ",", "u2", ",", "solH", ",", "y1", ",", "y2", 
        ",", "leadingC"}], "}"}], ",", 
      RowBox[{
       RowBox[{"leadingC", "=", 
        RowBox[{"Cases", "[", 
         RowBox[{"odeH", ",", 
          RowBox[{
           RowBox[{"c_", " ", 
            RowBox[{
             RowBox[{"y", "''"}], "[", "x", "]"}]}], "\[RuleDelayed]", 
           "c"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"leadingC", "=", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"leadingC", "===", 
           RowBox[{"{", "}"}]}], ",", "1", ",", 
          RowBox[{"First", "@", "leadingC"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"solH", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"y", "[", "x", "]"}], "/.", 
          RowBox[{"First", "@", 
           RowBox[{"DSolve", "[", 
            RowBox[{
             RowBox[{"odeH", "\[Equal]", "0"}], ",", 
             RowBox[{"y", "[", "x", "]"}], ",", "x"}], "]"}]}]}], ")"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"y1", ",", "y2"}], "}"}], "=", 
        RowBox[{"solH", "/.", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"C", "[", "1", "]"}], " ", "y1_"}], "+", 
           RowBox[{
            RowBox[{"C", "[", "2", "]"}], " ", "y2_"}]}], "\[RuleDelayed]", 
          RowBox[{"{", 
           RowBox[{"y1", ",", "y2"}], "}"}]}]}]}], ";", 
       RowBox[{"(*", 
        RowBox[{"basis", " ", "solutions"}], "*)"}], 
       RowBox[{"wronskian", "=", 
        RowBox[{"Det", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"y1", ",", "y2"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"D", "[", 
              RowBox[{"y1", ",", "x"}], "]"}], ",", 
             RowBox[{"D", "[", 
              RowBox[{"y2", ",", "x"}], "]"}]}], "}"}]}], "}"}], "]"}]}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"u1", "=", 
        RowBox[{"-", 
         RowBox[{"Integrate", "[", 
          RowBox[{
           RowBox[{"y2", " ", 
            RowBox[{"rhs", "/", 
             RowBox[{"(", 
              RowBox[{"leadingC", "*", "wronskian"}], ")"}]}]}], ",", "x"}], 
          "]"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"u2", "=", 
        RowBox[{"Integrate", "[", 
         RowBox[{
          RowBox[{"y1", " ", 
           RowBox[{"rhs", "/", 
            RowBox[{"(", 
             RowBox[{"leadingC", "*", "wronskian"}], ")"}]}]}], ",", "x"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"solH", ",", 
         RowBox[{"Simplify", "[", 
          RowBox[{
           RowBox[{"y1", " ", "u1"}], "+", 
           RowBox[{"y2", " ", "u2"}]}], "]"}]}], "}"}]}]}], "]"}]}], 
   ";"}]}]], "Input"],

Cell["\<\
Oddly, the Mathematica machine objected when the symbol \[Omega] was used, \
but not when the symbol a was used. I couldn\[CloseCurlyQuote]t get \
accommodation for the Assumptions on a, but it didn\[CloseCurlyQuote]t seem \
to gum up the works.\
\>", "Text",
 CellChangeTimes->{{3.768082415434867*^9, 3.768082493526931*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"odeH", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"y", "''"}], "[", "t", "]"}], "+", " ", 
    RowBox[{"y", "[", "t", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rhs", "=", 
   RowBox[{"Cos", "[", 
    RowBox[{"a", " ", "t"}], "]"}]}], ";"}], "\[IndentingNewLine]"}], "Input",\

 CellChangeTimes->{{3.768081785499576*^9, 3.7680818085933933`*^9}, {
  3.768082157987892*^9, 3.768082181371299*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"yh", ",", "yp"}], "}"}], "=", 
  RowBox[{"hAndp", "[", 
   RowBox[{"odeH", ",", "rhs", ",", "y", ",", "t"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.768082032353622*^9, 3.768082054473383*^9}, {
  3.768082093560339*^9, 3.768082121133443*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"C", "[", "1", "]"}], " ", 
     RowBox[{"Cos", "[", "t", "]"}]}], "+", 
    RowBox[{
     RowBox[{"C", "[", "2", "]"}], " ", 
     RowBox[{"Sin", "[", "t", "]"}]}]}], ",", 
   FractionBox[
    RowBox[{"Cos", "[", 
     RowBox[{"a", " ", "t"}], "]"}], 
    RowBox[{"1", "-", 
     SuperscriptBox["a", "2"]}]]}], "}"}]], "Output",
 CellChangeTimes->{
  3.76808205983702*^9, {3.768082098230986*^9, 3.768082122226946*^9}, {
   3.76808216386693*^9, 3.768082186543836*^9}}]
}, Open  ]],

Cell["The sum of the two parts equals the text answer.", "Text",
 CellChangeTimes->{{3.768082587131353*^9, 3.7680825957069902`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fullSolution", "=", 
  RowBox[{"yh", "+", "yp"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"C", "[", "1", "]"}], " ", 
   RowBox[{"Cos", "[", "t", "]"}]}], "+", 
  FractionBox[
   RowBox[{"Cos", "[", 
    RowBox[{"a", " ", "t"}], "]"}], 
   RowBox[{"1", "-", 
    SuperscriptBox["a", "2"]}]], "+", 
  RowBox[{
   RowBox[{"C", "[", "2", "]"}], " ", 
   RowBox[{"Sin", "[", "t", "]"}]}]}]], "Output",
 CellChangeTimes->{3.768082295064542*^9},
 Background->RGBColor[0.88, 1, 0.88]]
}, Open  ]],

Cell["A forward checking step is available.", "Text",
 CellChangeTimes->{{3.768082546365856*^9, 3.768082557332569*^9}, {
  3.7699008010373487`*^9, 3.7699008018199263`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"y", "[", "t", "]"}], "/.", 
   RowBox[{"First", "@", 
    RowBox[{"DSolve", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"odeH", "-", "rhs"}], "\[Equal]", "0"}], ",", 
      RowBox[{"y", "[", "t", "]"}], ",", "t"}], "]"}]}]}], "\n"}]], "Input",
 CellChangeTimes->{{3.768082344430744*^9, 3.768082355900425*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"C", "[", "1", "]"}], " ", 
   RowBox[{"Cos", "[", "t", "]"}]}], "+", 
  RowBox[{
   RowBox[{"C", "[", "2", "]"}], " ", 
   RowBox[{"Sin", "[", "t", "]"}]}], "+", 
  FractionBox[
   RowBox[{
    RowBox[{
     RowBox[{"-", 
      SuperscriptBox[
       RowBox[{"Cos", "[", "t", "]"}], "2"]}], " ", 
     RowBox[{"Cos", "[", 
      RowBox[{"a", " ", "t"}], "]"}]}], "-", 
    RowBox[{
     RowBox[{"Cos", "[", 
      RowBox[{"a", " ", "t"}], "]"}], " ", 
     SuperscriptBox[
      RowBox[{"Sin", "[", "t", "]"}], "2"]}]}], 
   RowBox[{
    RowBox[{"-", "1"}], "+", 
    SuperscriptBox["a", "2"]}]]}]], "Output",
 CellChangeTimes->{{3.7680823323963423`*^9, 3.768082356910305*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"15.", "  ", 
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox["D", "2"], "+", 
     RowBox[{"4", "D"}], "+", 
     RowBox[{"8", "I"}]}], ")"}], "y"}], "=", 
  RowBox[{
   RowBox[{"2", 
    RowBox[{"Cos", "[", 
     RowBox[{"2", " ", "t"}], "]"}]}], "+", 
   RowBox[{"Sin", "[", 
    RowBox[{"2", " ", "t"}], "]"}]}]}]], "Text",
 CellChangeTimes->{{3.768052793980529*^9, 3.7680528331703053`*^9}},
 Background->RGBColor[1, 0.9, 0.8]],

Cell[BoxData[
 RowBox[{"ClearAll", "[", "\"\<Global`*\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.673386195793199*^9, 3.6733861973121777`*^9}, 
   3.768052364703024*^9, {3.7728945618265877`*^9, 3.772894562289184*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "returns", " ", "homogeneous", " ", "and", " ", "particular", " ", 
    "solutions"}], "*)"}], 
  RowBox[{
   RowBox[{
    RowBox[{"hAndp", "[", 
     RowBox[{"odeH_", ",", "rhs_", ",", "y_", ",", "x_"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "wronskian", ",", "u1", ",", "u2", ",", "solH", ",", "y1", ",", "y2", 
        ",", "leadingC"}], "}"}], ",", 
      RowBox[{
       RowBox[{"leadingC", "=", 
        RowBox[{"Cases", "[", 
         RowBox[{"odeH", ",", 
          RowBox[{
           RowBox[{"c_", " ", 
            RowBox[{
             RowBox[{"y", "''"}], "[", "x", "]"}]}], "\[RuleDelayed]", 
           "c"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"leadingC", "=", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"leadingC", "===", 
           RowBox[{"{", "}"}]}], ",", "1", ",", 
          RowBox[{"First", "@", "leadingC"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"solH", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"y", "[", "x", "]"}], "/.", 
          RowBox[{"First", "@", 
           RowBox[{"DSolve", "[", 
            RowBox[{
             RowBox[{"odeH", "\[Equal]", "0"}], ",", 
             RowBox[{"y", "[", "x", "]"}], ",", "x"}], "]"}]}]}], ")"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"y1", ",", "y2"}], "}"}], "=", 
        RowBox[{"solH", "/.", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"C", "[", "1", "]"}], " ", "y1_"}], "+", 
           RowBox[{
            RowBox[{"C", "[", "2", "]"}], " ", "y2_"}]}], "\[RuleDelayed]", 
          RowBox[{"{", 
           RowBox[{"y1", ",", "y2"}], "}"}]}]}]}], ";", 
       RowBox[{"(*", 
        RowBox[{"basis", " ", "solutions"}], "*)"}], 
       RowBox[{"wronskian", "=", 
        RowBox[{"Det", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"y1", ",", "y2"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"D", "[", 
              RowBox[{"y1", ",", "x"}], "]"}], ",", 
             RowBox[{"D", "[", 
              RowBox[{"y2", ",", "x"}], "]"}]}], "}"}]}], "}"}], "]"}]}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"u1", "=", 
        RowBox[{"-", 
         RowBox[{"Integrate", "[", 
          RowBox[{
           RowBox[{"y2", " ", 
            RowBox[{"rhs", "/", 
             RowBox[{"(", 
              RowBox[{"leadingC", "*", "wronskian"}], ")"}]}]}], ",", "x"}], 
          "]"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"u2", "=", 
        RowBox[{"Integrate", "[", 
         RowBox[{
          RowBox[{"y1", " ", 
           RowBox[{"rhs", "/", 
            RowBox[{"(", 
             RowBox[{"leadingC", "*", "wronskian"}], ")"}]}]}], ",", "x"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"solH", ",", 
         RowBox[{"Simplify", "[", 
          RowBox[{
           RowBox[{"y1", " ", "u1"}], "+", 
           RowBox[{"y2", " ", "u2"}]}], "]"}]}], "}"}]}]}], "]"}]}], 
   ";"}]}]], "Input"],

Cell["\<\
No special circumstances this time. The module runs smoothly.\
\>", "Text",
 CellChangeTimes->{{3.768082851330461*^9, 3.768082876672131*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"odeH", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"y", "''"}], "[", "t", "]"}], "+", " ", 
    RowBox[{"4", 
     RowBox[{
      RowBox[{"y", "'"}], "[", "t", "]"}]}], "+", 
    RowBox[{"8", 
     RowBox[{"y", "[", "t", "]"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rhs", "=", 
   RowBox[{
    RowBox[{"2", 
     RowBox[{"Cos", "[", 
      RowBox[{"2", " ", "t"}], "]"}]}], "+", 
    RowBox[{"Sin", "[", 
     RowBox[{"2", " ", "t"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"{", 
   RowBox[{"yh", ",", "yp"}], "}"}], "=", 
  RowBox[{"hAndp", "[", 
   RowBox[{"odeH", ",", "rhs", ",", "y", ",", "t"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.76808272397549*^9, 3.7680827772792473`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{
       RowBox[{"-", "2"}], " ", "t"}]], " ", 
     RowBox[{"C", "[", "2", "]"}], " ", 
     RowBox[{"Cos", "[", 
      RowBox[{"2", " ", "t"}], "]"}]}], "+", 
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{
       RowBox[{"-", "2"}], " ", "t"}]], " ", 
     RowBox[{"C", "[", "1", "]"}], " ", 
     RowBox[{"Sin", "[", 
      RowBox[{"2", " ", "t"}], "]"}]}]}], ",", 
   RowBox[{
    FractionBox["1", "4"], " ", 
    RowBox[{"Sin", "[", 
     RowBox[{"2", " ", "t"}], "]"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.768082781298429*^9}]
}, Open  ]],

Cell["The sum of the two parts matches the answer in the text.", "Text",
 CellChangeTimes->{{3.768082885679935*^9, 3.76808289495163*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fullSolution", "=", 
  RowBox[{"yh", "+", "yp"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"-", "2"}], " ", "t"}]], " ", 
   RowBox[{"C", "[", "2", "]"}], " ", 
   RowBox[{"Cos", "[", 
    RowBox[{"2", " ", "t"}], "]"}]}], "+", 
  RowBox[{
   FractionBox["1", "4"], " ", 
   RowBox[{"Sin", "[", 
    RowBox[{"2", " ", "t"}], "]"}]}], "+", 
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"-", "2"}], " ", "t"}]], " ", 
   RowBox[{"C", "[", "1", "]"}], " ", 
   RowBox[{"Sin", "[", 
    RowBox[{"2", " ", "t"}], "]"}]}]}]], "Output",
 CellChangeTimes->{3.768082821086506*^9},
 Background->RGBColor[0.88, 1, 0.88]]
}, Open  ]],

Cell["The forward check shows agreement with the module output.", "Text",
 CellChangeTimes->{{3.768083057218524*^9, 3.7680830742408867`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"y", "[", "t", "]"}], "/.", 
   RowBox[{"First", "@", 
    RowBox[{"DSolve", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"odeH", "-", "rhs"}], "\[Equal]", "0"}], ",", 
      RowBox[{"y", "[", "t", "]"}], ",", "t"}], "]"}]}]}], "\n"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{
      RowBox[{"-", "2"}], " ", "t"}]], " ", 
    RowBox[{"C", "[", "2", "]"}], " ", 
    RowBox[{"Cos", "[", 
     RowBox[{"2", " ", "t"}], "]"}]}], "+", 
   RowBox[{
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{
      RowBox[{"-", "2"}], " ", "t"}]], " ", 
    RowBox[{"C", "[", "1", "]"}], " ", 
    RowBox[{"Sin", "[", 
     RowBox[{"2", " ", "t"}], "]"}]}], "+", 
   RowBox[{
    FractionBox["1", "8"], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "8"}], " ", 
       SuperscriptBox[
        RowBox[{"Cos", "[", "t", "]"}], "2"], " ", 
       RowBox[{"Cos", "[", 
        RowBox[{"2", " ", "t"}], "]"}], " ", 
       SuperscriptBox[
        RowBox[{"Sin", "[", "t", "]"}], "2"]}], "+", 
      RowBox[{"2", " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"2", " ", "t"}], "]"}]}], "+", 
      RowBox[{
       RowBox[{"Sin", "[", 
        RowBox[{"2", " ", "t"}], "]"}], " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"4", " ", "t"}], "]"}]}]}], ")"}]}]}], "//", "FullSimplify"}]],\
 "Input",
 CellChangeTimes->{{3.768082938727285*^9, 3.768082941741831*^9}, {
  3.768083014661199*^9, 3.7680830152193947`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   FractionBox["1", "4"], " ", 
   RowBox[{"Sin", "[", 
    RowBox[{"2", " ", "t"}], "]"}]}], "+", 
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"-", "2"}], " ", "t"}]], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"C", "[", "2", "]"}], " ", 
      RowBox[{"Cos", "[", 
       RowBox[{"2", " ", "t"}], "]"}]}], "+", 
     RowBox[{
      RowBox[{"C", "[", "1", "]"}], " ", 
      RowBox[{"Sin", "[", 
       RowBox[{"2", " ", "t"}], "]"}]}]}], ")"}]}]}]], "Output",
 CellChangeTimes->{3.7680829427700167`*^9, 3.768083016330319*^9}]
}, Open  ]],

Cell["\<\
So out of four test problems, the Nasser module performs acceptably on three. \
A welcome method for those undetermined coefficient situations.\
\>", "Text",
 CellChangeTimes->{{3.7680831657983313`*^9, 3.768083187892439*^9}, {
  3.7680832315548277`*^9, 3.7680832503462267`*^9}},
 Background->RGBColor[1, 1, 0.85]],

Cell[TextData[{
 "16 - 20 Initial value problems\nFind the motion of the mass-spring system \
modeled by the ODE and the initial conditions. Sketch or graph the solution \
curve. In addition, sketch or graph the curve of y - ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "p"], TraditionalForm]]],
 " to see when the system practically reaches the steady state."
}], "Text",
 CellChangeTimes->{{3.768052913763309*^9, 3.76805298468582*^9}},
 Background->RGBColor[
  0.9600061036087587, 0.9600061036087587, 0.9600061036087587]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"17.", " ", 
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["D", "2"], "+", 
      RowBox[{"4", "I"}]}], ")"}], "y"}], "=", 
   RowBox[{
    RowBox[{"Sin", "[", "t", "]"}], "+", 
    RowBox[{
     FractionBox["1", "3"], 
     RowBox[{"Sin", "[", 
      RowBox[{"3", " ", "t"}], "]"}]}], "+", 
    RowBox[{
     FractionBox["1", "5"], 
     RowBox[{"Sin", "[", 
      RowBox[{"5", " ", "t"}], "]"}]}]}]}], ",", " ", 
  RowBox[{
   RowBox[{"y", "[", "0", "]"}], "=", "0"}], ",", 
  RowBox[{
   RowBox[{
    RowBox[{"y", "'"}], "[", "0", "]"}], "=", 
   FractionBox["3", "35"]}]}]], "Text",
 CellChangeTimes->{{3.768052998817024*^9, 3.76805308660741*^9}},
 Background->RGBColor[1, 0.9, 0.8]],

Cell[BoxData[
 RowBox[{"ClearAll", "[", "\"\<Global`*\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.673389338635651*^9, 3.6733893405895987`*^9}, 
   3.768052377966073*^9, {3.772894572377984*^9, 3.772894572824415*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"jolt", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"y", "''"}], "[", "t", "]"}], "+", 
      RowBox[{"4", " ", 
       RowBox[{"y", "[", "t", "]"}]}]}], "\[Equal]", 
     RowBox[{
      RowBox[{"Sin", "[", "t", "]"}], "+", 
      RowBox[{
       FractionBox["1", "3"], " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"3", " ", "t"}], "]"}]}], "+", 
      RowBox[{
       FractionBox["1", "5"], " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"5", " ", "t"}], "]"}]}]}]}], ",", 
    RowBox[{
     RowBox[{"y", "[", "0", "]"}], "\[Equal]", "0"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"y", "'"}], "[", "0", "]"}], "\[Equal]", 
     FractionBox["3", "35"]}]}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{"holt", "=", 
  RowBox[{"DSolve", "[", 
   RowBox[{"jolt", ",", 
    RowBox[{"y", "[", "t", "]"}], ",", "t"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.6733893466118383`*^9, 3.673389462428053*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"4", " ", 
      RowBox[{"y", "[", "t", "]"}]}], "+", 
     RowBox[{
      SuperscriptBox["y", "\[Prime]\[Prime]",
       MultilineFunction->None], "[", "t", "]"}]}], "\[Equal]", 
    RowBox[{
     RowBox[{"Sin", "[", "t", "]"}], "+", 
     RowBox[{
      FractionBox["1", "3"], " ", 
      RowBox[{"Sin", "[", 
       RowBox[{"3", " ", "t"}], "]"}]}], "+", 
     RowBox[{
      FractionBox["1", "5"], " ", 
      RowBox[{"Sin", "[", 
       RowBox[{"5", " ", "t"}], "]"}]}]}]}], ",", 
   RowBox[{
    RowBox[{"y", "[", "0", "]"}], "\[Equal]", "0"}], ",", 
   RowBox[{
    RowBox[{
     SuperscriptBox["y", "\[Prime]",
      MultilineFunction->None], "[", "0", "]"}], "\[Equal]", 
    FractionBox["3", "35"]}]}], "}"}]], "Output",
 CellChangeTimes->{3.6733894648671923`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "t", "]"}], "\[Rule]", 
    RowBox[{
     FractionBox["1", "1260"], 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"63", " ", 
        RowBox[{"Cos", "[", 
         RowBox[{"2", " ", "t"}], "]"}], " ", 
        RowBox[{"Sin", "[", "t", "]"}]}], "-", 
       RowBox[{"644", " ", 
        RowBox[{"Cos", "[", 
         RowBox[{"2", " ", "t"}], "]"}], " ", 
        SuperscriptBox[
         RowBox[{"Sin", "[", "t", "]"}], "3"]}], "+", 
       RowBox[{"210", " ", 
        RowBox[{"Cos", "[", "t", "]"}], " ", 
        RowBox[{"Sin", "[", 
         RowBox[{"2", " ", "t"}], "]"}]}], "-", 
       RowBox[{"126", " ", 
        RowBox[{"Cos", "[", 
         RowBox[{"3", " ", "t"}], "]"}], " ", 
        RowBox[{"Sin", "[", 
         RowBox[{"2", " ", "t"}], "]"}]}], "-", 
       RowBox[{"21", " ", 
        RowBox[{"Cos", "[", 
         RowBox[{"5", " ", "t"}], "]"}], " ", 
        RowBox[{"Sin", "[", 
         RowBox[{"2", " ", "t"}], "]"}]}], "-", 
       RowBox[{"9", " ", 
        RowBox[{"Cos", "[", 
         RowBox[{"7", " ", "t"}], "]"}], " ", 
        RowBox[{"Sin", "[", 
         RowBox[{"2", " ", "t"}], "]"}]}], "-", 
       RowBox[{"77", " ", 
        RowBox[{"Cos", "[", 
         RowBox[{"2", " ", "t"}], "]"}], " ", 
        RowBox[{"Sin", "[", 
         RowBox[{"3", " ", "t"}], "]"}]}], "+", 
       RowBox[{"21", " ", 
        RowBox[{"Cos", "[", 
         RowBox[{"2", " ", "t"}], "]"}], " ", 
        RowBox[{"Sin", "[", 
         RowBox[{"5", " ", "t"}], "]"}]}], "+", 
       RowBox[{"9", " ", 
        RowBox[{"Cos", "[", 
         RowBox[{"2", " ", "t"}], "]"}], " ", 
        RowBox[{"Sin", "[", 
         RowBox[{"7", " ", "t"}], "]"}]}]}], ")"}]}]}], "}"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.673389464982533*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TrigReduce", "[", "holt", "]"}]], "Input",
 CellChangeTimes->{{3.673389521149084*^9, 3.673389526497582*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "t", "]"}], "\[Rule]", 
    RowBox[{
     FractionBox["1", "105"], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"35", " ", 
        RowBox[{"Sin", "[", "t", "]"}]}], "-", 
       RowBox[{"7", " ", 
        RowBox[{"Sin", "[", 
         RowBox[{"3", " ", "t"}], "]"}]}], "-", 
       RowBox[{"Sin", "[", 
        RowBox[{"5", " ", "t"}], "]"}]}], ")"}]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.6733895273463297`*^9},
 FontColor->GrayLevel[0],
 Background->RGBColor[0.88, 1, 0.88]]
}, Open  ]],

Cell["1. Above: This expression matches the text answer.", "Text",
 CellChangeTimes->{{3.6733895743924522`*^9, 3.6733895869198227`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"y", "[", "t", "]"}], "/.", "holt"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{
      RowBox[{"-", "2"}], " ", "\[Pi]"}], ",", 
     RowBox[{"2", " ", "\[Pi]"}]}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "Automatic"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6733896135506573`*^9, 3.6733897030631723`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1: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
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None},
  PlotRange->{{-6.283185050723043, 6.283185050723043}, {-0.3904759578916679, 
   0.39047574928589146`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.673389647704884*^9, 3.673389705186665*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"19.", "  ", 
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["D", "2"], "+", 
      RowBox[{"2", "D"}], "+", 
      RowBox[{"2", "I"}]}], ")"}], "y"}], "=", 
   RowBox[{
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{
      RowBox[{"-", "t"}], "/", "2"}]], 
    RowBox[{"Sin", "[", 
     RowBox[{
      FractionBox["1", "2"], "t"}], "]"}]}]}], ",", " ", 
  RowBox[{
   RowBox[{"y", "[", "0", "]"}], "=", "0"}], ",", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"y", "'"}], "[", "0", "]"}], "=", "1"}]}]], "Text",
 CellChangeTimes->{{3.768053145791876*^9, 3.768053203177854*^9}},
 Background->RGBColor[1, 0.9, 0.8]],

Cell[BoxData[
 RowBox[{"ClearAll", "[", "\"\<Global`*\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.6733897337196283`*^9, 3.673389735371952*^9}, 
   3.7680523857974586`*^9, {3.772894581329728*^9, 3.772894581832159*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"num", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"y", "''"}], "[", "t", "]"}], "+", 
      RowBox[{"2", " ", 
       RowBox[{
        RowBox[{"y", "'"}], "[", "t", "]"}]}], "+", 
      RowBox[{"2", " ", 
       RowBox[{"y", "[", "t", "]"}]}]}], "\[Equal]", 
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{"-", "t"}], "/", "2"}]], " ", 
      RowBox[{"Sin", "[", 
       RowBox[{
        FractionBox["1", "2"], " ", "t"}], "]"}]}]}], ",", 
    RowBox[{
     RowBox[{"y", "[", "0", "]"}], "\[Equal]", "0"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"y", "'"}], "[", "0", "]"}], "==", "1"}]}], 
   "}"}]}], "\[IndentingNewLine]", 
 RowBox[{"stum", "=", 
  RowBox[{"DSolve", "[", 
   RowBox[{"num", ",", 
    RowBox[{"y", "[", "t", "]"}], ",", "t"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.673389742548067*^9, 3.673389836119294*^9}, {
  3.673389892703557*^9, 3.673389893805738*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"2", " ", 
      RowBox[{"y", "[", "t", "]"}]}], "+", 
     RowBox[{"2", " ", 
      RowBox[{
       SuperscriptBox["y", "\[Prime]",
        MultilineFunction->None], "[", "t", "]"}]}], "+", 
     RowBox[{
      SuperscriptBox["y", "\[Prime]\[Prime]",
       MultilineFunction->None], "[", "t", "]"}]}], "\[Equal]", 
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{
       RowBox[{"-", "t"}], "/", "2"}]], " ", 
     RowBox[{"Sin", "[", 
      FractionBox["t", "2"], "]"}]}]}], ",", 
   RowBox[{
    RowBox[{"y", "[", "0", "]"}], "\[Equal]", "0"}], ",", 
   RowBox[{
    RowBox[{
     SuperscriptBox["y", "\[Prime]",
      MultilineFunction->None], "[", "0", "]"}], "\[Equal]", "1"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.673389837064406*^9, {3.673389895512192*^9, 3.6733899230307817`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "t", "]"}], "\[Rule]", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "10"]}], " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", "t"}]], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "4"}], " ", 
        RowBox[{"Cos", "[", "t", "]"}]}], "+", 
       RowBox[{"5", " ", 
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"t", "/", "2"}]], " ", 
        RowBox[{"Cos", "[", 
         FractionBox["t", "2"], "]"}], " ", 
        RowBox[{"Cos", "[", "t", "]"}]}], "-", 
       RowBox[{
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"t", "/", "2"}]], " ", 
        RowBox[{"Cos", "[", "t", "]"}], " ", 
        RowBox[{"Cos", "[", 
         FractionBox[
          RowBox[{"3", " ", "t"}], "2"], "]"}]}], "+", 
       RowBox[{"5", " ", 
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"t", "/", "2"}]], " ", 
        RowBox[{"Cos", "[", "t", "]"}], " ", 
        RowBox[{"Sin", "[", 
         FractionBox["t", "2"], "]"}]}], "-", 
       RowBox[{"8", " ", 
        RowBox[{"Sin", "[", "t", "]"}]}], "-", 
       RowBox[{"5", " ", 
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"t", "/", "2"}]], " ", 
        RowBox[{"Cos", "[", 
         FractionBox["t", "2"], "]"}], " ", 
        RowBox[{"Sin", "[", "t", "]"}]}], "+", 
       RowBox[{"3", " ", 
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"t", "/", "2"}]], " ", 
        RowBox[{"Cos", "[", 
         FractionBox[
          RowBox[{"3", " ", "t"}], "2"], "]"}], " ", 
        RowBox[{"Sin", "[", "t", "]"}]}], "+", 
       RowBox[{"5", " ", 
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"t", "/", "2"}]], " ", 
        RowBox[{"Sin", "[", 
         FractionBox["t", "2"], "]"}], " ", 
        RowBox[{"Sin", "[", "t", "]"}]}], "-", 
       RowBox[{"3", " ", 
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"t", "/", "2"}]], " ", 
        RowBox[{"Cos", "[", "t", "]"}], " ", 
        RowBox[{"Sin", "[", 
         FractionBox[
          RowBox[{"3", " ", "t"}], "2"], "]"}]}], "-", 
       RowBox[{
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"t", "/", "2"}]], " ", 
        RowBox[{"Sin", "[", "t", "]"}], " ", 
        RowBox[{"Sin", "[", 
         FractionBox[
          RowBox[{"3", " ", "t"}], "2"], "]"}]}]}], ")"}]}]}], "}"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.673389837064406*^9, {3.673389895512192*^9, 3.673389923195216*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"blum", "=", 
  RowBox[{"TrigReduce", "[", "stum", "]"}]}]], "Input",
 CellChangeTimes->{{3.673389949577757*^9, 3.6733899609145803`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "t", "]"}], "\[Rule]", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["2", "5"]}], " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", "t"}]], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"t", "/", "2"}]], " ", 
        RowBox[{"Cos", "[", 
         FractionBox["t", "2"], "]"}]}], "-", 
       RowBox[{"Cos", "[", "t", "]"}], "-", 
       RowBox[{"2", " ", 
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"t", "/", "2"}]], " ", 
        RowBox[{"Sin", "[", 
         FractionBox["t", "2"], "]"}]}], "-", 
       RowBox[{"2", " ", 
        RowBox[{"Sin", "[", "t", "]"}]}]}], ")"}]}]}], "}"}], "}"}]], "Output",\

 CellChangeTimes->{3.673389961884789*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rum", "=", 
  RowBox[{"Collect", "[", 
   RowBox[{"blum", ",", 
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"t", "/", "2"}]]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.673390087495326*^9, 3.673390107461048*^9}, {
  3.673390274465417*^9, 3.673390275767521*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "t", "]"}], "\[Rule]", 
    RowBox[{
     RowBox[{
      RowBox[{"-", 
       FractionBox["2", "5"]}], " ", 
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{"-", "t"}], "/", "2"}]], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Cos", "[", 
         FractionBox["t", "2"], "]"}], "-", 
        RowBox[{"2", " ", 
         RowBox[{"Sin", "[", 
          FractionBox["t", "2"], "]"}]}]}], ")"}]}], "-", 
     RowBox[{
      FractionBox["2", "5"], " ", 
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", "t"}]], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", 
         RowBox[{"Cos", "[", "t", "]"}]}], "-", 
        RowBox[{"2", " ", 
         RowBox[{"Sin", "[", "t", "]"}]}]}], ")"}]}]}]}], "}"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.6733901085369253`*^9, 3.673390276841797*^9}]
}, Open  ]],

Cell[TextData[{
 "1. Above: Marking the first time I used ",
 StyleBox["Collect", "Input"],
 " that it worked fairly well."
}], "Text",
 CellChangeTimes->{{3.673390724767437*^9, 3.673390762110532*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tum", "=", 
  RowBox[{"rum", "/.", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["2", "5"]}], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Cos", "[", 
         FractionBox["t", "2"], "]"}], "-", 
        RowBox[{"2", " ", 
         RowBox[{"Sin", "[", 
          FractionBox["t", "2"], "]"}]}]}], ")"}]}], ")"}], "\[Rule]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"-", 
        FractionBox["2", "5"]}], 
       RowBox[{"Cos", "[", 
        FractionBox["t", "2"], "]"}]}], "+", 
      RowBox[{
       FractionBox["4", "5"], " ", 
       RowBox[{"Sin", "[", 
        FractionBox["t", "2"], "]"}]}]}], ")"}]}]}]}]], "Input",
 CellChangeTimes->{{3.673390284708518*^9, 3.6733904064350443`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "t", "]"}], "\[Rule]", 
    RowBox[{
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{"-", "t"}], "/", "2"}]], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"-", 
          FractionBox["2", "5"]}], " ", 
         RowBox[{"Cos", "[", 
          FractionBox["t", "2"], "]"}]}], "+", 
        RowBox[{
         FractionBox["4", "5"], " ", 
         RowBox[{"Sin", "[", 
          FractionBox["t", "2"], "]"}]}]}], ")"}]}], "-", 
     RowBox[{
      FractionBox["2", "5"], " ", 
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", "t"}]], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", 
         RowBox[{"Cos", "[", "t", "]"}]}], "-", 
        RowBox[{"2", " ", 
         RowBox[{"Sin", "[", "t", "]"}]}]}], ")"}]}]}]}], "}"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.673390413945827*^9},
 Background->RGBColor[1, 1, 0.85]]
}, Open  ]],

Cell[TextData[{
 "2. Above: I feel confident that using ",
 StyleBox["Expand", "Input"],
 " would have messed it up, so I did the distribution by hand. I did only one \
half of it, leaving the other half for the next step."
}], "Text",
 CellChangeTimes->{{3.6733906978563013`*^9, 3.673390698472682*^9}, {
  3.673390770501934*^9, 3.673390772653927*^9}, {3.673390814292883*^9, 
  3.6733909027377357`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"zum", "=", 
  RowBox[{"tum", "/.", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["2", "5"]}], " ", 
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", "t"}]], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", 
         RowBox[{"Cos", "[", "t", "]"}]}], "-", 
        RowBox[{"2", " ", 
         RowBox[{"Sin", "[", "t", "]"}]}]}], ")"}]}], ")"}], "\[Rule]", 
    RowBox[{"(", " ", 
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", "t"}]], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         FractionBox["2", "5"], " ", 
         RowBox[{"Cos", "[", "t", "]"}]}], "+", 
        RowBox[{
         FractionBox["4", "5"], " ", 
         RowBox[{"Sin", "[", "t", "]"}]}]}], ")"}]}], ")"}]}]}]}]], "Input",
 CellChangeTimes->{{3.6733904376016703`*^9, 3.6733904423632517`*^9}, {
  3.673390477307755*^9, 3.6733905480298653`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "t", "]"}], "\[Rule]", 
    RowBox[{
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{"-", "t"}], "/", "2"}]], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"-", 
          FractionBox["2", "5"]}], " ", 
         RowBox[{"Cos", "[", 
          FractionBox["t", "2"], "]"}]}], "+", 
        RowBox[{
         FractionBox["4", "5"], " ", 
         RowBox[{"Sin", "[", 
          FractionBox["t", "2"], "]"}]}]}], ")"}]}], "+", 
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", "t"}]], " ", 
      RowBox[{"(", 
       RowBox[{
        FractionBox[
         RowBox[{"2", " ", 
          RowBox[{"Cos", "[", "t", "]"}]}], "5"], "+", 
        FractionBox[
         RowBox[{"4", " ", 
          RowBox[{"Sin", "[", "t", "]"}]}], "5"]}], ")"}]}]}]}], "}"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.6733905607320747`*^9},
 Background->RGBColor[0.88, 1, 0.88]]
}, Open  ]],

Cell["\<\
3. Above: Carrying out the other half of the distribution of constants inside \
parentheses. At this point the answer matches the text answer, except that \
rationals are retained in fractional form.\
\>", "Text",
 CellChangeTimes->{{3.673390874074046*^9, 3.673390874618649*^9}, {
  3.673390907033051*^9, 3.673390989310727*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"y", "[", "t", "]"}], "/.", "zum"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "6"}], ",", "6"}], "}"}], ",", 
   RowBox[{"PlotRange", "->", "Automatic"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.673390609747321*^9, 3.673390665129784*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1:eJwVlnc81d8fx8177ZGZkJF5r1IpK94fSlRSKdo0pUiSSplJSJKvlIyKkhUS
JSk+72SvrHuRjOy9RyX53d9fn8fz8TnnvOd5nbfiqUvWZznY2Njes7Ox/f/b
3h9vYdEkgoqXUv/0SRoT/bOhhy1SRFBZ44PHVz8DoiHrCb9JogjSW3hTZLUN
CNI5sUA/XgTXFxZmtHXqE096PynSnojg8Bm/6BBCn9jZNDwkGCyChyb2nEmm
6BFvcixuNp4TwQMbTzTnvtpEeLhxxdqpiSDRqbR3QGs9Ef9o5dM4ZRHMP37v
ke64NlGWt/b599UiWG3VZtuWqU1ILh96aSstgnYf7Z/Lrtcm3t3LeG3FK4IB
3dXTHFfWEl07Mjy8mcI43yemeSRHk/iWue+TkZ0wujo0ToemKxPyc57kR1th
LJJ/6XrURJlwNkz6ummPMI63O60vYSoRfOV/qrQIYXzn8nTEkVOJ2P7z5Q85
JWE0OHTfuP+0AlEoNr+01CeED8oe+xb6yxCZHjFE4UUhVDKb21+TIUh0Yex8
1FkhNPjlNF2kJUCs4H2afvm4EGY7zNnaZPER16OfS6vsFsJjrvNN5gVUgshP
nLxHF8Kmv8ZKavPsRONiZvzhEUEM/jRmEB80ApRtWbYbewQxb1BcMkqzH/RC
3woItgliedzuV1ebuyBO9p0HVgqiX4mhn4xhBTgYfdyrliaIbN+rr/jE/CB/
+Xxlm3MURGl9GRdG2x9Ss6w4t/aEIPLdr9y5zmiJPCZc6pxyiGVPT4z4Eb1M
fnle3nLUQhDdiwZfxStxYAjWZBWpCSIPw/XKkWwKynG0nAjvF8DEf24pEmeF
0fTOKNLOCKBCxphe6kMpHI5lkwo/JoAJ66T+crBLY0S2+MXZAwJYThQJXb8o
jT2dW1YWmAngH16zordbV2KAwf3LVmoCeIFrMC+kTwZLJrSULg/z4+w6H41H
y3LoQjH1YHTzY4ygwwE2e3mUlLOt1W/jx3XLpkaRBfLosNPnJkc1P1qEJ3To
e6xGyqvahocZ/DgSeD+38rICWhy5dDvXlR/DJqJz0yoUcdL1dqvMeX7MeyBb
2TatiE+Cotb5nuTHtLmbR1NWKeHQO7LN3JoftdvMPkk4K2GIsIhO60Z+LF/T
RO7mUcaq4qzexXk+/AcWI5Fr16B7W7HBiQk+jKTuv5m9bw3KTreEFw/w4c4n
vgFu7mvQeTW70f0WPrwiplXclrcGBW7ueySfz4de3sJLdkYqaLVu2szEmw8H
/8qpBm9SRcO6N6NVV/nQWUjf5KK1KqpfvvjQ1oUPB7gzeZddVJEzZ7DLyZ4P
u6qt9DSTVTFvc6fnYxM+bDSWlEkTU0NF4+q3I9x82HBItji5XQ2FOu8euvaP
F39WZncEzqnhX1/zZbYFXowoER2UFlRH5pciS8lBXrTV6t570FAdQ8w+DhCV
vNhzpWyjRaQ6zlomyT0O48UiE/vje/Q08OfY6WKFIF78r29Y7t4uDawNU3R6
7cuLec/f//C108DUurg8dGXZ83hR/+i2BtodeLh/xJoXHX+JzHlXauCuub1/
ru7iRe3/zLlD2zRQ77FQAts2Xrxy/BDVdlQDxVrujkts4sUnq3JsVwtqYvlR
v7uEFGu9VcTu/3Zp4vu/RtpVwrzYX3tu5d0jmvji6SLThocX9Xe/+gznNdG7
89oap9886J3WtjB8RxM3nL5IPmrjQYdJIYOtnzUx9sKRueHnPBgeajSzQ46G
zoITuxujeDClZPKVuQYNt2TdTvr0gAflq37uXNahYcdc+sFQX9b+8hv0Z7to
qHBr+aOWPQ/y+Y35J12l4aRy5ArJgzyoK7H9n68vDb+Uqjv9s2KxuUGf5F0a
nhKwlv1mzINTTXvSfWJpmBiV6OMqz4OBNg08pgU0dDfQbz4kyYMdXuw1K0po
aNZes85EiPWfveBEYjUN+5UWukT/UdFz6sQL/jYa5pbc0/8zR0Wz/g0q3T9p
GOSoENE9RsXmpdOKnoM0VM/csTWnnYqyz6Zp87M0/LW3IzaWQcW4Zk+B1j80
rJhxm71dQ8XWPZ/4/NjoeEE/7tWBAipqbBlmk+Wno+EP7X9b3lMxRWtruagI
HQV8S2xVMqhYKqNiWSNOx4zicep8HBUX9gWtiZKjo8+52yc6Iqn4g/u1WZIi
Ha34pD+WhlLR2frZZy8VOq7OSBd9E0BFVfWmcRkNOk7uMbkQ5UVFWOtgcotO
R5xmFPm6UzEsTXxl1jo6/vfowipHZyruvbD9e/IGOm5oe1itd4yKCrzCqTO6
dOTwUVdRPEBFrdM53hYGdGxUKPDmtaTi2dq5inNb6Jj4dR9zaisV3/l6Te4z
pqO7Q//a74ZUvJv/cD+VoOM2Xs+goo1URFLLJtiEjhLpwl1pNFY+C7ptGaZ0
7LdK1HuoTMWMwsmP41vpmDul95/nKiqGPjPsbNpGx8DImqHTYlR888tSLdiM
jgd1T5la8lNRTO7ANM92Oqp/n4/R4aRiOadq/EEW//K6NyO7SMEAE6NwdxaX
r1aw5J6hoOLSR8UTLI4uepc4NkzBir6TOTIsvnB2xxKjm4KcmvEvE1nnG/B0
2BR+p6DPpTt7/7Hs8712y0xqoOCLqjIpdRa37aZSH1RScOxzka0Sy9/0yVj7
60UU5FO5fmGMFZ/XQ+08+3wK5my99+YuK/7dm0tELFg6vj97p/8CKz/yrYfP
a6dR0OFEkrGuER3HPce/SL+gYEi4DrHDkI6k/G0Z9hgKOjO1u7X06UgJ1xRz
j6BgwX01NiFWPSzZG/gHQijIE/xpU5kOHVt6FJaqPVnrZaMESln1lLcpnwN3
lj+l8SCgRcezpZfGs50puKqpKoOuScfplMLOJ8cpeE1L8tiSMh31ZBxa+G0p
KPChnpapQEffe4L1PlYUTFIbsDFg9ZuAy7GiM8Dy78UZRp8EHVU3/knUVqTg
A+5gvf+46eicmPD05UoKni2qf7iGnY45EjseS66goNYyxfPRXxoSv6KC/nJQ
sFuhn010hoaHCzZdKO/lxmA4fvZaBw3j17afMmznxnhKRdxSC+v+PQ84msng
RmHpCL8zjTR082+0jCzlRiv104caymgYan553YkUbtz7TDN40xsaNuRJqzfG
c6OGefDpLyk0XKmJCtujufGmQvKftS9omCQgvIIewo3+G77ZZUXSEOvTZxec
uPHdhiCO/R40nDk6+PHBOm5s0u5bsDKgoUHNg2wOdW708Zq2Ft9AQz9j3ddX
FbixN6vEhmTplYBiYNxRUZa9e+HbyqRpqNqv7Ks2w4Xyj/oOvJrTxCOu9tvI
XC480yDYUpOmiQE97eMPMrnw1+5s/83xmphpeyz6RBIXqurW3gt4pInsRofH
2R9zYbqaVku9ryam8O5/su0qa3+hlJz+fk2cf7F9tGIjF/7LoFpdn9PACIZW
ZFMWJ64Mu1gXpKGBny3SjV+lcOJGt75YBVkN7P+kOXQ1nhO1L39bkSykgfov
1IylwjnxDOf3Oe8ZdexyURw8fIkT/1w6qXTkszqu5ZHY0qnFiXzM/vvLO9Wx
yuBvz1AaB24OXHvl7nE1NNBb09n1ggMjWrOywqzUMGWT5ffmGA4sSudcDAY1
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
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None},
  PlotRange->{{-5.999999755102041, 5.999999755102041}, {-14.137608058431177`, 
   30.089446703305956`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.673390651036291*^9, 3.673390666337853*^9}}]
}, Open  ]],

Cell["\<\
21.  Beats. Derive the formula after (12) from (12). Can we have beats in a \
damped system?\
\>", "Text",
 Evaluatable->False,
 CellChangeTimes->{{3.768051957891766*^9, 3.7680519910761623`*^9}},
 Background->RGBColor[1, 0.9, 0.8]],

Cell[TextData[{
 "23.  Team experiment. Practical resonance.\n(a) Derive, in detail, the \
crucial formula (16).\n(b) By considering ",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{"dC", "*"}], "dc"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " show that ",
 Cell[BoxData[
  FormBox[
   RowBox[{"C", "*", 
    RowBox[{"(", 
     SubscriptBox["\[Omega]", "max"]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ") increases as c (\[LessEqual] ",
 Cell[BoxData[
  FormBox[
   SqrtBox[
    RowBox[{"2", "mk"}]], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " decreases.\n(c) Illustrate practical resonance with an ODE of your own in \
which you vary c, and sketch or graph corresponding curves as in fig 57.\n(d) \
Take your ODE with c fixed and an input of two terms, one with frequency and \
the other not. Discuss and sketch or graph the output.\n(e) Give other \
applications (not in the book) in which resonance is important."
}], "Text",
 CellChangeTimes->{{3.768051647227314*^9, 3.76805178542526*^9}, {
  3.76805188701267*^9, 3.768051942151458*^9}},
 Background->RGBColor[1, 0.9, 0.8]],

Cell[BoxData[
 RowBox[{"ClearAll", "[", "\"\<Global`*\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.772894595952795*^9, 3.772894596519269*^9}}],

Cell["\<\
After playing with it awhile, I can\[CloseCurlyQuote]t make it look anything \
like figure 57.\
\>", "Text",
 CellChangeTimes->{{3.768066210763797*^9, 3.7680662393448143`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"Plot", "[", 
     RowBox[{
      FractionBox[
       RowBox[{"2", " "}], 
       RowBox[{"c", 
        SqrtBox[
         RowBox[{
          RowBox[{"4", 
           SuperscriptBox["\[Omega]", "2"]}], "-", 
          SuperscriptBox["c", "2"]}]]}]], ",", 
      RowBox[{"{", 
       RowBox[{"\[Omega]", ",", "0", ",", "2"}], "}"}], ",", 
      RowBox[{"PlotRange", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "2"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "2"}], ",", "12"}], "}"}]}], "}"}]}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"c", ",", "0.1", ",", "2", ",", "0.4"}], "}"}]}], "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.768064111254718*^9, 3.768064164503276*^9}, {
   3.768064614030438*^9, 3.768064703679491*^9}, {3.768064747476727*^9, 
   3.7680647835465508`*^9}, 3.7680648461271057`*^9, {3.7680650222701483`*^9, 
   3.768065029123591*^9}, {3.768065066961575*^9, 3.768065067577218*^9}, {
   3.7680655960091257`*^9, 3.768065672444437*^9}, {3.7680657142739697`*^9, 
   3.768065735128343*^9}, {3.7680658101975803`*^9, 3.768065838066052*^9}, {
   3.768065875688143*^9, 3.768065877991536*^9}, {3.7680659094296207`*^9, 
   3.7680659095658092`*^9}, {3.7680659483168983`*^9, 
   3.7680659999361477`*^9}, {3.768066054950156*^9, 3.768066057700437*^9}, {
   3.768066119890387*^9, 3.768066128992231*^9}, 3.768212549347454*^9}],

Cell[TextData[{
 "However I did run across the exact desired plot on the site of Nasser M. \
Abbasi,\n",
 StyleBox["https://12000.org/my_notes/mma_matlab_control/KERNEL2/index.htm#x1-\
20001.1",
  FontSize->14,
  FontSlant->"Italic"],
 ", at approx 22 percent scroll. Text notes from that site include the \
following: \[OpenCurlyDoubleQuote]Problem: Plot the standard curves showing \
how the dynamic response ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["R", "d"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " changes as r = ",
 Cell[BoxData[
  FormBox[
   FractionBox["\[Omega]", 
    SubscriptBox["\[Omega]", "n"]], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " changes. Do this for different damping ratio \[Xi]. Also plot the phase \
angle. These plots are the result of analysis of the response of a second \
order damped system to a harmonic loading. \[Omega] is the forcing frequency \
and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Omega]", "n"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " is the natural frequency of the system.\[CloseCurlyDoubleQuote]"
}], "Text",
 CellChangeTimes->{{3.7682125649870043`*^9, 3.7682126115680113`*^9}, {
   3.76821265204673*^9, 3.768212673916832*^9}, {3.768212741497171*^9, 
   3.7682129071171618`*^9}, {3.76821322513013*^9, 3.7682132347369337`*^9}, 
   3.7682134983666143`*^9}],

Cell["Note: I have not yet included the plot of the phase angles.", "Text",
 CellChangeTimes->{{3.76821351412066*^9, 3.768213532644087*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Rd", "[", 
     RowBox[{"r_", ",", "z_"}], "]"}], ":=", 
    RowBox[{"1", "/", 
     RowBox[{"Sqrt", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", 
          RowBox[{"r", "^", "2"}]}], ")"}], "^", "2"}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"2", " ", "z", " ", "r"}], ")"}], "^", "2"}]}], "]"}]}]}], 
   ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"phase", "[", 
     RowBox[{"r_", ",", "z_"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "t", "}"}], ",", 
      RowBox[{
       RowBox[{"t", "=", 
        RowBox[{"ArcTan", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"2", "z", " ", "r"}], ")"}], "/", 
          RowBox[{"(", 
           RowBox[{"1", "-", 
            RowBox[{"r", "^", "2"}]}], ")"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"t", "<", "0"}], ",", 
         RowBox[{"t", "=", 
          RowBox[{"t", "+", "Pi"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"180", "/", "Pi"}], " ", "t"}]}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"plotOneZeta", "[", 
     RowBox[{"z_", ",", "f_"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"r", ",", "p1", ",", "p2"}], "}"}], ",", 
      RowBox[{
       RowBox[{"p1", "=", 
        RowBox[{"Plot", "[", 
         RowBox[{
          RowBox[{"f", "[", 
           RowBox[{"r", ",", "z"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"r", ",", "0", ",", "3"}], "}"}], ",", 
          RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
          RowBox[{"PlotStyle", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"Blue", ",", 
             RowBox[{"Thickness", "[", "0.003", "]"}]}], "}"}]}]}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"p2", "=", 
        RowBox[{"Graphics", "[", 
         RowBox[{"Text", "[", 
          RowBox[{"z", ",", 
           RowBox[{"{", 
            RowBox[{"1.1", ",", 
             RowBox[{"1.1", 
              RowBox[{"f", "[", 
               RowBox[{"1.1", ",", "z"}], "]"}]}]}], "}"}]}], "]"}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"Show", "[", 
        RowBox[{"{", 
         RowBox[{"p1", ",", "p2"}], "}"}], "]"}]}]}], "]"}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"p1", "=", 
   RowBox[{"Graphics", "[", 
    RowBox[{"{", 
     RowBox[{"Red", ",", 
      RowBox[{"Line", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "6"}], "}"}]}], "}"}], "]"}]}], "}"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"p2", "=", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"plotOneZeta", "[", 
        RowBox[{"#", ",", "Rd"}], "]"}], "&"}], ",", 
      RowBox[{"Range", "[", 
       RowBox[{".1", ",", "1.2", ",", ".2"}], "]"}]}], "]"}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{"Show", "[", 
  RowBox[{"p2", ",", "p1", ",", 
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<Subscript[R, d]\>\"", ",", "None"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "\"\<r= \[Omega]/Subscript[\[Omega], n]\>\"", ",", 
        "\"\<Dynamics Response vs. Frequency ratio for different \[Xi]\>\""}],
        "}"}]}], "}"}]}], ",", 
   RowBox[{"Frame", "\[Rule]", "True"}], ",", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"GridLinesStyle", "\[Rule]", "Dashed"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "350"}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", "1"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.768172625310595*^9, 3.768172625321033*^9}, {
  3.768213037879334*^9, 3.768213173956036*^9}, {3.7682133033341837`*^9, 
  3.768213303572056*^9}}],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     {RGBColor[0, 0, 1], Thickness[0.003], Opacity[1.], 
      LineBox[CompressedData["
1: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
kn8L8T/6HlEf
       "]]}}, 
    InsetBox["0.1`", {1.1, 3.616777720717859}]}, {{{}, {}, 
     {RGBColor[0, 0, 1], Thickness[0.003], Opacity[1.], 
      LineBox[CompressedData["
1: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
wBDT2U7D/wG2INvA
       "]]}}, 
    InsetBox["0.30000000000000004`", {1.1, 1.5882096333554363`}]}, {{{}, {}, 
     {RGBColor[0, 0, 1], Thickness[0.003], Opacity[1.], 
      LineBox[CompressedData["
1:eJwV13k8VN8bB3AiUxIlWSr7lkjaaP8MpUUKWYsUslRCSPJVlkLJlqVS1srS
nlSkjD2ULYWiCLPYm7mSKPzOb/6Z1/t1750559zn85x7FR09DzjP4uPj0+bn
4/v/95+9Hqmmnl7b5vL9/8PFQaHQRY1q+1Hx4e7p/zsjDlbRavaYbR/xjp9Y
WOzIta8pLlh44cG0AHGFZdpZdzUPWNaLLKERb2sYeTLT5g2X6sfS84hvnxZV
qk3xg0B51KQY8R8J7aR4hwDMGc4tWUxsWbhvjp3aBfge4HdbRvz18avi+LFg
2LQmjioTRwTtPDveForvuo6OWsS6Zq06dkWXoC3i9mI9MVPJZaA0JRzBNff6
QRz/a+yuatBl/CuQnLWXWP9d2OFIh0i84Xs7ZUWcdjyryVwtBo1nb6adJs5O
XWJoJxiHlLUftgcTXwjvyYwZi0OI0/K6WGItG2/b0bZ4nEuyDs8jFtDfVKha
m4AQSrmwgrhdY9Zim6JEnDonVt9KfPnvtYa3Kdchs0gvY4b4CPOg5s/oG9A3
drdfzE/GX694WTHoJsb+Pp/RJGal5emHO9xC8VHnQVtiA4OPL0zU0jCkMODy
jlhGM3lhqFQ6xqf1tvYS/7mio3dIMAOMFN/ffLO4aPL+kxA1loHWhqyFIL6w
4/I+XtsdRFiZDVQRD2wY+i/S9C6C44La+oktV5o+UK69iwmOZ46oAJmfpDTN
quge1NLP/zxE3M7JKS1KycYyWoL8NPHOb/N+mi/OwVFFGSUNQS7ymjxlh6Nz
YH11Bc2S+PJrvQD5oFyoNzf5PyXWu1q99pLDA6y5YjzhMZuLRG1O9j61J9CW
CHKVpnHxXrCjYN79J5i/odnVipivo6GmVvMpaveXnk4ifrXdduyO9DMcurDh
juQcLpS4BlLycnkw3CXjqzqXi8nd4rZSGvkY86lv8J3HxeJ1UU5+J/KhfGeJ
YwWxjryQe8vDfJzaLT4tLsKFy9hEYIL2CwTXvTF5Sdyc2Z0mtu4l8jYJ2giJ
cvFg8lkPDQWo1OAMfl3ARRVrxaBLcAGsb2rzb1zIxY+me6NVZQUwShqUTSaW
zLkpeGlHIdZSHqfsxLkINQ9W4zN6javO6o4/F3Fx6JHJiT8Wb/BAiBG9U4rk
xX6E13eiBNIvYvVey3Hh1/JxgsopQdNYfqSOPBe9xi/5p5glsBO5W5pL3CnL
uHx5VSkSG85+vq1A1kMk7GbK/VKcExVKjlIi8xkQL6xMLUNGkdj5m2pcvMvS
HpcIr4AZv0OHzSouAh0U/ibfq0CTdOv+IeI1suIzchUV2HB2VWawDqn/xDEh
Db5KNJT/7X64mozn4lvJrQGVMNPuahRZx4Wag5Gus0cVDvi82fRnA8nfMpcz
L62qQfsQqu67nYvlT/N0M32r4TxrpkB+B7mf+lPjUfHV0IxJkKkjFnVNDDjW
UI3YzD0m6ju5uJ5XHrRoZw1yyh8HcXaTvO2Ujzy9vhZsbVptzH6y3l5f0lZK
fECrUfTVs4dIvqqMarI+NqD+klbyPV8upE03lS+hGuA3qhmddIbUa4fG21jx
Rvy51nQswo8LK96cZ+fMGzHtd6L4lD8XubLVN/a1NMJn3GKOYSCZz5vM/AD3
JnxujM6SvUTGu0juopLXR0zzZBt8ErlYVCWp5H32E6onWZ+vF5D1HsqwKqO3
QbSPOTLOx8MjpQfperYdmLG7oTFhw4O87khCmGMXjCpDBpOf8xB6P/lq9Oku
CBuWq7PyeWAuM7yYFNyFV9MuyjovecgVSPHOSuvCorANZlUFPOh83GNW1d6F
pNRJ06G3PCi8OhARqvED341tNTSryXGzJzvKM3+AX6tWyL6DB7MI5xL9+G7E
+agqyc+iIIdjc91udePQJqFORwEKQ78dzWPudENo9pPcLEEKl12Octqfd6Pc
NefwchoFhqGtmO+nbhinDg4pilDQEjQ7ki3RgwpRp7qexRRoIVtmhG/0IOGc
v9Wl5RQ+b9i8Z3V6D4zsbl67q0HhDndjgnVODx5cfelVtoLCtqN66vcKevDm
QYfIhBYFX6wx2fqlB8e0Jw9ar6bQM6We7inTC3P+/uX1GykUByzC59u9kHYK
WHNpDwWJYzN9nnd7EbD76y4HIwru+wbj5z3shf7BxJoteyksU6hgGxT1os75
x8yIMYXAKu+YvC+9sMO3nzClsGlB8/eYxUx81vJQumZFIX6iOGKFLBPMVxKB
5tYUBnrur36nwsQs+/tiEjYUkl+GhE2tZULgl/KX2IMU/hxavdL9ABOHxQav
n7ajUJAVF7gnlontO51FOxwoiMYGqrGuMxHXnxgb5EjBxd+tKTiNiYLSeGkl
JwqSe+kqhY+ZUDB1Xu9wjIIf9+cHtTomYuytDKpdKDR87ThT/okJiaD++7au
FNQqquXtO5iwHVTkGyFuSUr3SRpg4ozQz5Mixyms22yyVHAuCxaS//pWnaQQ
pbK5Kn0BC8n1RafyiZnz1T03S7Nwb2iqep07hYQf0+Xe6ixsuR7B1TlFgQp7
cqLbkIWNLL4iUU8KRp63JM7vY+G864aEYOI7NuEMaUsWOLY/l3OJD2jai5se
Y+HqkPP5Gi+K9PP5RYxQFqSPnvI57E2hcpXponWRLDy5MjpdRNwaE+9+/xoL
P5RKDCV9KPwzlpJPzGBBNzh8oopY7NFB/7m5LPB6Xxxd4ktBaV7KxwtPWfgr
HHPWnXh3rcKl4wwWQm89z517hoLtcqfvnVUsPJLaVGxB7BGRpWtRz4LPdeaZ
VOIEwxX9276x8NJQo0bdj0Jn2dr9EpMsDCp7ZcifpcBT8Mu5ws9G0K7Z4dbE
gsGFfDNz2MjS5P2JItbYtjW/X4qNsj1h/3GJt6QGiRyRZ6OGEx0m509h/78y
589qbHirPFloROxbtFO6ZD0bPyyEs5KJI2SunF63lQ2PCy+zi4lv+X94f38H
G541VvJdxI/a5qvIG7OxoGaFyDRxia7p+URzNvareJ1Yco5Cc1J861xbNnQy
XfXWETN/fV4V5MiGsKaF117icXOpK7+Os8HoDhA/Siycf7Dn+Gk2FqooL/Um
lhVP2dzlz8bUresRIcQ6pzsTLYLZmG+oaBlDbNCkMFIbQa4PWRhyk9hyldMu
xLLRv6xwTgaxW0xWxovrbGgdcuu/RxwwzJnQSGPDkc9fIYc42niFeXoWG5LO
eJhNnPHQ/ZHEYzYE/WUi7hLnCz+dHfmCjesNTnmpxO+O8+xn3rDh/vSCehLx
15q1hb4VbHBk69lXiIfU/RYOvGfjMevF0H/EM+GFJ440s7ErO033JLE4e7Li
81c2cjrHyqyJVQy3yhp1k/vxZ3mUPrHevSC/kj42tlvej19ObCRQ3riOy0av
1WCzCLGdo6DGg3E2TDxcjEbIenuW7QyVn2HjtmrS7zriUIUrHYlCHIxojn3O
JU4K+rBOWJQDOQdabwhxbuf8mKDFHFh3m8jZEDekxNNPqHDQln1P/B+pj+6/
n5O7NDl4WFT7rpb41yGpUYu1HHyvt0pLJJaRScmCAQddFnxPFIm1/DunX+wh
5xuZdfeS+tzWpmCzwoyDmUM+2neJjyVlCS8+ysH6hDciMsSJ1ILnWm4c5Ptr
bqgl9V1hEnhwhxcHrYqZI2eIlYTNc32COYgq+MGtJHk54MowuXqZg7MZX3Vd
iUMqNcbvxHFg4Kb7bzbxjwt8O5szyPluryY2kPwt+HZyuD+XA3u99Vr1JK/Y
2JbIn8cBtbax+f95Tht93KtTRv7/2d7TvqdJ/txsQ2K7OejQ9svxI/0gsurd
8px+DhK9XmqPeFAoUlrTxOBxyHPtbQlHYunvc+RH+PvwaWIxtY30m1azV2+N
lfrAy7R5XHeCgtBTxWPHVvThnNiqXjXi9SLR8wLX9KH8VYPTedLfEt85HXpo
0AcJtb+b5d3I/DYv/DPXqQ+78iJpus7k/t0MTFc82YcZ+6kD3qSf5o1xdm70
6YPnLIm2B6TfLnjGSHK72If2sbvBC0g/blBxX1t9tw9fJ3Xkn9hTmA5pa+98
2IdLqd5jHw5TWNllEPo7vw/5M3N/sUh/j0qW+aha2QeGTpajqC2FPaLVHpeY
fci8o9esQ/YL/5NrJFOG+mC/5XbBKrKf5NakFuf/6sNY8eSrFZZkfhd9RXoF
+3FRZumUhDnpj+OKD/RV+/GH9iKgaD8Fencga9q5H3oKFWO7DClMerYMXT3V
j9WZg+ayO0ieplf+kj7Tj5+f8jf+NCD7wbKuWWsv9aMk8OrNy3QKItb6Cq53
+qFrlXf12maSr7rZto2d/Vgacirzrw7Z32ztHe3Y/eAWLFuWvIqC8cCr4/3D
/TB/vnbRWm0KpTQ3f4GpflxeWOFrp0kh2+B9kt7SAWTGKE9eUqXgXRjTlG49
AH/zog9aMqR+d3HatI4MYEaTw7wmRYHVgq7XLgNQ2+LjN0qeB2xGucOfzgzg
qcH9WY/EST1pm8+bkziAL5U6ZdQ8Mt57Uju9mgbAzHD81zrFQ1Zsxhv6nkGE
Cv1WnurkIXCZ0kIvs0GoxGsyqr7xcOD+XZf0g4PIDY3dHtnOw3R59sLp44NY
Y5EnQWvlwer3I9c3kYO4Ub/9V2MdD3MOv16kW0d+74xrf/prHtxXNJ/UNBlC
pnNq+Y44HgwKzMsOWQ8h6eSu1uhoHqR3tEhGHhlChlyl6KdIHqoOfynr8xzC
DvbYuFkYD3LXOqWy44awXvciTzGAh6bxgQqF5iHEyNp8FHHiYV2VwDJJy2Hc
yFgQp7SGXF/doSB/eBhZHvPDBFeR8b3PV13uPIzQvFbZXk0ezjU6rdp0Zhhf
jgjsvq7KA+NrhYF90jB0vuZ/+yzNw66Ri8ezW4bhtS9c5NU0eR+QEizQtRrB
pkfnKMUaLkKOCx6wtv6JKuf46MADXGgW5ur73+YiXav30y3GCDRnPNJj0nkY
rDBc2Rc2BM+zHZOm8aSOiy+6Xzk+gN35rksPJ4/CNLalpUO7D8HZ5Wrpt39h
z+CrvSZybPx7X7EqOmoMX5581Cy1ZGJ+PnOq8tpv3N58MHziWg8c6x7W5oaN
Yz89qfOeRDckU/WDy33/4GVD9o/SsC4cWT3+V9V/Ap9sO7/4jX7D8O8DZ9af
mIRIfddAcl07xIIb8mO8/sKsQyzB4uUXXCuV/i7r/Q8Fr5rqtna1wnrNXMGD
jlNkv7N7FGDRgueuMtzvLtOo+Hyr9UTzJ5g1NH4VPTSD7WXnTQeimrHcb0Xb
JhU++pO6TxvfnvgIHvufckIWH73dP+l4lHET7LzueOrL8dNDHuZFfX/egPiO
tlSJTH66cHvLwbGPdThx5Mf7rUtn0bUKeDEReh/A22Y6zJ8wi27NLf3Pv6oW
2/lMqQEJAfpFvWqDMxY10GtX+q0RI0B35aq220hVYywp7Fv0QkG6nOVeM4f2
Kjg9NimMihek30yJPez3phI+34fiu4Vn0w25h83syHvUvp8yprbRs+lOsnGn
UmvL8V5miYgmTYieVtx7t5tbht/pIcVJF4TohnPW6J9cUYZh2jkzVT4a3Xx0
61w3h1KEX97OFD5Ho09MaAZsPFaCitvXCtX+o9EPX/jybL99CfiedkUZnKfR
Ldep33C2KcG5lv/WB4TQ6ApuS7xuGpfAXelFeP8VGj3F2EdffH0JzN6qaNTc
otH5nr/7ZClUgmXc2R5hb2n0I293Wko/YMBGwMIgk0Gjb5N7s8vxHgNJknck
i0tp9P4t31oepzEgunVbya9KGv2sz+vyPQkM8Ef6LThWT6M7DfE1JAYywFbm
PDfopNGTZgpVzpowoKy3PsL+B41eNf3vSvseBo4aXbQN6CHHdzuEYAcDX73k
BZ+zafRCs9UqohsZqCu2tlT8SaNvvR2lwVBiYM7HLI2tPBpd85iHmLYsA4bM
0SmbURrdu6AyNF2KAYZwXHbcOI3eqH9BLEKEgb+ynQGPJmh01erX6lNCDGxY
rWVS85dGl/RZ8sGXnwHfHQHKzCkafYH0/Inhv8XIs64Zn5mh0Z/WTT9z+12M
/wHIhl2l
       "]]}}, InsetBox["0.5`", {1.1, 0.9822603219536675}]}, {{{}, {}, 
     {RGBColor[0, 0, 1], Thickness[0.003], Opacity[1.], 
      LineBox[CompressedData["
1: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
2iJhH7Rqd8nokOF/BDY/oA==
       "]]}}, 
    InsetBox["0.7000000000000001`", {1.1, 0.7077358343173563}]}, {{{}, {}, 
     {RGBColor[0, 0, 1], Thickness[0.003], Opacity[1.], 
      LineBox[CompressedData["
1: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
MMVe
       "]]}}, InsetBox["0.9`", {1.1, 0.5524569914990429}]}, {{{}, {}, 
     {RGBColor[0, 0, 1], Thickness[0.003], Opacity[1.], 
      LineBox[CompressedData["
1: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
Vta2+dr5PPwfJXZizg==
       "]]}}, 
    InsetBox["1.1`", {1.1, 0.45284364539239536`}]}, 
   {RGBColor[1, 0, 0], LineBox[{{1, 0}, {1, 6}}]}},
  AspectRatio->1,
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->True,
  FrameLabel->{{
     FormBox["\"Subscript[R, d]\"", TraditionalForm], None}, {
     FormBox["\"r= \[Omega]/Subscript[\[Omega], n]\"", TraditionalForm], 
     FormBox[
     "\"Dynamics Response vs. Frequency ratio for different \[Xi]\"", 
      TraditionalForm]}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->Automatic,
  GridLinesStyle->Dashing[{Small, Small}],
  ImageSize->350,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None},
  PlotRange->{All, All},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.768213113024625*^9, 3.7682131747808723`*^9}, 
   3.768213304312923*^9}]
}, Open  ]],

Cell[TextData[{
 "25.  CAS Experiment. Undamped vibrations.\n(a) Solve the initial value \
problem \n",
 Cell[BoxData[
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"y", "''"}], "+", "y"}], "=", 
    RowBox[{"Cos", "[", 
     RowBox[{"\[Omega]", " ", "t"}], "]"}]}], ",", " ", 
   RowBox[{
    SuperscriptBox["\[Omega]", "2"], "\[NotEqual]", "1"}], ",", " ", 
   RowBox[{
    RowBox[{"y", "[", "0", "]"}], "=", "0"}], ",", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"y", "'"}], "[", "0", "]"}], "=", "0."}]}]]],
 "\nShow that the solution can be written\n",
 Cell[BoxData[
  RowBox[{
   RowBox[{"y", "[", "t", "]"}], "=", 
   RowBox[{
    FractionBox["2", 
     RowBox[{"1", "-", 
      SuperscriptBox["\[Omega]", "2"]}]], 
    RowBox[{"Sin", "[", 
     RowBox[{
      FractionBox["1", "2"], 
      RowBox[{"(", 
       RowBox[{"1", "+", "\[Omega]"}], ")"}], "t"}], "]"}], 
    RowBox[{
     RowBox[{"Sin", "[", 
      RowBox[{
       FractionBox["1", "2"], 
       RowBox[{"(", 
        RowBox[{"1", "-", "\[Omega]"}], ")"}], "t"}], "]"}], "."}]}]}]]],
 "\n(b) Experiment with the solution by changing \[Omega] to see the change \
of the curves from those for small \[Omega] (>0) to beats, to resonance, and \
to large values of \[Omega] (see the figure below)."
}], "Text",
 CellChangeTimes->{{3.768051327136065*^9, 3.768051366356167*^9}, {
  3.768051433489464*^9, 3.768051450294797*^9}, {3.768051523507884*^9, 
  3.768051592109789*^9}, {3.768063535424122*^9, 3.7680635369115562`*^9}},
 Background->RGBColor[1, 0.9, 0.8]],

Cell[BoxData[
 RowBox[{"ClearAll", "[", "\"\<Global`*\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.772894610704274*^9, 3.772894611118801*^9}}],

Cell["\<\
Part (a). With the green cell below showing true, part (a) is complete.\
\>", "Text",
 CellChangeTimes->{{3.768062636118578*^9, 3.7680626776471167`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"eqn", "=", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"y", "''"}], "[", "t", "]"}], "+", 
    RowBox[{"y", "[", "t", "]"}]}], "==", 
   RowBox[{"Cos", "[", 
    RowBox[{"\[Omega]", " ", "t"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.768062218298108*^9, 3.76806223056951*^9}, {
  3.7680623350001793`*^9, 3.768062377594716*^9}, {3.768062463662819*^9, 
  3.768062485499875*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"y", "[", "t", "]"}], "+", 
   RowBox[{
    SuperscriptBox["y", "\[Prime]\[Prime]",
     MultilineFunction->None], "[", "t", "]"}]}], "\[Equal]", 
  RowBox[{"Cos", "[", 
   RowBox[{"t", " ", "\[Omega]"}], "]"}]}]], "Output",
 CellChangeTimes->{{3.7680624677416487`*^9, 3.7680624875889883`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sol", "=", 
  RowBox[{"DSolve", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"eqn", ",", 
      RowBox[{
       RowBox[{"y", "[", "0", "]"}], "\[Equal]", "0"}], ",", 
      RowBox[{
       RowBox[{
        RowBox[{"y", "'"}], "[", "0", "]"}], "\[Equal]", "0"}]}], "}"}], ",", 
    "y", ",", "t", ",", 
    RowBox[{"Assumptions", "\[Rule]", 
     RowBox[{
      SuperscriptBox["\[Omega]", "2"], "\[NotEqual]", "1"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.76805145444683*^9, 3.7680515215824957`*^9}, {
  3.768062344421948*^9, 3.7680623502697573`*^9}, {3.768062396306673*^9, 
  3.768062449381975*^9}, {3.7680625052510853`*^9, 3.768062539920277*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"y", "\[Rule]", 
    RowBox[{"Function", "[", 
     RowBox[{
      RowBox[{"{", "t", "}"}], ",", 
      FractionBox[
       RowBox[{
        RowBox[{"Cos", "[", "t", "]"}], "-", 
        RowBox[{
         SuperscriptBox[
          RowBox[{"Cos", "[", "t", "]"}], "2"], " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"t", " ", "\[Omega]"}], "]"}]}], "-", 
        RowBox[{
         RowBox[{"Cos", "[", 
          RowBox[{"t", " ", "\[Omega]"}], "]"}], " ", 
         SuperscriptBox[
          RowBox[{"Sin", "[", "t", "]"}], "2"]}]}], 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        SuperscriptBox["\[Omega]", "2"]}]]}], "]"}]}], "}"}], "}"}]], "Output",\

 CellChangeTimes->{{3.768062491392951*^9, 3.768062541515852*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PossibleZeroQ", "[", 
  RowBox[{
   FractionBox[
    RowBox[{"2", " ", 
     RowBox[{"Sin", "[", 
      RowBox[{
       FractionBox["1", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", "\[Omega]"}], ")"}], " ", "t"}], "]"}], " ", 
     RowBox[{"Sin", "[", 
      RowBox[{
       FractionBox["1", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"1", "-", "\[Omega]"}], ")"}], " ", "t"}], "]"}]}], 
    RowBox[{"1", "-", 
     SuperscriptBox["\[Omega]", "2"]}]], "-", 
   FractionBox[
    RowBox[{
     RowBox[{"Cos", "[", "t", "]"}], "-", 
     RowBox[{
      SuperscriptBox[
       RowBox[{"Cos", "[", "t", "]"}], "2"], " ", 
      RowBox[{"Cos", "[", 
       RowBox[{"t", " ", "\[Omega]"}], "]"}]}], "-", 
     RowBox[{
      RowBox[{"Cos", "[", 
       RowBox[{"t", " ", "\[Omega]"}], "]"}], " ", 
      SuperscriptBox[
       RowBox[{"Sin", "[", "t", "]"}], "2"]}]}], 
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     SuperscriptBox["\[Omega]", "2"]}]]}], "]"}]], "Input",
 CellChangeTimes->{{3.768062572627941*^9, 3.7680625991899853`*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.768062600817937*^9},
 Background->RGBColor[0.88, 1, 0.88]]
}, Open  ]],

Cell["\<\
Part (b). Many possible versions of the solution function can be had. The \
following three, which resemble the plots in figure 60 in the text, are a \
good sample.\
\>", "Text",
 CellChangeTimes->{{3.768062700925456*^9, 3.768062762825638*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Labeled", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       FractionBox[
        RowBox[{"2", " ", 
         RowBox[{"Sin", "[", 
          RowBox[{
           FractionBox["1", "2"], " ", 
           RowBox[{"(", 
            RowBox[{"1", "+", "\[Omega]"}], ")"}], " ", "t"}], "]"}], " ", 
         RowBox[{"Sin", "[", 
          RowBox[{
           FractionBox["1", "2"], " ", 
           RowBox[{"(", 
            RowBox[{"1", "-", "\[Omega]"}], ")"}], " ", "t"}], "]"}]}], 
        RowBox[{"1", "-", 
         SuperscriptBox["\[Omega]", "2"]}]], ",", 
       RowBox[{"{", 
        RowBox[{"\[Omega]", ",", 
         RowBox[{"{", "0.2", "}"}]}], "}"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", 
       RowBox[{"20", "\[Pi]"}]}], "}"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Thickness", "[", "0.005", "]"}], ",", 
        RowBox[{"RGBColor", "[", 
         RowBox[{"0.2", ",", "0.65", ",", "0.85"}], "]"}]}], "}"}]}], ",", 
     RowBox[{"Ticks", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", 
          RowBox[{"10", "Pi"}], ",", 
          RowBox[{"20", "Pi"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}]}], ",", 
     RowBox[{"AxesStyle", "\[Rule]", 
      RowBox[{"Thickness", "[", "0.004", "]"}]}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "230"}]}], "]"}], ",", 
   "\"\<\[Omega]=0.2\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.768051377539364*^9, 3.768051431747064*^9}, {
  3.768054622162325*^9, 3.768054696028977*^9}, {3.76805474435555*^9, 
  3.768054761448709*^9}, {3.768054902777486*^9, 3.768054934654245*^9}, {
  3.768054968732791*^9, 3.768055004553239*^9}, {3.768055036255805*^9, 
  3.7680550752688017`*^9}, {3.7680552319954453`*^9, 3.768055454692892*^9}, {
  3.768055627067865*^9, 3.768055628377974*^9}, {3.7680558109843082`*^9, 
  3.768055837988908*^9}, {3.7680558950979347`*^9, 3.7680559500054817`*^9}, {
  3.768056307815996*^9, 3.76805638586594*^9}, {3.768056421555378*^9, 
  3.76805645457358*^9}, {3.7680619878032722`*^9, 3.768061988091159*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{}, {}, {
       Directive[
        Opacity[1.], 
        AbsoluteThickness[1.6], 
        Thickness[0.005], 
        RGBColor[0.2, 0.65, 0.85]], 
       LineBox[CompressedData["
1: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
JjpyUf9/l900SQ==
        "]]}}}, {
    DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, AxesStyle -> 
     Thickness[0.004], DisplayFunction :> Identity, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], ImageSize -> 230, 
     Method -> {
      "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
       AbsolutePointSize[6], "ScalingFunctions" -> None}, PlotRange -> 
     NCache[{{0, 20 Pi}, {-1.8913690898426925`, 1.8913691754982458`}}, {{
        0, 62.83185307179586}, {-1.8913690898426925`, 1.8913691754982458`}}], 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {{{0, 
         FormBox["0", TraditionalForm]}, {
         NCache[10 Pi, 31.41592653589793], 
         FormBox[
          RowBox[{"10", " ", "\[Pi]"}], TraditionalForm]}, {
         NCache[20 Pi, 62.83185307179586], 
         FormBox[
          RowBox[{"20", " ", "\[Pi]"}], TraditionalForm]}}, {{-1, 
         FormBox[
          RowBox[{"-", "1"}], TraditionalForm]}, {1, 
         FormBox["1", TraditionalForm]}}}}],"\"\[Omega]=0.2\""},
  "Labeled",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"]}, {
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, 
    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
    BaselinePosition -> {1, 1}]& ),
  InterpretationFunction->(RowBox[{"Labeled", "[", 
     RowBox[{#, ",", #2}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.768056340642138*^9, 3.7680563865158997`*^9}, {
   3.768056427616185*^9, 3.768056455346265*^9}, 3.76806198918051*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Labeled", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       FractionBox[
        RowBox[{"2", " ", 
         RowBox[{"Sin", "[", 
          RowBox[{
           FractionBox["1", "2"], " ", 
           RowBox[{"(", 
            RowBox[{"1", "+", "\[Omega]"}], ")"}], " ", "t"}], "]"}], " ", 
         RowBox[{"Sin", "[", 
          RowBox[{
           FractionBox["1", "2"], " ", 
           RowBox[{"(", 
            RowBox[{"1", "-", "\[Omega]"}], ")"}], " ", "t"}], "]"}]}], 
        RowBox[{"1", "-", 
         SuperscriptBox["\[Omega]", "2"]}]], ",", 
       RowBox[{"{", 
        RowBox[{"\[Omega]", ",", 
         RowBox[{"{", "0.9", "}"}]}], "}"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", 
       RowBox[{"20", "\[Pi]"}]}], "}"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Thickness", "[", "0.005", "]"}], ",", 
        RowBox[{"RGBColor", "[", 
         RowBox[{"0.2", ",", "0.65", ",", "0.85"}], "]"}]}], "}"}]}], ",", 
     RowBox[{"Ticks", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", 
          RowBox[{"10", "Pi"}], ",", 
          RowBox[{"20", "Pi"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "}"}]}], ",", 
     RowBox[{"AxesStyle", "\[Rule]", 
      RowBox[{"Thickness", "[", "0.004", "]"}]}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "230"}]}], "]"}], ",", 
   "\"\<\[Omega]=0.9\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.768061927040452*^9, 3.768061933110976*^9}, {
  3.7680619662934093`*^9, 3.7680619678127337`*^9}, {3.768061999778824*^9, 
  3.7680620003144617`*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{}, {}, {
       Directive[
        Opacity[1.], 
        AbsoluteThickness[1.6], 
        Thickness[0.005], 
        RGBColor[0.2, 0.65, 0.85]], 
       LineBox[CompressedData["
1:eJwUl3c8lt8bx+299/Yse++Z+3qQiESRMgqRFfkKlSIhW1RGZJQRlZVSQhyj
oRQSobLJJtlRv+f31/26Xtc51/mczznnPu+Ddz93xJOGiorKh4GK6v/f9oCU
FufoWqM+N4495sWz+/rYv3xdbbiNTd1SVy09JovVJ4r0vG0ownZ+TbKp2Ztj
iRyW2pnZFdjHqX/rdS5OmFLHq0M1DU+xptARi04bb4yP9Vhk9qM6zOIVzZ2i
3SBs12qpJjL7FcaTGpa3feQyFnSgbVXDtAVrdh+1202Pws54cyaXNrRhSTeN
vTaxeMwxwUlKVOMN5ptyefv8wxuY9aPSphuP3mHGrFLXFWZuYcYffjvQED5g
JjM4j5rBTEx7AfsVkv0RO/7OxeWe7F0sg8HsdTBTN/as+tqm9pcCjFNw4aay
aQ+Wg8697/UvxGh1dRUKG3qxqyfnZcz2SrEr5sObTptfsGIalkZmpsfYxvGY
dn6NfmyYwevKR6NKbO5St0vCowFMR4XZhjmrBvNIDJU3mR7ErpG0nlUFPcOG
c8Q2d/HfsEKLrFL86efY5wbvtMDsH9ia9Ad7lmv1mFUnh4t83zC2XFDy+11F
I3Y6YIgviGkUE3/R9Hd8sQn7ERE5pmA6huXdiF8w723Bego6wwoaJrCTpwS/
7Gy8wTjKJN2unJjEmK8sb43ZvcMOVgcdOLFJieuIUU/rO7B2JMTHqzGN7SXv
ZfDndWJ1Yx4VsY9mMFXX33Qtjj3YPeLeiH/2Ipb8aaX2985XrK43k5Df8BvL
KCKyu+ImMKEmGiNV7jXMVhJzmbk7gV0sCzjRemYNm6f9dfStwCSmF26WNs29
jr2T0GnlZZnC6qU39pS9NzCNX6krlRPTmAi3u3DLqw3MDEqP1x77iYX9+ah5
lHcTm2jfPSbz7idm0F3id6FpExO47+M2WDKDNV6yH2zm28Zs/QYvW1rMYWIe
LWu2vtvYyrHR5ejyOeyKtRLXZPM2Ntl7gGzMPo/tI9IfYPLbwRJ2b5mMvZnH
8tn/c89BO1gurdduouQC9nfze7iiwB8s4vbLx1YhC1hT57NnNi1/MFefVY0K
wUVM4gWue1xglzLO8jVBj0Xs6v3k+eCzu9hzyfSXqhWL2GjSFgNj6y5WsHb3
8sjqIgahHoRswT1s+t3bThatJeyea/c+Bf89bHxLWyTn/BJGZWl44lXrHrZp
+GxfSOUS1iLJlzbm/xdbpO95UC20jBFYIh+fb/uLnT58cmr8wDIWtTb/hl74
HybFzb1Gd34ZGx92GM8K+IcF1zaxUOcsY8YdbXty7f8w/7eZ0y2Ny9jnwSy2
YTYqOP+c5ZP6t2WMpuuQSKkOFVR8KE7H1pcx9XZa2UB3KsBGzxz2pV/B3F++
1NJLoYIwDRS0zL6C3ao8Z0JTRwW5fuu7UnwrWGuRlO2HcSp4ahlBRy+0gq3e
+XYynZ0aXuUELkcLr2CEGzfPuuhSQ+kZjZAcSv5I9IEw6dPUcOOPzD3gX8Gi
Lu7FLadQw5C1eVcA5wpW4/80o66OGkbz61+IM65gE+4+RdcmqCGa51ln8tYy
xndc8slBDhr4/dwrqv3HMmZ6qK+JV48GmF+vcve/WsaCjZM6v5+mgdp/H57V
3lnGinXIQyU3aEA3S/3U8YBl7Ivi5s+AlzQgLvK+9anRMkZHqFjXmaSBjDJx
2ybmZUxT8DQtNSctZNOwGJ3rWsI82IS53+vRQhMbR1RT6hKWTt0lcduDFm77
XvtefHAJa9+IUXROpYXP3dV9olRL2Nq8vr5UPS20PBtB4tWLGGls5cDSJC30
UKs0lTguYnb9D+xfcNLBnWvejVX/FrCYD86nI/XpYKGkMky3YAGbqn0XwZNG
BxXrVIdffZzHqPxda+nr6OAZ6Zaqq8c8JkLamt8aoYOPl2T11TfmMJtbMidG
VOihdOoFtxfrHOZr0Zz62YEejlBT4z/emMWuUzm8eX2VHlxOyH/3Zp/F6gNi
Ncq76KGX1mDDevcn9kVKwrdgkx5mrHxf3z/7E1v+XnvvliQD4LUf4A0GpjGS
5RT7pXMMgPNevnHi/hR2Q8Z0Zj8nI9xliVDn2R3Hyoa/SejpMELpnNwHtwPj
WFvGeXvFU4zwMUqMXu/GGLZFW9TKU8UIXi3exo85RjH3Ueq8EWsmKOL1PbHz
YhDTzm62vXSDGaTYE28H9b3BbGwc4s8+Z4YCvbqR6b+tmB/jctOpYWZ439fI
MaDZhN0LkVA0U2aBju6nWTNF5RjLkXAG3k8sICt9nvFAcU3zMItBQzk7G/AN
xQLI9zfHXnlOGk3mgKdmRd0vRxabzUX3v2J5Rom3PQID2Jabmet77bW+ccB/
fFInEsVWmpM3V2IT5Tjhl1fG0SHzX823gxRmNd9wwrHCa5PH8n8322h297df
5YLK9KgJTeWt5ifRgkTH21zApdapc7Jxq5mn9+S55Qdc4DnP+TrEYrv5y3+L
jCKfuEBSQ2ZcwXWn2aGKRe+cGDf8WL1X8S18t/mk/P67wi+54V7e8L4+LSrU
fCn5Z2UnN+S7sM8HBFIhXEevhukoN1To4tT/PKRC417unQGMPGA2YbHxQZga
eZZc3Wuz5wGfsGC2kHlq9GbtjcUJHx5gOBjV3yFGg6RNOTKXrvCAhbLWr14r
GjQznqssXMwDx92H6OfLaNBZXP2pgFUe8DW/cPekDS36eI66nJaBF75dkzfK
CqVFys3mW3eEeeFgf3HFobu0aMXla1ob8IL+MwsLkVFaZFsh8eO4HS9kOjxb
IlLRoZpdT7klL17QK2OyvyVBh87fXWsRSuWFrY3d5uvH6NCXOQOOykJeKKoO
N/93jg5p6kc7mjznhT0h7btv4uhQRsL7BwMdvMDw98HR/jw6tDHA/dv/By+8
XIhQl6uhQw6yJzDaX7zwqsFeor6dDtVduJd0h44P1ns8SDF9dEj47c+vSkJ8
QM9reClqkg6FCaiQ2hT4gOR8/lL1Lzrk9y/WkZrMBwI/RLXn9uiQ88xwGnaM
D9RW6D5uMNIj6x7tt+F+fFBx8dtmNyc9wupv7DVE8oFrTszj8/z0SLVoWmMn
gw8afFmFh4ToESHZyFf3MR946MRX/hOmR7whmfdCER8UALXQKCVPd3Kp/1kf
H3C9MYULlP4bZmbsv+f44Oz+RtsWSv2fKvkmalT8sPde90U9ZfwBoY1L5/j5
QUerTsyVou89tXV1hTw/PLUiBlau0KGGuZLpeYwfnG7TjReO0aHy3j0xeXt+
6KjQmdbvpkP5jfZHvX35QczypmZwIx1KLalIeHCVH5QDr3ZYPaBDkTfo0WQ6
P3xiLZxuTaFDQRdcNgiP+GGs3om3L4gOnXatVXRr5oeiIkfxKHs6ZGfBfrrg
Cz+02AgLd2jRITN1z+wfs/zgGOLg/pCXDumIvuoS/ccPx2IScwnLtEhk8azh
HTkBKLxzd2gknxax9rcH9RsJQEZcUCrpPC3abRJ7yGcnAL6z/Vm0+2nRSFon
/80IAbgv3SWfMUaDui+RrLpuC4COSvSTg+U0qNX9ShT7QwH4Onkm5l4wDSrW
VFxO6BUAQsuilvZfapQpHiP1bkYAZHTX3C43U6M4hu9ODH8FQM6BLcQvghr5
DiS9i5IVhN5Dl8Qd16mQypX5+5fDBcFH5ldRe+q/ZpynycDLW4LAu3mV/dvi
32Ye67scW6WC0ESTEJdy4G/zmqTl5eDPgtDd/LdhbXG3ub7tkZ2/jBDom82Q
lZl2mh+X0yQ9NhSCzU03k2jT7ebcDMeWWVshsK+p5B65stV81YtF+cwVIRh+
rLQ6N7bRbMrqy3iqRwgyLdrrVa/+bu46Ildvc1kYrty08xNVnml+LrZKR0oV
Br64zKVTjtPNudP1hzcLhaHskbTQ0LXJZp8wq6m898KQU6W5x9w22kxbeI5r
XlgEzjpIR52V+tys86v2zPU6EZjp3t/o2vUBK0g15q1fFwVNxc3RswprWOwJ
1pMpzGIgUNc1eURnHTtL/FLmKi4G/9HFFdcZb2B6LzyNGPeLwU8thrq7DltY
73C8j126GNy6LLj8M3QXY1Tual5SF4dr1F+ZT+vTwNJmFkurmTikcP1w0H9O
A19aXO0zHMXh9S2IpFajhfv2q3MGUeKQ7OEkoEikA4NwfoGEHnH4adB79sYW
PZzrdDpLDJQAxnscRcXOzDCtonW/4LoEqMtslG13MIPzbY5+0bsSYGKepCKj
xQIHHVswvjcScHPH+3sPHStIz0jz0otJAmPrJO+3ODbIs6Qyv6YmSTl/EUe8
xyn3QNXglT0zSWjNy/M9pc8ONKHJ0+v/SQLaBwsO4+wwTLv6cvqtJLz1+G+f
MDcn2Ht9WHL/IQnUL5435dhzQuf7YuLIqiRUmlgpSGdxwo93j9/Mc+AAf4Jz
LYuJC+6ECY09FMZBT51XSyeJC+wUr//xIuEgkO94938YF3xIPak6qYcDkeTC
ku1zXBBL/nCw0BQHuURbi97rXGD8W8fT9TAORGfz5lhyuOBvcfFVCUcc7DtE
PpVbzgUvj3HnfPfAgWH48dLoV1wQzBTxLOccDnSO0S81dnKBav3cp+NhOLi4
xpxoOsQFC34OswLXKeN1nPorMM0FpeLttH2pOBjAvd9RXeEC9y5Vids5ODjO
6OGcusUFEtfydG1LcFAXJKes8o8LBtVZjnJW4yCt6PJDdjpuSJ8M9f9YjwOf
B/e0ZRm5wSZzIi7pNQ6eTOzzv8LEDazmNoUW3ThQL//Ix0SJ32w3NjJ+w4Fj
NadUBz03RD2W+/p6Cgf6tsFvXlFzg5FL5q/oFRw8qI86MvmHC7Y5aNmM/+Cg
5LmencEaFzxD56SpGPBwU94vvmWOCwKDvkMTFx5MVHiGQ0a4QJFk4XRFFA/r
tUWhDp+54GdfbYi+NB4OlZ944NnGBYVxhLQtVTw43Lq4VlDDBSf1Uh89N6D0
D00VZbjHBSLzf9qDzfAwb1HDfCeJC/pyvUfUbfGwFFs5ah/CBWnWfdsrTnjY
EdDfwFy4wIrKmK/qDB7UQsW+HDPhAqaaSmX///AQyXBE964MF7SdFrVQuIIH
zSQ5fg4WLtB/uxZeehMP7lb6XEy3OWHjotsdz1w8vNI+ysN3iBOeyH+qIZbi
wa4h/Uk8LSfI3ij9WdCIh6iSI5sNnhwgYO9oe+cnHiRygsY//2ODBmRqSlrF
g+9Hr+OXC9jAVVFFp3oXDx+qb+30G7DBY1o68XfcBCjh9T7V5ssKUFMxs2lA
ALYqnTazQsp5Er/zLdqMALGerBzOssyQlBD1idOWAMsP7p/wfMwE/a4Oz2TO
ECBQ+IPZ5TJG8OOkjnRII0DilcrobxRu5Lo8HzSRQwC5U5/ta5fo4Pl0n+e5
EgKkvSofH3KkA6qmR5Zx9QRQDOEMN1CghcyzdoIvJgkQdZGb5nUFFaCO0koB
PSIo313MFE/ZwDy1bt0vNCHC4PXAZRf8OsZy/0q6sjURfm9pbHHU/MbsL9qG
mZ0mQsT1ltdWHSvYnPSf/aEpRFjiZpuWfzCF8cVY/+gbI1L+jymfahvrmn2M
1lkzEknwcOcDT+vfneZ4EaEEv3QS+LftBZ6/sNtctqHPYJxPgqSg2D+/lvaa
ZyojqZafkODZ6N7p6bNUyFuSbd18kAScwPon5xAt8qYiDu/KSAGz/yDjpa9M
KP77fqdeNSkIyfI4rx3FjMrqvAceGkiBbuBxWksFFjQTWPn52GEpuH0oG6d7
kRV5jem9rQ6VAsnk6Wsn/7CjM6021R6vpaCO0NaWYcWNYvPPKxl0ScG9b5vJ
22nc6EFY5iPuQSlQ0eAZZP/CjabVvxc3LUiB47qMpOIxHuRZ5JUtxCcNLXfH
pKIseFHM1USBZXFpaB3akiyP4kXFThW3X8tIQ53vxwe29bxokvd3SpCBNFQE
6dFtkviQR0xEVKe7NPQzVCQw/uRDMa73/xWelYbDJVIlPrz8qNiw/cqlUGl4
4Ss8I2zEjybXmC9IJ0rDCXXh5zY3+BFdj+La7m1p2Mc7HP3xKT8iVRz+rzdP
Ggw6Sv7FfOVHpz0z/CKfSINi5GfxW8ICKIpcN3OsQRrcDR4pjegIoELxb55K
r6Wh6IjXW3s7AdS6vTdO2yUNR9UkaVcDBNB4H851aEAaotSe4KrjBBBNjcmP
6nFp+JmmF5+cL4AIN844xi1Ig/N25PvopwLI2Dfhq8uGNASled+/9UYAuZuV
22lSyUDLtSMrtV8F0MFzX81GWGQg/OZysNiMAFK/Q6OXyC8DCkEqtPobAkik
RUlBCydD4a1dS1YaQUQzd1x8VF4GZr++M0hhFURzPDGcSVoyoJ3G+qeRRxB9
Nqii1gYZCCp+tZQlKIjqPYZ+jx6UgTjjzjpREUFUlEI/nWQvA/6psbpmlDj5
ueqAtqsMuL2hS+IXEkTBI07vx3xlIHQpnjWeVxA5M8U1JofIwBvBwaO5bILI
VK2mUidSBvx4bhva0goiRccf98YTZWD65qUfJZsCiC+a6XZKhgyEVNenZM8K
oN3HGtd178nAxTcqkwqDAmjyy8kLE49k4FVi5gtnih+dewk+N2plQP+/NgnF
JwLomXStkx6SgUyjj4E52QIo9/Doocn3FH1v1faXXRVAMRdZIbVPBvo//z5/
7LQAOntfW11/VAYihWv4H5gKILv3bqSpORmQPfEi+g5RAEmJ1TEZUMnCtepD
/meH+BHH/omdKRZK/PrfsG0NP9rw51hM45cFKk155vE4fvSm2aNnWl4Wwsd+
67Er8qPKmdS2m1qycDhQzqByhw9lcjfUGoIsXDRtmKV/y4fOnObOuWUvCw5a
5+hnjvMh62TD5H2usmD3mNs/TIIPadd6Rcz4ygIvOS20d4wXMTA2uRtFykLK
EaLoghsvKn3kqzD3SBYCkpqpzM15UFpvhnhGrSzQCP3hyt/lRhd3EScgWfjX
Ent6upIbmVsLrmX0yUL83i7Om50bzfxqayRTycHE1W+cc56cqFtkuXKBRQ5W
XYTEyVUcqM5E5H4Wvxx0Flk+/7XGjuIzAq8vysuB6e0PnoUhbEhWT9w6214O
LpNuLSpaMyOfyNCRlUdyoOtSP5l0lgZ1Cg85TT+TAxq8VMHD29RI+em+gW9N
cuDe7SdaVkeF1qboet58loOdebUi/PZec4Tl7dbcHTlgEvxzGL5vNKcLVJeY
H5SH3UCtCT+p0WZUPut3b1YeLokzxLDmbmBEs0MzGb/l4cWmnF9c3BYWO1Lt
kbQnD0fF2k6wBO1gljwXXUK5FUDHrqQ/yOQv1n+B4bCVngJcj/75J3SWBuaN
iepb8QrQ9c0maMyIBay/x1Yu3lKA1JKvR/8jsEJ1yJz8RK4CdN/1OUSiY4PQ
sifET9UKUPj71MH8Fnag4gD+4gEFsNWbeXzwJhcIDDpvHZZVBMdDfAYOtbzg
rmh0iFddEYKJKreTufmg6qpkYb+BImQoSxw1PssH5tLjli6HFaHjTGg8mzg/
hJ33KvANVYTHRrb9qn4C8OaN+ZpSpCJocle9CK8XAF4ReYtfCYrAx7Anxcwk
COVoYfVCniJ4JutrvMoThGH2ILPr7YpgmavQ0VkjBPJuR++af1IEvETkN+y3
EFx4prnCOqAIMjLS9nVqwsDltJl9a14RMn/d7SkoEwbnyoEl+3VFGPpxx5Nm
TBgeUtebCP9TpPgUE2MrKALGZVcWC3iU4ENxpWN+uAjc+ONifFpMCdw7XP+k
VYjAN2ssS1paCWSkOf6c+CYCwevU5Ao9Jag+KznoqCoKyHwiI9BECS7L3mdN
cBAF9tz2OY1DSjAq524WdkUUHhjHpde7KsFc/3BUerMorGZ4z4b7KsFk8M+j
tT9EAZu1MCIHK8GhxSed8duikGyocJsuQgmwQsHDrLxiMJDKNvM2TgmEpDMD
9OTFgDSxaJh0UwlSeGpXODEK92t33bS+qwSc970+JtmKQVNC9TR3iRK82PZR
eeQmBiw/bhr0VSpBkXJOsPc5MTimej7tTp0SvBu0Um4PE4OiaLspp1YluHM0
D98QLQYr/Vr6kp1KcP3SywOWiWJgKC+YOt6nBDF/ZD8F3RCD+PCtiZIRJdgn
yyWomiYGfd2Duj6zSvBeJeDltVQxIJAaUhR/KwHqO3btTLIYBFzIHV/eVYLv
iTKBP2LFoP59uM5TBmVgnHnROBUhBowSp5JDuZRhM/p6b0SwGNj9B2N6IsqQ
If7tWJmXGNxrx2vvEZUhk/+3hPtxMVgQpE1CSsqgoM6vX24mBnp+kyPROsow
V1q1EKsuBrFNrzUPkJWh57Tfk1VRMfjMXZrAYqkMcMtAb4VGDCQ844c/2ilD
6Slvv8ifouBX56Nx86QyvFlO9yzuEIU6Vst4O29leB+PLrs8FAW6U4o/BIOU
QXvFWLciVhRsa9jVv11WhobNNqcMN1HIp1+Ozb+uDGW6yj8E9UVBp/yJqlS2
MsQd2z+5NiECVlZ3dxqLlGHZkm+I/EQEXBdi2u0qleE7u1fwu8sikKh4/HhM
mzKMVzAE3mISgfxOMkHskzJsV2teGKa8E5+eVVh4OqAMX1K4AkISheF7+d+r
E4vKEGkXn3+HWhh+Wc1YXN6i+DHU+lblpRAwLPbw8tKqAOsv7maZACFQUSop
NRZSgWtciexHuwUhqsKy676xCriNrFrbhwpA1iGtbL1DKpCwrc9XJSwA5YsS
p3scVGBsFntcWM8PfUqrG1T+KqBtKTJ6cZ0PZCvvSLhmqYCSc0bZ0GFe+FQ5
5S+xoAIWj6ifCVAobMK6S+f5hgpoXkj5b8aYA65c+E5VSqUKIg9OJKsbs0Oa
4Jv3RqyqEGJmdidNmxXqHbJPBuBUQSHCY115mwHYB7DYjwdVoaX0jOPK9h/s
6UByX1KBKsh+9bzO93OyeWc079+VYlU4qkLo27gw22w8WykX8FAVXNNvlj5h
Wmr+vN0dbvNUFT5/jT7Amv67eUWEX5r/rSqcY9wwqH6426zskheav6QKWz+q
z8cDIwr1rLyX+lsVroc2PxQ/zoRe+Te/j9xSheUyU2GuAGZkFTEmcZpGDR5a
8UeVpbMivwKptzICapAr/sryVwcnKhurEHyyTw0k6tXkv47wopXZJnKhsRo4
sR9Q66XcfzqrXX63D6jBF3Hua0bdfOgNzWpziK0a0Ia0lmjX86Mpora3vqca
LLclj4ZfovCD4oFbCr5qUPLqul77JIU/NI83ip1TA9txVEKyFkJ0+8O4/l1U
gxcFV/pZRYUR4UxTXVsyRV9vpr1nrgjyDegaf3ZTDfyCsv+c3RRBNaGjbA8y
1YBo46diYiOKyHE0bvH31GAfW0e77h9RFJ/Km3SpRA1yCpNPHjgkhrqzSLW+
j9QgjUV9iyZPDLmWmTEfekbJ991+5qYljsqqHTSMXqpBkgN3znq4OFqu83ZR
aVKD2X/BDELt4iiiI/EJ9zs18Pbl11wwl0Bveu5+o/moBm/UGhzT4iQQx1A5
/VqPGrz7euFLaZsEypv7dKL/mxqkPLGcEtSURObCHk1qYxQ/1l5zPzoridYO
bBNSptWgmXP/DK5QEt0LvRE3M68Gk0zJmSFfJJFVCXHB5JcayIie+NhNjUNb
vXU2BRtqgNi23boEcaiYxrp2548aGFHVZWso4pCN2oTwMWp1+Cp3pXLHCId2
T12MeMKgDo6NQ7QEGxwqu8E+wcamDow5ATKlp3DI7lXhAW9udeCul++J88ch
qgWd8jYBddDTLZtouYRDj0U+ckmKqcNvusCzR2Nw6JiFe0gYXh3sFaFYPwWH
aC5uDvZJqwPrY6vlkHQcqnyQbKSmqA4V7y7/oM3BIcc+fFGymjoEL+fJT+Th
EAPdC8YZbXVo3L7XxHMPh2rUrc6aGKqD2lJTxU1KfNJtrDufrA5UpDLdUwU4
xJwWqrVjpg6b78o6w3Jx6FkTa469lTp8buugnczCIdfFe3+rbdWheHGhOOcm
DrGJaZ9mc1CHmLzJovwEHKo7+OGtl7M6xEfF4leu4pDHJVfFNjd1oH330i81
GIe4ytbTJLzUweha5N4VLxxq7E9cv3RWHW6e2I14eRyHvOhxjn3/qcNMbMDr
/eY4xKNZ26R6QR02dtV7Cdo41OR+kJh8RR0aRp5/tSXgkAAKXjCOU4fBshNv
j81LotYlZtv8ZHVoU/C3r3kpiQLEC2q3b6qDybX1T00xkuh1WEdEda468G28
OPGHSxIFPjw5wVqoDvUxiU81P0sgsYHfB7xK1eGVhnWCWpoECtaS4JaoUQd6
OEqTTCOBcB5PQy69UAdPNuvy9efiqPOW+dCXRnV4ZlwxrO8tjogrQUVJb9WB
5lt63vkWMfT50Vut7e/qUEMff/D8YVEUMeicYzdOqbfwqyBpXgTJM63+rfqp
DoGX8641x4iga55i786sqkOnk89eQaUwUsX95/iFUQO4Fa5dOzUmiG5kiFyt
UtcADEfKKu/kRSr3l7p+6WiAnGB/trwxL+oub8Vp7tOA3IhQ6lu1PIi73be1
7oAGTPhAp20mN0pfradvddYAHzs7LukoDpR92Cn5S6wGjMueuno6jQ4VM+dm
bw9pAJ6WZu3Hf68wU/7AOYNRDRD8oNvU6/YZm8KZGkRMUfrH31qW9fmBSesu
fKdZ0QCnYTZcTeMs9vCMIY6NXhO4p1/f8BzdxCrbvj+QUNGEQ9Wj9hlvGeBw
V/Wmq6YmOLqY5n0XZYKVoRjzIj1NiPUfUtAJYAa1VcU5GVNN+OFfw5bPxgbP
cOFKaic0weyJsLBxJhe8DBd/ZhKtCRvibTPb/vyQ2cJ+UCFeE2SVH1SJb/JD
MP3fEZ4UTVitcnydGCEAqinDrOOZmjDcIBfMFS8IZbkFpyMfacJfwaV/ETHC
EDuauu1VpQlaJ44F3/8rDB6kyNTDzzTBTV/WsDpUBHDlrg0STZrQe3/M0stV
FO404Hlf9WjCkH/9GJ+wOIT+435Y3K8J95pZjYOuiYOdCQ2W/E0TArsFHvv8
FAeuD+O+TlOaMLfKwEJdLgFLHL1UJnOaQK9yuP4GiyR0HmnLlF/WhBDxD7M3
z0hC/FBR6/aWJpD6bhn7seLgjET68bE9TdAJ+V4erYUDU/eYpXc0WmDmbghm
J3FANechcodNC1SbTl2rf4yDYSX76qvcWmA4jn/r0Y2Dxv/2m3kJaEGPZ/mZ
R79xcHFbKkgbpwX1rw/J7Wjh4dg+ASYJKS24NGPTu2eHB81rDPn08lqQfDpj
KjUIDzyvNzQWlbUg0/NdYMUNPKww/ez4oqEFIgTqkqMP8fDJ6uupRl0t0H3H
+PlqKx7K096uF+3Tgm/t2V4qQ3jwFirDnz+gBercDxQ56Qlg5nznhaOVFtS6
lPzQFyIA6V78IWNbLYiRrtoZlSMAzeTFCbljWnAweC7znx4BRmV8LnE7aQF+
4vN0ujkBmvxOcG6f0oJzZj5QYE+A3CqLklEPLXDycRMVdyNA2G89g3c+WkD6
acXN7keA4zryPVUBWjAj0PbD/zwBtC+LeGWd14LrDLEnjcIIwNfMshdxUQua
I4tvh18lwCrNn1tnwrWgXyS7QD6aAN1m87LWUVqgbXbmrel1AlQmfmvSitOC
KfeqoA+UOPnTBzvxZC1g7P6k0BRDAF+exjm6m1oQtjlTIBZFAPNj5ZELGVpw
9shu/nQ4AaRzcgW+5GhBqceSqNhFAtANJ5c3FGjBw/IMxVeBBBjHhxsXFWuB
WBxifu9FAOTpP5D4UAvk6fQ4TVwIkP/QJSCoUgtQxesGWVsCXFk8ROf4lKJn
n8yTyyYEcFQzyiHXaUGRKe8zQ00CZd8oq8q90oLDrxTKzxIp/owUUl1u1QI5
Yy2Hs5wEaLQQ7Ol8qwXnFd5tZW7j4e/TpPsSHynrhTtisjSGB5CgCgr8rAWd
cdrCwe/wEBUfbNz6VQskth4my1fgoX11hofvhxa0VcSP8Kbhwfxtz9MXP7VA
6TBRKMEGD4lqZjHMi1rw5h8hQEQZD5136+2cVrXAZLkgepYZDzaBRet/d7Xg
pGpw16FGHBwXDtEx49GGne7HcrfZcJATPct4R1Ab7v0wmJyrk4Tviy4Ds2La
EIAdRl72kuDaanYpRUYb+vpFXatiJMDHT6jhi6E2RPylU09+JQblfclJ0sba
4M5oWiRtKgZLGLXzxQPaUKUiyNT5VhSC+OZ2RY9ow387fkJeb0Qg7FWD0Wkv
bcgWETcyKBSCRhlVztqz2nCgWeJvHI8Q/L1ZPMIQpA2+Gvv3m0VS+PdMSuSj
K9rwcYxL2MZOABI5T7X+uqkNzw5TH9cc5YW7bjRmkY3akFiXq90txw6N9BaH
8rh1IIzmIK+6zU/MsGzQPV1AB94vnfpvumwMazjoezFJVAc+7mbdLN77itWn
JhVdktKBqJ2Q85cT0rEXwp+27fV0YOW9jt1BsenmGqWjDzjcdGDH4cjsUj8V
Uu+eaKA/owP15EDhX4Y06ElQcM+urw70CCiplt6nRdUvMnbngnWgTGsIVZ9h
QBXkgSNv43UgxwML/vCNFZXZu/y7Wq0DOHcHpgwFXiS7tch3oVYHFKtdRH5T
7pvSnAj5gHodsGh54fjiLB96MFJg79yuAySqFLxeKT8q8hl/rDugA7xu11vv
MAghAtv5FpUfOpC5xeOWny2ECitpv0qP6wBhoTXwrrwwuvebRMO/oAPm/peS
DpiJoPxwr+O//unA4uO5g7SnxZAEbst/hk4XjjWvT5+cFEN5rfHRI8y6sECX
y259WhzlMj6q/MirC6TdHVR3QgJl31ygeySjC2xzsdztvDgkpBkucl9RF1pw
H2KJB3HoTj+76h01XQi7v+OCp/BJpqiKU6yBLjRwRpdPTuJQesl/T9wP64LF
nbkNxgI8uhgQS91upwv5mse1HT/ikZPOXVspR13QM4ntGd/GI0JH+6+fHroQ
dO1zdPQhAmK4NUi28NUFf1bH/beCCWjWcenmo3O6UMobWdeeTUDVC4Lq/mG6
YJjJJhozTEDptYpRn67qAvUXeT3mvwR0IYL8WeW6LjR663sVihKR44FjhJuJ
ulC8dUvPSoeIjLj8glZTdSF+z/QCrS0REQavth7N0IVDppdEXnsTEX1hOk9t
DsUvyQ82NyKIaMb3obvAPV3QN8m77HyLiDo1mmoulOjCiImPqlIxEVXvfqYZ
fKQLqIxZ7+9TIrr9+ucR/WpdeJD69/bHFiIKvbFbeLdWF6L7yoOzP1L0OHD/
3q3XhaVXWSauXyl6cNImJ5EuiPBk5ONGiAg/q3+7+bUuMD/5c3xwkojoag5P
4D5Q2id2Xk6YoegJ89CI6taFGzT9+1XnKHpMLkVP9OnCeFWPwsdZIqpiu9Fr
+k0X6CKvDJz6SUS3+gqJD0Yp66f8UHFmnKIn/8V5xmld+CNwCDvznaLHq7PN
e14X8hziXIZ6iWif6hjv+xVdOGpZyLK/g4hw2+unFTZ0YduWk6q0kaKnleVZ
8h9dMJ53VqKupOhJlKRbotKD1wSZOrs8IvpwVNPuMIMebB2i2S1MJKJKMYvi
alY9iBZ3TVwMoeiZclnj5taDKdpz8tqnKHoqg0zPC+jB2O/fAxFmRHTiQlz6
F1E9eH5J4l2HAmV85ieaWdJ6YPGQySBwhYDoPr+O2VLQA8UMd8WeLgL6mTP0
5YSaHrxKEdTDKgioUpEuRMxQD/QeaqPD7gR0a13odThZDwi7vyy29QgopEmJ
f8RMD9ai/rE1cRKQoY1D7X1bPQjJZUh7WItHOOGz9LQOesDGcGxj4Doe0Y5H
2ns464HBaueYph0evT//aF3aSw9onjjWXp/HoeNZe1rlV/SgXWl3QJwehwxd
eWLZo/Rge+SdwvUbkkhSTqY/IE4PDJXbua9ySqLpeptQtVt6UOfzvvw5I4WP
h4uePy/Vg6qLGX8ffhZFVjGbq3/L9eDx1SM6JSCKpOQtVQ7U6ME3CKQafCyC
+kNWS7826sG5pMZFYpgw0mEnZ2/16AFUHsDmNgXQjsHwZf1dPZjzjN0nG8uN
IrOFyE02+rB08dAHrvvrzcexs+EMx/RhQQDCmkJXm9Wmml9aO+mDV00YrX36
UvO4qpf6iKc+BFKfTf/bP9Zs8q6WSHVZH0iRtN+8tj5hDJtHGIxL9CHk27rM
gtselmKX8uH1tj7wSybzdobxQqH6ntXTv/pgGnXwgwOJD+q4/D/dozWA1BrN
IINOPpjstOq5zG4AHzgU17sEBEB/P9tXNbwB5FzhnrubIQQ2xCvHJaUNILI+
9YCdqjCcoV4YZFMwgBIXPdff74Th5qsP339qGsDp5ItHqn+LwIxW0nieuQFs
fTJNe6kkDn95/5xOOmQArKIPf+o/Fwe+Vd+pi0cMwNj5L9c+QwnAKg/OHHU2
gKaL6c3pIAmZ0ixLzIEGsCrhLPAoHQfldGHnNoMN4GCUSoH1Jxy0jM+uTF4y
AOc2vtNxDHhYyO/43RxtQOHCdHSfwncmggnbIVkGMBTU2L2uS+Gl9a2w07kG
sGAccOLFGQIE9Hrv2tw3gBpxqZqZWwTISTX/p/DYAP5ZOYgmTROg2r8uUria
Mr+lbw/W2Inw2lKWhrHWAPY/lN5u0iDCCiMT/XiTAaQ/XgvwDiMCw/SF2K42
A3j/4ZgC+S4RxNp/Mr56ZwDylp9H/euJoF7okPDoowGoWaW8mP9KhAORb1nu
fDaAvtGB3Re/ieB8Uif5+lcDaM8OJHazkyDIsJT9/HdK/Z7nbWrSJMjfiuWy
njaAvYGzae9sSfCsf+OmwbwB6PX3Pt72IMH7Z2d45VYMYJhfT/JsKAlGb/Wn
C6wbQFmOvbFELAnWA80E6HYMIHp/xW2OdBKwHH6e9euvAdQ3PK0zuEcCnJK0
8AitIfRPLoYXPyKBNmtmTieTIZjvcX498JQEVrP0YvXshvBWX2iEVE8C97ch
eaU8hvD9n+eAfjMJLpRMSWQIGoJS7kfFhFYSJEfb34sSM4T7WWX+nO0kKHR7
jQ/EG0Ju7PjRj20kqMO0ilykDeGXJw1qbSHBJ/ESkqWCIZwPV61ffkWCyT98
D3RVDcHhnW6QXR0JtgdjZKS1DOHPeAL2q5riz/DFiXB9Q+CwjCcvPCDBwvjZ
gj7MEE47SrV055DgzE9XJ6X9hpBnE/WhIJnix7yd4PWDlLyYZbHjFRI4rpj3
fj9sCGn52a9pfEnwZc0wVdPeEA4e6h3JtieB9baqZbKjIUjoXxvEYyR4t0di
nDxlCGMRhK5cynoY0wi3GXgaQiT/Ng87GwkaGdiv3vY1hHbJHsWQZSJUca5v
GIdQ6r9bZNWtJoIs32xNTpghHItXm7uTQoRCoR8Bq1cNoXv3e9eeNxEy8a+n
7ycawl7CIGFcmAhc0i8Lt1MNYWJixsJnmQCJ8hUnbTMMwZQsPE/bRoBwjYx+
qnuG4O+YY3TdgwAbOgm3jpcYAme7NhaiToBAw3Dr6keGUHsy3z7pLx489nu+
OVVrCJMMA5eNbuJh2OJE1It6Sl6h5tS0Ax6OWx8y4kSGcIj+CNV7MTxYOWg9
b3pvCGDAT3K+jwMNH/oH4qOG4Ob5VemFoiSU+2+7hUwZQkd7fYBkgQRIBy2K
f5yj6FHqmj3DIQEil/syrqwbguXAn46PE2JAk1Jy/RvLPtifQU8u9hOB7ur9
ntla+0Ar3dTlyR4fHKzVw//S3weslwalw/fzQftLpR/msA/M1ZGHehIvvGjl
t986uA9IUu5ZxVw8kP9lytTBlZI/vmN0nZUD/Leuk/iT9kHmtaSOe3bUQNLK
lOJJ2weJ9dtMbAX/sO//PZDmzNgHj1xDyXM3d7GD829kmQv2AY0kp8jGuQ1M
ephRaa9mH6SbXyrtkJvEhtsStKaGKPVi5P5pX1tszqDK0R4f2Qd6p/D9YwO/
mq32PdIZmdwHR21tW58trzXXP3+vN7i0Dxaznc7PCP5pznrIavSRxggiOPH3
gktokU1qilmtvBFoU9M5ZF3lRIydeQdqVIzAKe7lwZ0LXKiJqdK8StMIPucF
VjcocyMKPR18aGQEi/weIs+zeBBzCOfhvCNGsPH9k0CnPT9CTyRtchyM4IOR
QutnKgF0cUnFNsvZCAauhV1deiiApr1sjt48YwTudGtH5DYEUavjTYfrYUYQ
LFN0kjdEBF3Kun886qoRfPH5FCzLKYpUvzw5cTXGCGzd1J6NPBBF+Yc+O126
YQSuLyqo/n0SQ5eB19W/0AjGs+atMqgkkXo40c231AguVA+/tI6VRHMvNdy9
yo1g3nLavZCOcv9q2Hm4PTeCrDNIxzkahzSlM7zt3xvBMdDlNT2HR6PYpL1e
lxHsU/Z+61mCR8knNEzEvxiBXPZ/zixDeDSZ3CM+9cMIWO1FD703IqC0BzjW
jnEj6MJc2X8EUPgAndsq/2kEV4RiL7rlUXjzN3tv8C8jeMmpnFy1TkDA7oKO
bxjBgV79h/9JEtGCdHmF4R8jWMmadMw8QESmjgfj6egxuOZs+HObwo8r57ND
ZpgxsLj8xkb9ORHlpsy4d3JgwLRf0x9ReHANxe5LF8Ig7Iu432d+Ero31Cd/
URwDsb3yvzbqJGS1RhJyJmDAMdLwUOQQCW2xB9ODDAaOzroEpTMkVCzTtkpU
xGAIZZrEhpOQDZlnlFENg3IiNSfpNgntOrp9nNfCQCAu+jFdKQmVBVfXd+lT
8jWaZ6RfkpDdjX+lTzEM0tudauI6SIiqzDojyxQD59BbcjIDJFTekhd12QKD
QJ7JJNopEjr+beHcKWsMEgVnm0VXSIhu3cDF5CgGxXEjnwO2SaiaI+mgzHEM
Tow2b/2hkkLOskM6rC4YDNdbJ7cySCEmYzmpZTcM/nErcLaySKFnThd5es9g
sKQ4KLfDJoVcQ97+e+5HiZXeP/Zll0JsqQKLOYEYEExdk3gp+boyz6GIEAyw
yOWpNSYp5NH67K17GAbblg3/OOikENd32lqzqxjYxayYuO+RUOP6kUL5GAxy
dHJNl9dIyJuzMJUjAYMLjAX1z+dIiE/u15XVFAwSVPOuvxwmIWQMvv23MHij
O/94q5uEzjqnOtRnYaBhdsExpIWEhEKHTfNzMbDEVU2qVpNQe6qSetR9DCZ+
uLcr5pFQ4MMrkmceYBBhXJztG09CYm0f2A4+xqDyY6H8wn8kFLzh85O7FoOe
YwbHWjESwnG9/LL+EgPFBAd9URIJdcoxtQ42YdAU0X8WMZAQyeVB7v13GHy/
8XVu+w0RdYeuJ1z/iMEXkbSHtynvkStpphd8PmOg3VmQGxNJRF/axm3VvmPQ
hRiyLmoQUeQPNYx/DIOWSy0aUSxEpLgZqbg9RVm/50wqKyMEFCMvydiyjEGm
ZeUKYywB5bxTOllGDcBBdtpKb8ajQm/BoMN0AA5V0mEZFD5+xEQdu8FA+X2n
CxcPWOBRvfmXClM2AHv3XTz2EYeG3oXtjQoASFZxml6NlETj3h7c8cIA9Vdm
GThWJdAck7WUihjAmNvp5CRXCbRjjj8UjgcIc5R5mKIpjkQ73uYKKwIssRTt
c6wXQSSfJ9VIGaDK4dEGE78IUmS+2+6lBqCT0RpL9BdGhhYBC7XaAKxdD0ZG
+IWQcwef4REygJP9CxYXS36U2+H2LfEYwEBubgIq50DFPpbLaicABM8L5Hvh
2FE5sxbtoBPA1OtMW+2brKjRgklBxg3geuOH3TlfJvS9ozKszQ+gMOGnHIGW
Bom//yO8GwlQLoQ5dj2eaM5/n3Hc/zGAOpNwRziZHl7HsnP+rAAwHygRdH7F
QOHC669dqwGoyqWqVHSYQK8hWN2uFiAwr7hQg8QKXx4fZTNoBsCNH7LmCeQC
5hRuxNQL8Mgl8TDvOD+oWiSERvUBuAh1BxnGC8Axemql3a8U/2wKI7wVBaE4
fCV7+TvAuPWHurQAITAK6DrfPw1wSGqM7d6ACAQfTpEp3gHwuqpMPqYrCXdZ
6YfF9wAufB+UD6mThNa3V9Kz/gGcQ6Uy0yI44ISz1El0ZBiK0DuwexsH2rsT
L+gYyfA5MSTUmcLHznVOARHMZHBsecNoyoiHR6qW3/7jIMOc8vy/jGA89Cy0
3pznIoO6MIF3swwPW2X65p68ZJhPpB3v/IaH/Xj52uNCZNi9wZbw2pAAo9zM
qRiBDBfTPxeHzROA8VPk/pckMkh1JVty8RJBOXHrj7oMGZbtc2h3dYlwmWbG
W1qRDEojdzk7rlJ4p+mU5D1lMjTsPx5afI8I78K+9gmrkeG08CW+981EEPj9
xphdmww/+lZbZ7eIYFhltB2rS4YKpRCRER4SnPZ7XkVlQAbdOl5dfgUSJMoo
nwnbRwZnWQ98IpkE1RMlYmsYGVy8I2gNj5Hga4F4r78xGe73EjTkfEjw1ykj
4acpGermvivahJGAJMQObgfIYBhByKhKIIHll5iNIQsyfLA+p2uWRYLiIqP3
CVZkqEqj9flTRILdoK083cNkeBVpW5tRSQJ745r/ftqS4av/Jy2+FySo5D67
P9OODBHzt/RDKfzKOCYlvN+BDG4nvC0bKHzrWj2y8PsEGbTzu2UmKPz78mo2
KnQmQw4/09tFSsxz+Gi67SkyhDyhPv6N0t5Pgt2byp0MgYddyOWUeu2Lbwyq
PMhgZHoc70YZT+xVJOdJLzIUS9R93KHoCUnWn2DzJQNLSdXRsGIKTzutPW84
S4YxrqbNUcp8pBUqE33PkQElxWupUuZ7dcfrpHAQJV6taPa5SIKBDrz6u2Ay
GEylX031JIFa9jf6CxfIcIOkmVFkQ/HbO2NQKoyix7LvWJkeCcZ1Dld8uUI5
wBM9NvdwJDBgZL4WfZUM+0YO7r9BT4L0/lY79SgybF0fUgiZIcJCyRXZsRgy
5HeD2vEOIuSbrnQZJZJBLkztKO46ETZ5HxUtJpOBdri+i82VCDYTpy/kppKh
JN5Snk6PCNRRXyV20snQb5B7jjRFAI/mJv/aAsr+F5ZYK5cmwKsbF8kehWRo
VimsClzFg8BJdX7eEjI4hNbDmUY8vN0taQx8RIZr+Xm/9w7iQV4/hVWxlgwi
dj4cSUdxEM18YGToBcXf21U5cdw4+D5A9TShngz4olTnnruSkHIh2PFnMxn2
C4iszEZLwMozp4eF78kw5WN/hl1VDCxi+MNtP5KhW4X+++JtUSg82mVD1U0G
gfjIOO51ETi6arzl0keGg8myXJ5VwvBcRf6A8CgZoo9UhIozCMKVR1uTqetk
OBqeMlpgyQ2HZ3qU1bfI0GLn8T4mlQsI0o8vftkhQ9Zcp1xLESd03HdhE6Yy
Bn+VMPabxWwgkN2qUchiDLiwSZfpOAaojkuOeiZpDKPTA1YOy7+xCQ8cbtDC
GDISZ6MLBv42Py/c9rlsZQxuPXcbg3aoUOLo56fihyntW9ieP42lQarO1w+4
2xlDWPPp8LU79OjK0bmA+ZPGEPpvIRPusSIB42ev9s4bw58xj7naZF40ezWF
8V6oMZB/0Pw3Y8CHGl+dsTW+ZAzWFUVldLN86LSe8FRshDH0HpGzeGEogKpV
I9i4EozhMcfbv/veCaGDkuZOhHxjQGb7FrzcxZHhpaoDWfeMQaHKPnNhRBwp
9wposhUZg37S2liPowTiiZti2yg1hqHpnsUMc0k0uBTV1PHEGL5xMPFfvoZD
783nHhk9M4YTG+ctdWtxqLHQNuvpc2N4+rUlIfInDt07hgvMazAG6pMNQ/cP
4JF30yv8f68p7buKLF+t45GjkBTH9Ftj+MAa7+glTkBWQck7ju+NYV8wl9NV
EwJSlXbqNe0yBpboJZ3FRAIiRLY2v+wxhj3yncB95QTENyRXrvzFGL5zUdut
fCCgzZStGKFBY3iTFn8qmIGIZn6e+i/lmzHMew3QkfFENER+60IzbAyVXYWH
vfSJqPOu8sELo8awoqfrOGVLRE3rGdoL48ZwjWH49EsvIqo+vEdwmzKGsnfL
3WOXiajwoQdn/09jeGCxJ+9yg4jSaTv/HJyj7AezKZx8ARHFumjMNC8YQ+Tk
QuyBSiK6+CLni+ayMXSN9x571kBEvtw0LQ9/UeqFTVWde0tEzn4+FRJrxuC+
Q//1Yg8RWb/uzr69YQzxPK+0uwaJCCR1Y5m2jSH7q+GpoFEiUr9UEBT+xxgC
LngyuE8REamX4dTqnjFMFr5mzJ8hIn6lAEsvKhNgKM/ykJ4jIoa4Pp3vNCZw
5USDyZ9ZItoaNSTZ0pvA6cDyX2KU9nP6xVxvGE3g43rIaNIkEX1PZ93TZzGB
DLnCUvMRIvq0FDRbxWYCZwxl6OwGiAiZD/WROE1Ao81moLKLiGoKya3Z3CZw
Z65EwfE1ERXvllVy8JnA4tlOeYeXRJR5jOtutIAJ8Fp7y5Q+JqL46gtxW0Im
YO+6lWWZS0RhLCPn/UVNgC2zStAsiYj8PMxcx8VN4CvR8sydixR/miqsHHAm
EHNhysvUg+KPEL9eJ8EEYpnekKysKX50TnA/lzGBBzP4kgviFD+kLf/Ky5uA
9ryK4j0aIhKIrJkrUDSBf0Ea60rTBLSjca0tQc0EBDITHGLKCGghZabqr4YJ
xM2+6zwSR0DDPw/nntc2AdKEucEtDwJquSsR4mJgAk10BzT+EyGgSaZ3EYxG
JvCNzlX/6TIeMYX+F/8ETODI+333VdvwyMam/S69mQl4nZgR/uVBeX/R+bZW
2JjAXP2unGg6DtEF8XY6HDUB6gdM7h1OOCQ70thHfcwEbmxEXBzG41DgS85Z
eycT+B14SL38iCSiCqjl/OtpAj3NgnDaShyRvp0ULvM2gfcCKyZ32sSQuTkT
8YifCUibGSow6IqhNIKT9oNAE9C9X57zVkgUSX6lcrG+bAJv4iJ0khuEkBFY
PcpPMwFBuh4Lo3Re5F6x/tT8tglMhNkp+U3zoFiRglerGSawx5o7+1WbB31a
+9VtdtcEeldEb778zIVOPszaXCoxAb0Qni+mv1hROM+EKdZA0e+1OqgmSoUa
Jy+NjEyZALO6EbnLfwX76/8kyXmGsp/ynx9q3fcbI2/O6AzOmYBHxp7fGdYN
7A3z8bTPy5T1kba2epv/B+tW1ia/3jaBm5EscPMwLUxdXC18xG4Kv4aL5zNm
2EGWRv6wDJcpeH/wnH+jwgm+SW5/inhMIaBC6uWWHhes5HUfzRM0hQOZz9fd
LnHDTmslXRreFCrpHy3VTPACB7vfmRAtU4i9WX/0j6MQ2GQW8qzqmIKgcjiL
1qgQ3JYcagrQNwVWdXvAnxYGIXULQW/MFPQnqM5NuYkAwUHmnaOFKQSefaiw
SRYDj9GTwV8tTWGwJOFp3lMxKPXJxNlZm0IonRKphCAOilfoLx06agoeBGef
mi1x0Lk/IQcupvD6/te/fdGSECYv2t94yhRWLzHn3hyRhMb/VWzl8VS9T9hy
7dsl+3q7oUUolUR1Rt19o0Il5EtkTRKyFImQJSGkQiqk3RIR94iIbJEWSyhk
37NE+p3fn/OZed6ZeeZ5P2feP07h4bA9DiTIOVy9skuVAAdqqzoNTpPgSlLL
iRdnCRButnz1uSsJRC4WfX6VRoC6r9t2bPUggXix3wGESwDWWGaMljcJOtJj
luuxfTT+/Jfd2T4k+EkfyK7djO2jfyUH1P1IUCOcsrwH+z5b4S/tVQwiQS2p
eTrw6npIu1U8nHyRBAvcGjFS9nroIk4kS4eSIEqaUR+Ifd/td9lMiEaQwEv7
+LPN4+tBTbdQKiiSBO+T3XYb8hKhU1PUYCyaBG+jOamvZYmQqvqfxYlYEnhv
C7hWgO0PFrKlfh/iSfDc13JKYzcRpMWlbpncIIHQDctaHgoRmvmdyx8nkeBi
Go+BxREixKy86VFJIYGSxl8/pZNEoM2t44lNI0Faj+KqmSsRBMbciKvpWD9O
bMaiNxHe/qgiedwlAQf7wEoFECGkU/F0dyYJVjrq8amXiLC3zSualU2Cl7h+
8vUwIizX1z5+84AERaYPKhbDifCqSq15ay4JdrrVPW6NIILP6/PTdx6R4Iuj
sLMyZm97+UFG4gkJFvU0TnVg+Ik84q6Lz0jQJP4Y4QshQn5WwNGJFyR4Xa5a
dA/LfzqtNcC2kATHG+9mFJ0jgmbCxjtNxSQwlPn918SNCP2Rlyr3lZJAY4fL
rJE9ETJCOvqelpEg6Vh6xRMLIpzw38qvXoHVJ+jyNo1KBEWvK1rxXBLUq6Lh
a0ZE6HDupK5VkUCPP/BR7yYiJNptdztTQwJtsc0L+xSIYGYVFfu9lgTLuAlz
FRwRxDm9zzj1JLgsDWjA1HqoJxt+rPyAzaOwyu3Et/VwdV/cnF4zCZo3/kt5
W7UeeHRNjKTaSSC8Q1tXJ349VGgmWod0kCBDr6hq+7n1EKg6Ejz1hQTWxTVb
31ush3mx1KqWbmweu5X0X8ith5f8kz+RXhKIWnsMCc0T4MwKSfBFPwn2p9QX
rrQSYHh0lpEwRALHOH+Fd1cJ8PAH3ZNnhATF7l9e3ztJAIfOrOtnx0hQtqE4
etNubF+s53wynyaBoP9rXFSNBrTm5dtK/yFBO8NMgXpYHeKyeEMvr5LgSPdh
8fApNWCkHcueWSMBAvHKx66pQU2k4K+P/GTwch0rHy1VhVJnh7OJEmQ4lXXe
pP6PMtzTVL6ybj0Zvnx+MxigrAAJ+oVvSzeQYXiPSFLkNXkINWbx2WmTgYq3
Pha5JAd25pcu5+mQYSFblJTeLAvKwT9C9hmSYTDBWKv6lAwktucHn2aSwW36
aGtGvCiEh5n4lfuSwUj08dc3gz8Qn7hPxfYXyFAg74oYFnQiDmmevwWCyHDw
i56Uyc4WBJ5lnjcPJYPLcbu120Zl3NVv/D6D18gQarbztpz5CNd3e6OXVBYZ
bI/fjfyhzIue2uv0vCibDB/TDbPt3PlQC+ra5PGHZPDnYbtdf82PGthuO/Mg
nwzpsRa/YzmC6GRUsseeYjJ0hmR5BB4VQ537bFwdG8hwr/tRwUYnGfS8UDiz
q5EMVyZZTZRRGTRM77HukRYyvN97QS7Fcx16N3h55sAnMuR9ntJIPyOLflJM
CSR+x/ich1bZ4/LoD6TCJr0Pyy+0+DWhWR6ddh7YL/OTDJWaYeVjpgqoWLEB
P98wGbqzSySUiIrogUMtMf0zZMg5pe9oXaeEml9Y8Dw+j+HbZK0+bVFG7TLV
zD8ukKHufHTccIwyGjDhLlu1QoZLS02pVRQV9Kps0oLRGhnKGhb7/LNU0GST
sq8veCjw6ctVm8eLKuiLaOG7WQIU8Fdfs/bKUEUrX+iHKApT4Fdsz5a5CVX0
wxer/xJEKaDjLvS+01gNHdJ6qBUqRYGNYh53KxvV0HlWo9CSNAViQ3OEX0ir
o3zn50a8ZCmwW/Z37tQRdVTtremzk0oUGD0ulUxpVUe3jLgkfFGhwM6Iq4KW
ohqoET7hnJk6BYTSBZYzTTVQyu4SizoCBZyZNXc2+GmgFnbfDZENFOwd3+TQ
nauBOkQIKJVoYfHtxqu1nzVQrydbV/Q2UWCL+Q7ds7wE9NqfQK66LgXKlB0M
GZsJaNr67Hsp+hSYMUI2yJkQ0Bxa/RVJA6wfc820c0wCWuQ17XR1JwUuREQ9
/8+agFalKNDWDCkQGnfqQf9pAtpcsX+L3x4KlF83apvxIaDdA07ikyYUsCRI
Fd+4REBHxeImnfZjfB66OIJGEtAlg6LWHqBAZW/m1pDrBFTQuqvA8iAFBs/J
2TTeJKCyl/luNpEpoMS74JuXTkCJeZv9yTQK7GDUpa3LIKD6LebHKxgU+Odz
hl8yi4DuXfA32cWmwPM6dbk0zGaoZao9NcP4SyKzCzIJ6DFS7T/NwxTQ3+7D
tL1LQJ3dJ/rvWFAgw9i05dYtAno+UbZG9igFrgzuKnXB9q2w1yY5sccpsJb0
QOBDHAFN6HOIwtlQ4FVqzOeqCAJ6V+iaW7AdNk9dL1dOMAHN13vJmrenQHXx
dtVz3gS01PKrnocjBRx0R9z1nAhobfA//IATBXwmXs6HHyWgn+5rz51wocC3
okve/jSs3+/XZ4XdMb2cYizdNCSgForLM8WeFIiMul0jv4GAJh92mHE4S4F2
wZ4rqxIEtD32w7SUDwXGV/KUkic1UJm6ndNvfClw921MJa5SAz3MmzHleoEC
p9q1qIeuaaBtvmcnqy9SgFd28UuaEhb/4tvE2VDMr5GNz+5WRw+PHphQu0IB
fr3tsffvqKMf7eTG/aMoEEwX4Hu+Th1tpZaN6CRRgH1ElvP5uyqKD9sw8vUm
BUD8VV/cNVXU/E3scEQapr9OifvhO1TRlm0nf/XepcBrXMK5YxdV0GYl3GBS
HgUIFprfa2aUUEkLzwF4TAG74JWHmVFKKCf+88+Jp5j+437lS6spoc18j35Q
CymAPGriHd+viDaNsftWKijQuitsV+dpeVRcu6Q3D6VA5/zvxKZxOZRlT+i1
rKYA2eR4V6WXHNr4abbn+XsKyA28hDYvWbSxIrXLsZ0CA0muCVRrGbThev/n
D8MUKPQPjI5tEENrd/g23V5HBWG1oCwH3hmu5jUPLxV5KgS+b9UMdJrgXulz
lL6tSIU9N18EPKkb5kLcYct0NSqsad/xdFDs5ZYN6fekbaTCNQ2BR59+v0Ke
3hodv2lChbNRRk7JyXOI+HR/vNx+KmT8QKfrm38jbpRv224CFTwuiD0REFxC
tOfqzieTqRAa1H2uwW0VyWI9XE00owJHyXC3WjgfJP87KZ7gSAUxkbK1r0Wi
MGt59JmUMxWW1aefCz8Xg0NPOObXXagwdnt5LzNHHCSP70uO96SCUfnNPa9i
JCGqQFk1zp8Ku/aYH15WkIYhYZlK8UAqeKLv+Q9GSQP5pIh9bDAV7D0ePqpb
kAY+8aX7MZepIL5hut22WQaCnDp0rsVQoYn0YPyDsyx0ljc2icRTYdzy3aE/
dbJgJFPjFZ1ABf1JnQjCRjmYrywojLpJBd0hmpdhrxycUUwwicykwtK4o83b
XQrQeCayRzCbClSR2u+/IhRA592lkKsPqBDenF3a3K4Aw96e1RGPqNBpcWxP
vYsiOHxgMMMLqZAZIyPf5acEJgn/OS4WU0E9WpRGKlQCWcsLQW6lGD8pVZJ2
E0pQ+/3hY/MKKuzIld2QbK0MmfffVFdzqeA/nn3iUZwyXHBp7zJ8SwW/k6b/
7CuVYfMsj7haHRVy3h8seKyoAnwlCpoJ9VTImnc7ueeACnQG6e3lb8TwwmcK
7VxVoBDIFn7NVFh5ZHxVKV4FYgVsPEZaqTC1r2Lo9AsVcGo4F27TTgUJ81ll
WqsK7L8efaelgwrPJOYySydUQMEiq+jAVyq0tK9uLhVWhWnFksbiTipMt/k8
IK9XhfqepoFNPVQQaejbbr9bFbKzB1Zv91LhT+eIjhBTFYJOr8hK/cDqCaJs
MLZRBYutMrphA1SIjHjWu+SmCrozm8i/h6iw373m5EF/VRB8hdi6jFDh740/
X5Uuq8L3QCvfrjEqeH3zKQmOUoUSxDOOM0mFqCO9dz3iVCEBF/6wapoKuQZm
TqPXVcGlPr1i5xwV+udE1RYx2zT+ZUfubyokfLARTcbilY+8n1BeokKdtXXe
W+y8OYVegfg/VJgtyssNx/I1dv9W4/1Lhfo3JpNdWD0P74kbnv9Hhco+fGqD
uypcct7A+cVLg3XI4MxhW1U4qmPsbI2jAdX4V5g/SxW2TZtfahKkgWKkI5/J
HlUQKT6dAiI0YFd42mRtUIUfAZeeFYrRIMw3/EW+mCqU779Zqy1Jg79/tx2y
nVGBZP4n32/haaD7Mru6/JMKkOO+SYbK0UBG7KhuTLIKqB+e1p5ToMF957Ob
cN4qsCAvhDgr02BAS27ViKkCeVk7vVgaNPik85o1vKQMl52Ykdz1NHjeNm7u
0agM1lscMg00adD5WtyEe1cZxIuutyhupsHBMPrHoT3K2Hs051eMDg0crYP9
a3HKULmv4t+aLg2+hGYtXGtSgrN1o/qDBjSIm2q06TymBO2d5ISXe2mQnUYx
OHhUEZ5k2uRpIjT4T3B/65K0IoSf8kFTTWkg9kuTWtegAIaTWdMXKTQYspx6
88FQAdJ5V80Z5jRoqBbsIy/LwcNvFldnD9NgzjphwDVDDl68fFqebkkD1lzP
hnRTOaj976T2mDUNTHXGRRhhsjBb9XYlxokGNRJn21QmZYAeFp3TFEiDFVRk
/PCcJFhY/+jyvUgD9VT5h/UikmBnYCKtHkoDhybOUKuaBJz/MR50JgLjLz/F
b3G/GGQdMD8klUADESfiuSAXIVjiU1g1f0iDTSZr94R61xD+Lq/ty7k0iLXd
+iTz8yoiWfje+V4+DR4+ty1+1PgH0XQM/DjznAbVjxefjhctIObVPTmJZTS4
Mhe2affSOJJ75cGhTy00IN31yCW+qeRa4Qxyj/6hwelIlfSQJB40dEkxpG2V
Bp9Lr7P+evKij8b/WbH/0eB7waOtjhQ+dPVTk+BBHB2yvQJUsqb50fsPXZ31
JOmQ+4KzsLRJCG28Zb7/EZ4O+heOc1unhdCFuN3ymuvo8NdoPkb4lTDK8BOo
VVKkg3a75ubjRqLoNOWelgCRDjRbrRMdyhKosknU3xBNOpiMftnP1yiBHtT3
6vijTYfpwGdFioGSaIrCvohpHTpMJDoPNzZKoXuHvw507aKDYJ6Wsb+WNOrc
zX1jZUQHz+QtfTze0uj11pzkj8Z0KHZsUG8uk0Z/lJ4n1SF0EL+ksKZGl0Gj
o/EPCuh0UMO/NBAyX4cWXFwM0mXR4aihqDUhbh3a7f39SB6HDqZqx3qs3q9D
t1k/4c84QgfhAW1T8T2yqDUnqUvRCuu/3Lv8CrafXzkQWJh0jA6Pxl69E8mW
RT9voTlG22L1ahS/28kvh/Jo6Jvg7OkQYURvbd8mh25eJ78uxIEOPJyuZF8b
OTR45efb86fpcKu5LrzkqRyaM9WQPuVKh30rg6Qj7XJoy8+X59w86FD1qWB4
eEEOJTaGEO29Mf4ovIoru+VRFur8p9MH42vn27LzlvKobxG7zdIPy3e22OvH
WXk0I29nfusFjN8eF5OD1+TR93dUwphBdNhlXXk45Z48OpvAZ117kQ62l74r
d72SR1UjRrabhtLhcq/2ZukGeZQS0CryJowOOYPrDhp1yaNeniX9hhF00Nqu
bWc+Ko+m/Zfx+mUkHTalVmceX5RH31pG3Nh6jQ57y9fZWvApoON0D9fcWDrc
ZHxVNhVTQOX3HzElXqdDUR/EEWQUUDAwVrp7gw516WWpc/IKqKv2+hmFZDp8
/6+cVa6kgCYqC9cnptAhbzZq4oKyAvpGcipL4hYdNj5eGdHF/IryiikVtzE+
LQtoF+UUUB810xjPDDrYuTae85RSQJs13ULV7tHBL817jkdIAd2yNcm36T4d
gvqdko1X5dGrO964XczBzheJt1Wbwt5XxoMndR/RYSHVM/lJrzy6/4CkZc9j
Oii4ZJSPNcmjt+i7GXHP6CAwbJr4/bU8Om9uj+x7SYfGdR7rou/Lo+bHondO
FGL8kaJ8pzC+n5ws2Hz3FYb/VbJZHpuH8OkudfZrrJ7tOl28R+TRU2dwsn/L
sXrGfM6U7JBHub66Ik8r6TDs2MazV0Ye9QsPmROvoUO9fN+zuvdyaFtM3vCb
WjqIufQodWbJobpJH3s86ulwyPQfoc1PDh24t+F9YzMdHk9zJmJU5VB4xKoI
/kiHsyXhedbjsuidF74FWz9h9zVl9+imMln0CLfuTuw3OozkLsr0mcmiz2qn
b+ztpoN3r2XQFwVZVLRZKXL8O6Znr99uYz3r0Lfd7t6sAax/l4HeyFPY/fgj
RRGfokNBvsALXxsZNJZ3j8mbGSy/fmq6gbwM+kvYYZvHPB2s13TtOM3SaIZC
kXLjMh0CcMaxtXukUYldx6ZicAw4QD+7GPRXCh31ykoTU2ZA8+/0LY8SRVGK
f31cuSoDUiU2Ca90iqDZl2bD3DUYIGj77TR1vQh6PI7k+UGTAe8Yv1K08oTQ
9/nDpjH6DLgl/0b/2D0c+nBw25gomQHaJtbHOx6tcoNPBFg9ozJAg8/Uq1tu
hXv4Y1XVIQZmX+fk5oYuc9feHE5LM2NAsNbm8J1HFrhWyefJ2tYM+Oyo6pPS
P8UVPFiaaerFgLRXOomuN+u53aU8YoPeWP2CbT7KY6+5BXp0v6jzDFD0aHkV
tdmFa6fcyWoJYMBh9hFB9v33SMnMyrJNOAOqJ3WibIN/IC5ZiMWFWwywzF2V
Ll/3G9kvH8VVucOARqnSzK8hC4hsbOsWbgYDIq7hFMjDiwjq/x+v4AMG8PHy
NEU8/YMomV15lvSMAS43nRrx/DwwXfNBafdLBhT7aiun5vFArbFsRGchA67S
xYTrmLxwTvvhifWvGWC7FnR09BofNPytFX5ezYDkk606laM4yPKROn+4lgE+
B080SwYLgN/I0d7f7xngPd/gniEqCMSO4eK9zQwQTbsezNQQgsAnoo4NXxmQ
ferEhRwtETAnHmn27GJAv5q+xqtMEdBOu71H+jsDJL+IJD+XF4W2K1vxx34y
gJ+wXnbviijonOBUDE4wwPpAvn7HXXEgTGh+ODHNAN1dpamji+IgG7Ly9eMs
Aw7dzkSVzSRgLTtvvmKRARfHzr8rmZeAuZ0hfDv/YLYA44bKQUkYrrXE568y
QKKesBYZLwkfR/m2pvAyocTXpNZdVQpqg7/tEccxIeSesX23nRSUSb6ghgky
4caTNkVahhQ8MLB1PCPGhFkvYzq/KB5u1ezwHpBggsBirPcWLTzEW4mGWOOZ
cLa1rLRhPx78A0vSKXJM+N1s2ODjiQcP8fi8NwpM6LzMFx4Uhgf7jFOvDJQx
fG6wyZ+beLDcZlKTp8qEIWfjmqlcPDDeSrepazDBDGcrb1OKB8RiuDd5Pebv
9OYgdXjYOVQ5IarJhLFlztNbn/Cw6cLNlVBtJmg7jKe69+FBTdRDZHETE3ZM
7EktHsWDzJ0DCp46TJAamDl6YQ4PgnpKWj91maDGcskv+oOHFe6UwfFtTFie
sQpz55GG6UO10GLAhOdGOQt3cdIw+PMOh7yLCdxiA1O2kDR0+vrYlO9mQuG9
65WBwtLQLMRw227MBAut2omNmF19i3Ahdy8TbGOlz1oJSkOpzmKEGsKEU85p
wsL80vCkoikpyZQJPRnEO/vX8HDP7ME9ERITe480bltdxENKf+DzEAoTNpFK
Jg5M4yHG51DFbxoT3p4tVpb7hYdQgU0f3JlMKBde0PDtxsP51LWv/WwmiN99
HOHUigfXzR1DR82ZMC/7cm74LR7syh/PNx1mglKmzna+Ijx278L4SJZMWBzb
rFl0Hw/U3mP4sqNMcKqAj7yJeNjrra++zZoJ1l80T0xewsN2fsGtOTZMeGdz
gO+iGx60b3bvUT3JBJuHhzRfWuBB6nW0pfApJpimS/UpYHrAMe0dLzkzoU72
XfUhMTwsdRt6z7sw4etJLfeQPin4wTMQ2+eJ6Wu4T/i6hxR8SSxLtzrLhJhP
C0LtelLQqHkjr/EcExiyho8zJyWhmLa/ptSfCedw2am/nSUhv1O2TS+QCYcS
40sSNCQhw2Os90Ew1k+P9MavHRIQlZC2knCZCTJXuA9umEjAia+zBq4xTEg4
z3cVHReDsItidrLxTHjdIL1sGCsGeUTNaG4CE0YzjD+ZbRaDBQ/LXrkUJiSd
/OKeaSMKibylMW+zmOBlZ6+PPBKG91suDqi8YoLLniDtI79wMNVyU6qulAlB
zY4pL0/jQN73mfG5cia0uHZfyxziB0dub8J7lAkZ2Wcuu/bxwdqRA/t8P2D6
IMrL+73jgZ0XhVKa+5jwcF+//p66JeQEkVAV8JMJvCaX1XkeLSJhdUbjmkMY
n8L1X8aiF5AWabcDQWPYfQ2WYBXS5xG3nMbJjQtM6C31+46PnkLutdygXhZj
wadvSe7a4l2IJFF1eYchC2rsw9ROJA9wLX6+rX1pxALdQ0T5XV5D3FsPXJP1
TViwJPbl2y7yMFdzY4m+DmD+4rMdMj/GuMZbDzsTGSx40CTUcMtzhhs6sbQj
i8WC3Wtf5O6QZ7nvnmXyqpux4F6AlF628hzXfPvEHSULFmxn3pUKKJ/nOhlG
tePtWJDomlCR/XmRm7+ody/engXOwyrD0jeXuNOlHWfEHVkwykn7ImG+zA00
2SAq7MKCEnM91oXyP9wEqIR/3ixYrUghv3P+y/3M6yR58TwLei2aT5OF17gq
1WLdf/xYUA9Tf38/XOPmkI/7LwSxQDXC697bjn/cN4z5pxMRLDCf4j4T5+dF
+cRvB7lHsSAK1/1RlsSLUptM6SPXWBDp3LNO7gov2mZ2fWDgOguK7j/aNPuH
F1WUNixwSGTBj+HbD+t38KG2bd0hfcksKKa/vxnvxocOW2xR6b7FAp8dmzO+
fuRD9eQ/Dh+/wwLrPk9daz5+1OeL/6svGSxos/qh9nYbP7p2/N2h9vssyE+8
GgmR/ChJxUPjUA4LKM8FD1g+50eju2UmmvNYILqy2svq4EdlT9pHNTxlAbu7
u/SnMg61JghZ0V5g/AwWLocZ49DM/qcbagtYcM70yGaBYzh0INti5mAxC4Qk
lD67+eDQLadWKqtKWAAuqe+KYnHoWa3sWKSMBR+t9s7/vI9Di4do1hVvWIBT
n09eLsWhf3KnNppwWZCgU4tf/IBDwTXld2kVxv9ND8Hv3Tj06pZ91YY12DzJ
Q/QXYzj0w9jPhKJaTB8d/ANeSzgU//SanUE9CwqRKWkNfgHU6sz2rS8+sIBr
/4yEigmgt/W/Lus2s2DQLYtgJSOA9k1fqnvcygIzy4Xgn/ICqHaB1s3N7SyQ
s9V2dFcSQN19Gh1yO1hwIN9acgazt9xPzFH8yoKyFj2TcEUBdLTt2Gh0Jwum
//35oS8ngObzaeitdLNgAd+TtiglgLoZDHp79LJAe/SOSq8whnd4XNzTz4Iz
W2QtR//h0NEb3sucARbUjd04rvYbh+ZX7d6HDrFg5JXx6eBhHOo28zd0+wgL
SstODYp1Ynyur6nJHsP8J6YdW+sxvPk1YdlJFhRsu5veXILhQ81ZEdMsOHbx
hIvYAwz/Qj5hYZYFrynpbTHxGL6vu/30bxZckUrEWfpjeKn7Ct8WWWBrFcvx
sMPivfQzy1dZkKaTTri9EYvP/P1j6z9sHmYTKxUiWHxzuXYGLxtyK0ySyaP8
qJse7VmoIBv2PeqQu53Dj26xk5ydEWYDr3OKjW8YPzoa92mXoxgbfrzPUmqy
4UddJ+wryHg2SIaP8EpJ8KOb1DbylsiwYT1TNkjwJ6Zn1gRpkxwbVO4X4FJK
+FCXJwGNosps4Htch79lg9nuiV0tG9jgn/thYSGFF910+5iGqTYbFNI+qfo5
8KLDDeqOBZvY4H1r2rxuKy/qsuXxaLIuGza+qw5aq+BBT49ULx/fzQbcNHze
kfuP63z6t8IAgw12bdQq8YcrXCfHYxZL3mzoFlGm7i6Y5Vrl2BdnnGeDQVoQ
eOJnubQRF3myPxvExO+vUs/McLd6BXy9EcwGmRS1Dcjmae58YLqNTiQbOjWc
u0f2jnHDE7tP2d1hg5SewVZ+/X6uX8fAO1wmG4g1g+1jg71cF8UJ7cf32Nge
QWgy8+7hsjL+Di/msMFKdH3pi6SvXNl8dc8bL9lwOd38cJtqM/dBlb1vTS0b
HN9t99lgk4uk4Fw/u9WzoS4QsfYxKEKiqN67pRvZMG55br/mrTeIR9PlZduP
bGBl+k+pR9QiO79lX1zsYsNbqaXsSKV2RFv18fe73zG/jorh8PInRPFkIULq
Z8P7/mZdl4+fkdWBat4bQ2w487xZZrNTJ1I9PRCxZYYNJW88nHvi+pCiHRND
rXNsUJuJ7o851o/k+P2m+i+wIY1decNU/QdybVVAtGaFDaUPXYvi0n8iwYik
u9saG5jIpVqxQwPImTD5RjwvBz7vFuLY8w0ih4U3xtsKcuC09U0ZJ8shhMTU
n+IX4cC+EOtY/sUhxDB+t3m+GAe6q1i/LZJ+IcqyNJlFPAcOEvW2LpQPIz80
XFMSVDjw5wxvZm7jKDJ76d8tEXUO7H7WZRVtMobwf795N4zAgbsNpsSCh2OI
5p23D85rcSA+Iy3iq/s4smvlWN7ERg7MMFI8v9SNIxTrqcfOWzgQkB0lRNCY
QE4rqhYe0+eADUc3NZU7gVzwL3j1cTsHvC8FPm0UnkSiPtPKGDs54KtdWHSU
PYnc2tVbUW3IgQ9l2bv2xU0i+cm+VXv3cGCo3p0d9n4SKZsTe1dswgH/wq1P
tv6bRD4czn6vt58DZwuTkg5sn0K6Xxo15gIH/AIcOhrsppBxfEsL4SAHpML6
PzZGTiGrXk7tt8gcCHc+6Gf+ZAqRaFn5LEPjQKjDkrFd4xSirpfYGcPggOvB
2fX/fk0henGbvuPYHNiA+1a0998UgoxX9l804wBzU9plvMg0Ys60HFw4xAEl
pd3mJ/DTiH3+2LCXBQcsEnkPhctNI94iYePDVhx4MPGIc0NxGglzUZz+7zgH
5gPaDkcpTSOJdc/mOk9wQMhn9YEX5r+vTV48YseBEcOz9WwMXxTR9afRHptP
n3roZuz8mgHvNbIjB255XqwWwfJ3HBTm4zpxIFmlMH4Mq28oO0PAyAXrJ9N8
amRkClng3SXy0o0DuJi7k2qtU4jgfx/Et3hyYDWjfl9qwRSigP6Hv+/FgTzX
gQWnG1PIJo2ldarnONDmwEpP95hCjC7FK9w8j/mp68QppCmE3qOpIunPATmx
YzcCFKcQ673l6pEBHLj8NKWJMjKJBP35pRVwiQMhf23RhdBJJPb4pc2zoRzI
l14KXqNOIndKZXXdr3Ag1UJicURsEqn0M91pG8WBLOZYyetrEwjPXPoB00QO
nMtNee/uPI7gD2+nlCVz/v+/bUSl/Diy/mUdfUcqB8plyfapNWPIAa95c607
GH8hZebblcaQ8DH2SZEcDvxbi97oljeCiAzwBH98jfFD/NaWdG4IydKLUU9+
wwHes/ye80uDiFGAXJUVlwM8NxIFcZcGERfJLYLdNRwQexf07GX4APLe6EjC
UAsHiH52p1ojfyBX4x4+WBnkgDWr+zyNrwdR/6pPrRzmQLX1c++/fN3IK2LZ
SOgYB26arrkJCnQhgyXNeoIzHNgrR/bhl/yGkH4sluJXOfD30V9bCeMOhH83
o0lLxgxq5LuuF1g2IumXP3kNy5qB66zIwXOvGhCDRjuZxwpmgFvUy0si1CMO
//kc3aZmBs/9ixwcZWqRP4//Ls9qmIHTuvxMbnoNkrgQeaeYaAZBE6am33Sr
kbcxd/qNN5nB7bfn2sN9UcT6s3b43y1m0A8dsfaWlcgs4aU2qmsGiWrW69K+
lCPrX71zJ+8wg6KdLdR2rRKklMdcUtjQDMIJ8xLfZ4swvXe+aDAyg3N3DAK/
fCtAQvsmf5vtN4OX4Y9a6yefIoo6AWkypmYwIUZszbbNR1748pt0HDSDXv7X
jWX8uQgNjetJpZiBntJV3sb++0ivqGKoNd0MrMPOWIUvZSF+ltlENZYZKN2o
ihS9cQeRzNr6rpdjBpLi27zrHqQiOaOvTmcfMgO30U985rpJyP5dpqJOFmbA
rE9vNDwaj3wO+fBk41EzIPOLW0uaRiJnGizNRo+bwUxLxLFnSpcRQbm+mSc2
ZjDKtvHtqPFHMk66JXudNIODlwPw8d5nEMP8eUMDBzO4dzfTTYb4H9I8f+nb
/CkzWOqa4LG+wEGcEZHgktNmcP6dKN43UA/5G52kHuhmBpQGAUHRCY99/wOx
wBg3
        "]]}}}, {
    DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, AxesStyle -> 
     Thickness[0.004], DisplayFunction :> Identity, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], ImageSize -> 230, 
     Method -> {
      "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
       AbsolutePointSize[6], "ScalingFunctions" -> None}, PlotRange -> 
     NCache[{{0, 20 Pi}, {-10.526204460554222`, 10.382930208997836`}}, {{
        0, 62.83185307179586}, {-10.526204460554222`, 10.382930208997836`}}], 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {{{0, 
         FormBox["0", TraditionalForm]}, {
         NCache[10 Pi, 31.41592653589793], 
         FormBox[
          RowBox[{"10", " ", "\[Pi]"}], TraditionalForm]}, {
         NCache[20 Pi, 62.83185307179586], 
         FormBox[
          RowBox[{"20", " ", "\[Pi]"}], TraditionalForm]}}, {{-10, 
         FormBox[
          RowBox[{"-", "10"}], TraditionalForm]}, {10, 
         FormBox["10", TraditionalForm]}}}}],"\"\[Omega]=0.9\""},
  "Labeled",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"]}, {
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, 
    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
    BaselinePosition -> {1, 1}]& ),
  InterpretationFunction->(RowBox[{"Labeled", "[", 
     RowBox[{#, ",", #2}], "]"}]& )]], "Output",
 CellChangeTimes->{3.7680619348148127`*^9, 3.768061969177106*^9, 
  3.768062001004012*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Labeled", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       FractionBox[
        RowBox[{"2", " ", 
         RowBox[{"Sin", "[", 
          RowBox[{
           FractionBox["1", "2"], " ", 
           RowBox[{"(", 
            RowBox[{"1", "+", "\[Omega]"}], ")"}], " ", "t"}], "]"}], " ", 
         RowBox[{"Sin", "[", 
          RowBox[{
           FractionBox["1", "2"], " ", 
           RowBox[{"(", 
            RowBox[{"1", "-", "\[Omega]"}], ")"}], " ", "t"}], "]"}]}], 
        RowBox[{"1", "-", 
         SuperscriptBox["\[Omega]", "2"]}]], ",", 
       RowBox[{"{", 
        RowBox[{"\[Omega]", ",", 
         RowBox[{"{", "6", "}"}]}], "}"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", 
       RowBox[{"10", "\[Pi]"}]}], "}"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Thickness", "[", "0.005", "]"}], ",", 
        RowBox[{"RGBColor", "[", 
         RowBox[{"0.2", ",", "0.65", ",", "0.85"}], "]"}]}], "}"}]}], ",", 
     RowBox[{"Ticks", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", 
          RowBox[{"10", "Pi"}], ",", 
          RowBox[{"20", "Pi"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "0.04"}], ",", "0.04"}], "}"}]}], "}"}]}], ",", 
     RowBox[{"AxesStyle", "\[Rule]", 
      RowBox[{"Thickness", "[", "0.004", "]"}]}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "220"}]}], "]"}], ",", 
   "\"\<\[Omega]=6\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.7680620301628513`*^9, 3.768062068159031*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{}, {}, {
       Directive[
        Opacity[1.], 
        AbsoluteThickness[1.6], 
        Thickness[0.005], 
        RGBColor[0.2, 0.65, 0.85]], 
       LineBox[CompressedData["
1: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
aJy4twOCxZJONu4pPep/ykRV6Q==
        "]]}}}, {
    DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, AxesStyle -> 
     Thickness[0.004], DisplayFunction :> Identity, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], ImageSize -> 220, 
     Method -> {
      "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
       AbsolutePointSize[6], "ScalingFunctions" -> None}, PlotRange -> 
     NCache[{{0, 10 Pi}, {-0.05714093268802645, 0.05341185787763906}}, {{
        0, 31.41592653589793}, {-0.05714093268802645, 0.05341185787763906}}], 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {{{0, 
         FormBox["0", TraditionalForm]}, {
         NCache[10 Pi, 31.41592653589793], 
         FormBox[
          RowBox[{"10", " ", "\[Pi]"}], TraditionalForm]}, {
         NCache[20 Pi, 62.83185307179586], 
         FormBox[
          RowBox[{"20", " ", "\[Pi]"}], TraditionalForm]}}, {{-0.04, 
         FormBox[
          RowBox[{"-", "0.04`"}], TraditionalForm]}, {0.04, 
         FormBox["0.04`", TraditionalForm]}}}}],"\"\[Omega]=6\""},
  "Labeled",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"]}, {
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, 
    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
    BaselinePosition -> {1, 1}]& ),
  InterpretationFunction->(RowBox[{"Labeled", "[", 
     RowBox[{#, ",", #2}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.768062051230413*^9, 3.768062068947644*^9}}]
}, Open  ]]
},
WindowSize->{1366, 843},
WindowMargins->{{4, Automatic}, {Automatic, 4}},
Magnification:>1.5 Inherited,
FrontEndVersion->"10.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (December 10, \
2015)",
StyleDefinitions->"Charter1.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[400, 13, 246, 5, 86, "Text"],
Cell[649, 20, 156, 2, 75, "Text"],
Cell[808, 24, 216, 3, 45, "Input"],
Cell[CellGroupData[{
Cell[1049, 31, 605, 18, 75, "Input"],
Cell[1657, 51, 514, 15, 45, "Output"],
Cell[2174, 68, 861, 26, 54, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3072, 99, 418, 11, 45, "Input"],
Cell[3493, 112, 325, 9, 69, "Output"]
}, Open  ]],
Cell[3833, 124, 203, 2, 51, "Text"],
Cell[CellGroupData[{
Cell[4061, 130, 758, 21, 75, "Input"],
Cell[4822, 153, 782, 23, 78, "Output"]
}, Open  ]],
Cell[5619, 179, 338, 6, 86, "Text"],
Cell[5960, 187, 348, 10, 78, "Text"],
Cell[6311, 199, 216, 3, 45, "Input"],
Cell[CellGroupData[{
Cell[6552, 206, 585, 17, 75, "Input"],
Cell[7140, 225, 542, 15, 45, "Output"],
Cell[7685, 242, 2450, 65, 148, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[10172, 312, 207, 4, 45, "Input"],
Cell[10382, 318, 1414, 38, 91, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11833, 361, 237, 4, 45, "Input"],
Cell[12073, 367, 1044, 29, 91, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[13154, 401, 366, 9, 45, "Input"],
Cell[13523, 412, 1014, 27, 54, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14574, 444, 371, 11, 45, "Input"],
Cell[14948, 457, 481, 14, 69, "Output"]
}, Open  ]],
Cell[15444, 474, 125, 1, 51, "Text"],
Cell[15572, 477, 429, 14, 78, "Text"],
Cell[16004, 493, 216, 3, 45, "Input"],
Cell[CellGroupData[{
Cell[16245, 500, 666, 20, 75, "Input"],
Cell[16914, 522, 541, 17, 45, "Output"],
Cell[17458, 541, 900, 29, 76, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[18395, 575, 131, 2, 45, "Input"],
Cell[18529, 579, 778, 24, 76, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[19344, 608, 365, 11, 45, "Input"],
Cell[19712, 621, 446, 13, 100, "Output"]
}, Open  ]],
Cell[20173, 637, 126, 1, 51, "Text"],
Cell[20302, 640, 274, 6, 110, "Text"],
Cell[20579, 648, 167, 2, 75, "Text"],
Cell[20749, 652, 215, 3, 45, "Input"],
Cell[20967, 657, 564, 14, 86, "Text"],
Cell[21534, 673, 3332, 94, 307, "Input"],
Cell[24869, 769, 574, 18, 75, "Input"],
Cell[CellGroupData[{
Cell[25468, 791, 369, 8, 45, "Input"],
Cell[25840, 801, 1364, 40, 90, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[27241, 846, 153, 3, 45, "Input"],
Cell[27397, 851, 1145, 35, 82, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[28579, 891, 327, 8, 54, "Input"],
Cell[28909, 901, 1130, 35, 78, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[30076, 941, 687, 21, 73, "Input"],
Cell[30766, 964, 631, 19, 49, "Output"]
}, Open  ]],
Cell[31412, 986, 527, 9, 120, "Text"],
Cell[CellGroupData[{
Cell[31964, 999, 510, 16, 50, "Input"],
Cell[32477, 1017, 493, 15, 49, "Output"]
}, Open  ]],
Cell[32985, 1035, 318, 8, 47, "Input"],
Cell[33306, 1045, 378, 10, 47, "Input"],
Cell[CellGroupData[{
Cell[33709, 1059, 1082, 29, 75, "Input"],
Cell[34794, 1090, 798, 21, 184, "Output"]
}, Open  ]],
Cell[35607, 1114, 431, 15, 81, "Text"],
Cell[36041, 1131, 564, 18, 75, "Input"],
Cell[36608, 1151, 213, 3, 45, "Input"],
Cell[36824, 1156, 215, 4, 51, "Text"],
Cell[37042, 1162, 3381, 95, 307, "Input"],
Cell[40426, 1259, 633, 20, 123, "Input"],
Cell[41062, 1281, 108, 1, 51, "Text"],
Cell[CellGroupData[{
Cell[41195, 1286, 179, 5, 45, "Input"],
Cell[41377, 1293, 1024, 36, 105, "Output"]
}, Open  ]],
Cell[42416, 1332, 187, 4, 51, "Text"],
Cell[CellGroupData[{
Cell[42628, 1340, 295, 5, 45, "Input"],
Cell[42926, 1347, 1051, 36, 105, "Output"]
}, Open  ]],
Cell[43992, 1386, 258, 5, 51, "Text"],
Cell[CellGroupData[{
Cell[44275, 1395, 507, 12, 75, "Input"],
Cell[44785, 1409, 1849, 62, 189, "Output"]
}, Open  ]],
Cell[46649, 1474, 243, 4, 51, "Text"],
Cell[46895, 1480, 1543, 51, 171, "Input"],
Cell[48441, 1533, 121, 1, 51, "Text"],
Cell[CellGroupData[{
Cell[48587, 1538, 177, 4, 45, "Input"],
Cell[48767, 1544, 110, 1, 45, "Output"]
}, Open  ]],
Cell[48892, 1548, 677, 24, 105, "Input"],
Cell[49572, 1574, 131, 1, 51, "Text"],
Cell[49706, 1577, 162, 2, 45, "Output"],
Cell[49871, 1581, 469, 16, 105, "Input"],
Cell[50343, 1599, 176, 2, 51, "Text"],
Cell[50522, 1603, 139, 2, 45, "Output"],
Cell[50664, 1607, 417, 12, 78, "Text"],
Cell[51084, 1621, 267, 4, 45, "Input"],
Cell[51354, 1627, 3215, 92, 307, "Input"],
Cell[54572, 1721, 335, 6, 86, "Text"],
Cell[54910, 1729, 451, 13, 104, "Input"],
Cell[CellGroupData[{
Cell[55386, 1746, 294, 7, 45, "Input"],
Cell[55683, 1755, 546, 17, 77, "Output"]
}, Open  ]],
Cell[56244, 1775, 132, 1, 51, "Text"],
Cell[CellGroupData[{
Cell[56401, 1780, 85, 2, 45, "Input"],
Cell[56489, 1784, 433, 14, 101, "Output"]
}, Open  ]],
Cell[56937, 1801, 172, 2, 51, "Text"],
Cell[CellGroupData[{
Cell[57134, 1807, 362, 10, 75, "Input"],
Cell[57499, 1819, 724, 24, 82, "Output"]
}, Open  ]],
Cell[58238, 1846, 467, 15, 78, "Text"],
Cell[58708, 1863, 218, 3, 45, "Input"],
Cell[58929, 1868, 3215, 92, 307, "Input"],
Cell[62147, 1962, 151, 3, 51, "Text"],
Cell[CellGroupData[{
Cell[62323, 1969, 766, 24, 104, "Input"],
Cell[63092, 1995, 678, 22, 75, "Output"]
}, Open  ]],
Cell[63785, 2020, 137, 1, 51, "Text"],
Cell[CellGroupData[{
Cell[63947, 2025, 85, 2, 45, "Input"],
Cell[64035, 2029, 647, 21, 99, "Output"]
}, Open  ]],
Cell[64697, 2053, 141, 1, 51, "Text"],
Cell[64841, 2056, 296, 9, 75, "Input"],
Cell[CellGroupData[{
Cell[65162, 2069, 1251, 39, 112, "Input"],
Cell[66416, 2110, 614, 20, 75, "Output"]
}, Open  ]],
Cell[67045, 2133, 323, 6, 110, "Text"],
Cell[67371, 2141, 528, 11, 184, "Text"],
Cell[67902, 2154, 740, 25, 95, "Text"],
Cell[68645, 2181, 216, 3, 45, "Input"],
Cell[CellGroupData[{
Cell[68886, 2188, 983, 30, 108, "Input"],
Cell[69872, 2220, 852, 27, 76, "Output"],
Cell[70727, 2249, 1829, 53, 155, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[72593, 2307, 132, 2, 45, "Input"],
Cell[72728, 2311, 578, 18, 100, "Output"]
}, Open  ]],
Cell[73321, 2332, 136, 1, 51, "Text"],
Cell[CellGroupData[{
Cell[73482, 2337, 405, 11, 45, "Input"],
Cell[73890, 2350, 20839, 353, 357, "Output"]
}, Open  ]],
Cell[94744, 2706, 667, 22, 93, "Text"],
Cell[95414, 2730, 218, 3, 45, "Input"],
Cell[CellGroupData[{
Cell[95657, 2737, 1000, 31, 107, "Input"],
Cell[96660, 2770, 897, 28, 74, "Output"],
Cell[97560, 2800, 2537, 71, 204, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[100134, 2876, 160, 3, 45, "Input"],
Cell[100297, 2881, 835, 26, 76, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[101169, 2912, 293, 7, 54, "Input"],
Cell[101465, 2921, 927, 30, 76, "Output"]
}, Open  ]],
Cell[102407, 2954, 201, 5, 51, "Text"],
Cell[CellGroupData[{
Cell[102633, 2963, 783, 26, 76, "Input"],
Cell[103419, 2991, 993, 33, 100, "Output"]
}, Open  ]],
Cell[104427, 3027, 403, 8, 86, "Text"],
Cell[CellGroupData[{
Cell[104855, 3039, 948, 29, 76, "Input"],
Cell[105806, 3070, 1026, 34, 100, "Output"]
}, Open  ]],
Cell[106847, 3107, 338, 6, 86, "Text"],
Cell[CellGroupData[{
Cell[107210, 3117, 334, 9, 45, "Input"],
Cell[107547, 3128, 10229, 179, 357, "Output"]
}, Open  ]],
Cell[117791, 3310, 241, 6, 75, "Text",
 Evaluatable->False],
Cell[118035, 3318, 1129, 29, 325, "Text"],
Cell[119167, 3349, 142, 2, 45, "Input"],
Cell[119312, 3353, 186, 4, 51, "Text"],
Cell[119501, 3359, 1502, 36, 98, "Input"],
Cell[121006, 3397, 1361, 33, 236, "Text"],
Cell[122370, 3432, 140, 1, 51, "Text"],
Cell[CellGroupData[{
Cell[122535, 3437, 4086, 123, 597, "Input"],
Cell[126624, 3562, 35774, 610, 584, "Output"]
}, Open  ]],
Cell[162413, 4175, 1527, 43, 277, "Text"],
Cell[163943, 4220, 142, 2, 45, "Input"],
Cell[164088, 4224, 163, 3, 51, "Text"],
Cell[CellGroupData[{
Cell[164276, 4231, 409, 11, 45, "Input"],
Cell[164688, 4244, 340, 9, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[165065, 4258, 685, 18, 54, "Input"],
Cell[165753, 4278, 795, 24, 82, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[166585, 4307, 1079, 33, 90, "Input"],
Cell[167667, 4342, 111, 2, 69, "Output"]
}, Open  ]],
Cell[167793, 4347, 254, 5, 86, "Text"],
Cell[CellGroupData[{
Cell[168072, 4356, 2252, 55, 218, "Input"],
Cell[170327, 4413, 36875, 619, 251, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[207239, 5037, 1773, 49, 218, "Input"],
Cell[209015, 5088, 36514, 614, 245, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[245566, 5707, 1671, 47, 218, "Input"],
Cell[247240, 5756, 54211, 903, 228, "Output"]
}, Open  ]]
}
]
*)

